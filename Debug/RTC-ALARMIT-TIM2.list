
RTC-ALARMIT-TIM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08004a94  08004a94  00005a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd4  08004bd4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004bd4  08004bd4  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bd4  08004bd4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bd4  08004bd4  00005bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bd8  08004bd8  00005bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004bdc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000005c  08004c38  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08004c38  000062d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de00  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d07  00000000  00000000  00013e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00015b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0b  00000000  00000000  00016850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a816  00000000  00000000  0001725b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f64b  00000000  00000000  00031a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e59c  00000000  00000000  000410bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032dc  00000000  00000000  000df69c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000e2978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004a7c 	.word	0x08004a7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004a7c 	.word	0x08004a7c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f000 fcc4 	bl	8000bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024c:	f000 f80a 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000250:	f000 f9b0 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000254:	f000 f97e 	bl	8000554 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000258:	f000 f862 	bl	8000320 <MX_RTC_Init>
  MX_TIM2_Init();
 800025c:	f000 f8fa 	bl	8000454 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000260:	46c0      	nop			@ (mov r8, r8)
 8000262:	e7fd      	b.n	8000260 <main+0x1c>

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b099      	sub	sp, #100	@ 0x64
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	242c      	movs	r4, #44	@ 0x2c
 800026c:	193b      	adds	r3, r7, r4
 800026e:	0018      	movs	r0, r3
 8000270:	2334      	movs	r3, #52	@ 0x34
 8000272:	001a      	movs	r2, r3
 8000274:	2100      	movs	r1, #0
 8000276:	f003 ff83 	bl	8004180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027a:	231c      	movs	r3, #28
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	0018      	movs	r0, r3
 8000280:	2310      	movs	r3, #16
 8000282:	001a      	movs	r2, r3
 8000284:	2100      	movs	r1, #0
 8000286:	f003 ff7b 	bl	8004180 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800028a:	003b      	movs	r3, r7
 800028c:	0018      	movs	r0, r3
 800028e:	231c      	movs	r3, #28
 8000290:	001a      	movs	r2, r3
 8000292:	2100      	movs	r1, #0
 8000294:	f003 ff74 	bl	8004180 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI;
 8000298:	0021      	movs	r1, r4
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2228      	movs	r2, #40	@ 0x28
 800029e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2201      	movs	r2, #1
 80002a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2201      	movs	r2, #1
 80002aa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2200      	movs	r2, #0
 80002b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	0018      	movs	r0, r3
 80002b6:	f000 ff9b 	bl	80011f0 <HAL_RCC_OscConfig>
 80002ba:	1e03      	subs	r3, r0, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002be:	f000 facb 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c2:	211c      	movs	r1, #28
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2207      	movs	r2, #7
 80002c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2203      	movs	r2, #3
 80002ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2101      	movs	r1, #1
 80002e0:	0018      	movs	r0, r3
 80002e2:	f001 fb0b 	bl	80018fc <HAL_RCC_ClockConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002ea:	f000 fab5 	bl	8000858 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80002ee:	003b      	movs	r3, r7
 80002f0:	4a0a      	ldr	r2, [pc, #40]	@ (800031c <SystemClock_Config+0xb8>)
 80002f2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002f4:	003b      	movs	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002fa:	003b      	movs	r3, r7
 80002fc:	2280      	movs	r2, #128	@ 0x80
 80002fe:	0092      	lsls	r2, r2, #2
 8000300:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000302:	003b      	movs	r3, r7
 8000304:	0018      	movs	r0, r3
 8000306:	f001 fc65 	bl	8001bd4 <HAL_RCCEx_PeriphCLKConfig>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800030e:	f000 faa3 	bl	8000858 <Error_Handler>
  }
}
 8000312:	46c0      	nop			@ (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	b019      	add	sp, #100	@ 0x64
 8000318:	bd90      	pop	{r4, r7, pc}
 800031a:	46c0      	nop			@ (mov r8, r8)
 800031c:	00010002 	.word	0x00010002

08000320 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b090      	sub	sp, #64	@ 0x40
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000326:	232c      	movs	r3, #44	@ 0x2c
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	0018      	movs	r0, r3
 800032c:	2314      	movs	r3, #20
 800032e:	001a      	movs	r2, r3
 8000330:	2100      	movs	r1, #0
 8000332:	f003 ff25 	bl	8004180 <memset>
  RTC_DateTypeDef sDate = {0};
 8000336:	2328      	movs	r3, #40	@ 0x28
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800033e:	003b      	movs	r3, r7
 8000340:	0018      	movs	r0, r3
 8000342:	2328      	movs	r3, #40	@ 0x28
 8000344:	001a      	movs	r2, r3
 8000346:	2100      	movs	r1, #0
 8000348:	f003 ff1a 	bl	8004180 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800034c:	4b3f      	ldr	r3, [pc, #252]	@ (800044c <MX_RTC_Init+0x12c>)
 800034e:	4a40      	ldr	r2, [pc, #256]	@ (8000450 <MX_RTC_Init+0x130>)
 8000350:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000352:	4b3e      	ldr	r3, [pc, #248]	@ (800044c <MX_RTC_Init+0x12c>)
 8000354:	2200      	movs	r2, #0
 8000356:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000358:	4b3c      	ldr	r3, [pc, #240]	@ (800044c <MX_RTC_Init+0x12c>)
 800035a:	227f      	movs	r2, #127	@ 0x7f
 800035c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800035e:	4b3b      	ldr	r3, [pc, #236]	@ (800044c <MX_RTC_Init+0x12c>)
 8000360:	22ff      	movs	r2, #255	@ 0xff
 8000362:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000364:	4b39      	ldr	r3, [pc, #228]	@ (800044c <MX_RTC_Init+0x12c>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800036a:	4b38      	ldr	r3, [pc, #224]	@ (800044c <MX_RTC_Init+0x12c>)
 800036c:	2200      	movs	r2, #0
 800036e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000370:	4b36      	ldr	r3, [pc, #216]	@ (800044c <MX_RTC_Init+0x12c>)
 8000372:	2200      	movs	r2, #0
 8000374:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000376:	4b35      	ldr	r3, [pc, #212]	@ (800044c <MX_RTC_Init+0x12c>)
 8000378:	0018      	movs	r0, r3
 800037a:	f001 fd29 	bl	8001dd0 <HAL_RTC_Init>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000382:	f000 fa69 	bl	8000858 <Error_Handler>

  /** Initialize RTC and set the Time and Date
   *
   * Initialized clock and date values at the start
  */
  sTime.Hours = 7;
 8000386:	212c      	movs	r1, #44	@ 0x2c
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2207      	movs	r2, #7
 800038c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 59;
 800038e:	187b      	adds	r3, r7, r1
 8000390:	223b      	movs	r2, #59	@ 0x3b
 8000392:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 50;
 8000394:	187b      	adds	r3, r7, r1
 8000396:	2232      	movs	r2, #50	@ 0x32
 8000398:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800039a:	187b      	adds	r3, r7, r1
 800039c:	2200      	movs	r2, #0
 800039e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80003a6:	1879      	adds	r1, r7, r1
 80003a8:	4b28      	ldr	r3, [pc, #160]	@ (800044c <MX_RTC_Init+0x12c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	0018      	movs	r0, r3
 80003ae:	f001 fda7 	bl	8001f00 <HAL_RTC_SetTime>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80003b6:	f000 fa4f 	bl	8000858 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003ba:	2128      	movs	r1, #40	@ 0x28
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2201      	movs	r2, #1
 80003c0:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2201      	movs	r2, #1
 80003c6:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2201      	movs	r2, #1
 80003cc:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2218      	movs	r2, #24
 80003d2:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	4b1d      	ldr	r3, [pc, #116]	@ (800044c <MX_RTC_Init+0x12c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	0018      	movs	r0, r3
 80003dc:	f001 fe94 	bl	8002108 <HAL_RTC_SetDate>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80003e4:	f000 fa38 	bl	8000858 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 8;
 80003e8:	003b      	movs	r3, r7
 80003ea:	2208      	movs	r2, #8
 80003ec:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 00;
 80003ee:	003b      	movs	r3, r7
 80003f0:	2200      	movs	r2, #0
 80003f2:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 00;
 80003f4:	003b      	movs	r3, r7
 80003f6:	2200      	movs	r2, #0
 80003f8:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80003fa:	003b      	movs	r3, r7
 80003fc:	2200      	movs	r2, #0
 80003fe:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000400:	003b      	movs	r3, r7
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000406:	003b      	movs	r3, r7
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800040c:	003b      	movs	r3, r7
 800040e:	2200      	movs	r2, #0
 8000410:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000412:	003b      	movs	r3, r7
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000418:	003b      	movs	r3, r7
 800041a:	2200      	movs	r2, #0
 800041c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800041e:	003b      	movs	r3, r7
 8000420:	2220      	movs	r2, #32
 8000422:	2101      	movs	r1, #1
 8000424:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000426:	003b      	movs	r3, r7
 8000428:	2280      	movs	r2, #128	@ 0x80
 800042a:	0052      	lsls	r2, r2, #1
 800042c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800042e:	0039      	movs	r1, r7
 8000430:	4b06      	ldr	r3, [pc, #24]	@ (800044c <MX_RTC_Init+0x12c>)
 8000432:	2200      	movs	r2, #0
 8000434:	0018      	movs	r0, r3
 8000436:	f001 ff47 	bl	80022c8 <HAL_RTC_SetAlarm_IT>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_RTC_Init+0x122>
  {
    Error_Handler();
 800043e:	f000 fa0b 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b010      	add	sp, #64	@ 0x40
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	20000078 	.word	0x20000078
 8000450:	40002800 	.word	0x40002800

08000454 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08e      	sub	sp, #56	@ 0x38
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800045a:	2328      	movs	r3, #40	@ 0x28
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	0018      	movs	r0, r3
 8000460:	2310      	movs	r3, #16
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f003 fe8b 	bl	8004180 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800046a:	2320      	movs	r3, #32
 800046c:	18fb      	adds	r3, r7, r3
 800046e:	0018      	movs	r0, r3
 8000470:	2308      	movs	r3, #8
 8000472:	001a      	movs	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	f003 fe83 	bl	8004180 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	0018      	movs	r0, r3
 800047e:	231c      	movs	r3, #28
 8000480:	001a      	movs	r2, r3
 8000482:	2100      	movs	r1, #0
 8000484:	f003 fe7c 	bl	8004180 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000488:	4b30      	ldr	r3, [pc, #192]	@ (800054c <MX_TIM2_Init+0xf8>)
 800048a:	2280      	movs	r2, #128	@ 0x80
 800048c:	05d2      	lsls	r2, r2, #23
 800048e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000490:	4b2e      	ldr	r3, [pc, #184]	@ (800054c <MX_TIM2_Init+0xf8>)
 8000492:	2201      	movs	r2, #1
 8000494:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000496:	4b2d      	ldr	r3, [pc, #180]	@ (800054c <MX_TIM2_Init+0xf8>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800049c:	4b2b      	ldr	r3, [pc, #172]	@ (800054c <MX_TIM2_Init+0xf8>)
 800049e:	2201      	movs	r2, #1
 80004a0:	4252      	negs	r2, r2
 80004a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a4:	4b29      	ldr	r3, [pc, #164]	@ (800054c <MX_TIM2_Init+0xf8>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004aa:	4b28      	ldr	r3, [pc, #160]	@ (800054c <MX_TIM2_Init+0xf8>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004b0:	4b26      	ldr	r3, [pc, #152]	@ (800054c <MX_TIM2_Init+0xf8>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f002 f906 	bl	80026c4 <HAL_TIM_Base_Init>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80004bc:	f000 f9cc 	bl	8000858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004c0:	2128      	movs	r1, #40	@ 0x28
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	2280      	movs	r2, #128	@ 0x80
 80004c6:	0152      	lsls	r2, r2, #5
 80004c8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004ca:	187a      	adds	r2, r7, r1
 80004cc:	4b1f      	ldr	r3, [pc, #124]	@ (800054c <MX_TIM2_Init+0xf8>)
 80004ce:	0011      	movs	r1, r2
 80004d0:	0018      	movs	r0, r3
 80004d2:	f002 fca9 	bl	8002e28 <HAL_TIM_ConfigClockSource>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80004da:	f000 f9bd 	bl	8000858 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80004de:	4b1b      	ldr	r3, [pc, #108]	@ (800054c <MX_TIM2_Init+0xf8>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f002 f93f 	bl	8002764 <HAL_TIM_OC_Init>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80004ea:	f000 f9b5 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ee:	2120      	movs	r1, #32
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004fc:	187a      	adds	r2, r7, r1
 80004fe:	4b13      	ldr	r3, [pc, #76]	@ (800054c <MX_TIM2_Init+0xf8>)
 8000500:	0011      	movs	r1, r2
 8000502:	0018      	movs	r0, r3
 8000504:	f003 f900 	bl	8003708 <HAL_TIMEx_MasterConfigSynchronization>
 8000508:	1e03      	subs	r3, r0, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800050c:	f000 f9a4 	bl	8000858 <Error_Handler>
  }
  /*
   * Initiliaze for 500HZ signal
   */
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2230      	movs	r2, #48	@ 0x30
 8000514:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 24000;
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	4a0d      	ldr	r2, [pc, #52]	@ (8000550 <MX_TIM2_Init+0xfc>)
 800051a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000528:	1d39      	adds	r1, r7, #4
 800052a:	4b08      	ldr	r3, [pc, #32]	@ (800054c <MX_TIM2_Init+0xf8>)
 800052c:	2200      	movs	r2, #0
 800052e:	0018      	movs	r0, r3
 8000530:	f002 fc22 	bl	8002d78 <HAL_TIM_OC_ConfigChannel>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d001      	beq.n	800053c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000538:	f000 f98e 	bl	8000858 <Error_Handler>
  }

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800053c:	4b03      	ldr	r3, [pc, #12]	@ (800054c <MX_TIM2_Init+0xf8>)
 800053e:	0018      	movs	r0, r3
 8000540:	f000 fa1c 	bl	800097c <HAL_TIM_MspPostInit>

}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b00e      	add	sp, #56	@ 0x38
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000098 	.word	0x20000098
 8000550:	00005dc0 	.word	0x00005dc0

08000554 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000558:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 800055a:	4a15      	ldr	r2, [pc, #84]	@ (80005b0 <MX_USART2_UART_Init+0x5c>)
 800055c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800055e:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 8000560:	2296      	movs	r2, #150	@ 0x96
 8000562:	0212      	lsls	r2, r2, #8
 8000564:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000566:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800056c:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000572:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 800057a:	220c      	movs	r2, #12
 800057c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057e:	4b0b      	ldr	r3, [pc, #44]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 8000580:	2200      	movs	r2, #0
 8000582:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000584:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 8000586:	2200      	movs	r2, #0
 8000588:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800058a:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 800058c:	2200      	movs	r2, #0
 800058e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 8000592:	2200      	movs	r2, #0
 8000594:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000596:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 8000598:	0018      	movs	r0, r3
 800059a:	f003 f923 	bl	80037e4 <HAL_UART_Init>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005a2:	f000 f959 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200000e0 	.word	0x200000e0
 80005b0:	40004400 	.word	0x40004400

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b089      	sub	sp, #36	@ 0x24
 80005b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	240c      	movs	r4, #12
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	0018      	movs	r0, r3
 80005c0:	2314      	movs	r3, #20
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f003 fddb 	bl	8004180 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b31      	ldr	r3, [pc, #196]	@ (8000690 <MX_GPIO_Init+0xdc>)
 80005cc:	695a      	ldr	r2, [r3, #20]
 80005ce:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <MX_GPIO_Init+0xdc>)
 80005d0:	2180      	movs	r1, #128	@ 0x80
 80005d2:	0309      	lsls	r1, r1, #12
 80005d4:	430a      	orrs	r2, r1
 80005d6:	615a      	str	r2, [r3, #20]
 80005d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000690 <MX_GPIO_Init+0xdc>)
 80005da:	695a      	ldr	r2, [r3, #20]
 80005dc:	2380      	movs	r3, #128	@ 0x80
 80005de:	031b      	lsls	r3, r3, #12
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000690 <MX_GPIO_Init+0xdc>)
 80005e8:	695a      	ldr	r2, [r3, #20]
 80005ea:	4b29      	ldr	r3, [pc, #164]	@ (8000690 <MX_GPIO_Init+0xdc>)
 80005ec:	2180      	movs	r1, #128	@ 0x80
 80005ee:	03c9      	lsls	r1, r1, #15
 80005f0:	430a      	orrs	r2, r1
 80005f2:	615a      	str	r2, [r3, #20]
 80005f4:	4b26      	ldr	r3, [pc, #152]	@ (8000690 <MX_GPIO_Init+0xdc>)
 80005f6:	695a      	ldr	r2, [r3, #20]
 80005f8:	2380      	movs	r3, #128	@ 0x80
 80005fa:	03db      	lsls	r3, r3, #15
 80005fc:	4013      	ands	r3, r2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <MX_GPIO_Init+0xdc>)
 8000604:	695a      	ldr	r2, [r3, #20]
 8000606:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <MX_GPIO_Init+0xdc>)
 8000608:	2180      	movs	r1, #128	@ 0x80
 800060a:	0289      	lsls	r1, r1, #10
 800060c:	430a      	orrs	r2, r1
 800060e:	615a      	str	r2, [r3, #20]
 8000610:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <MX_GPIO_Init+0xdc>)
 8000612:	695a      	ldr	r2, [r3, #20]
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	029b      	lsls	r3, r3, #10
 8000618:	4013      	ands	r3, r2
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800061e:	2390      	movs	r3, #144	@ 0x90
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	2200      	movs	r2, #0
 8000624:	2120      	movs	r1, #32
 8000626:	0018      	movs	r0, r3
 8000628:	f000 fd8e 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800062c:	193b      	adds	r3, r7, r4
 800062e:	2280      	movs	r2, #128	@ 0x80
 8000630:	0192      	lsls	r2, r2, #6
 8000632:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000634:	193b      	adds	r3, r7, r4
 8000636:	2284      	movs	r2, #132	@ 0x84
 8000638:	0392      	lsls	r2, r2, #14
 800063a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000642:	193b      	adds	r3, r7, r4
 8000644:	4a13      	ldr	r2, [pc, #76]	@ (8000694 <MX_GPIO_Init+0xe0>)
 8000646:	0019      	movs	r1, r3
 8000648:	0010      	movs	r0, r2
 800064a:	f000 fc05 	bl	8000e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800064e:	0021      	movs	r1, r4
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2220      	movs	r2, #32
 8000654:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2201      	movs	r2, #1
 800065a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000668:	187a      	adds	r2, r7, r1
 800066a:	2390      	movs	r3, #144	@ 0x90
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	0011      	movs	r1, r2
 8000670:	0018      	movs	r0, r3
 8000672:	f000 fbf1 	bl	8000e58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /*
   * Set NVIC for B1 Interrupt!!!
   */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	2007      	movs	r0, #7
 800067c:	f000 fbba 	bl	8000df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000680:	2007      	movs	r0, #7
 8000682:	f000 fbcc 	bl	8000e1e <HAL_NVIC_EnableIRQ>


/* USER CODE END MX_GPIO_Init_2 */
}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b009      	add	sp, #36	@ 0x24
 800068c:	bd90      	pop	{r4, r7, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	40021000 	.word	0x40021000
 8000694:	48000800 	.word	0x48000800

08000698 <printmsg>:

/*
 * To print data use this function
 */
void printmsg(char *format,...)
{
 8000698:	b40f      	push	{r0, r1, r2, r3}
 800069a:	b590      	push	{r4, r7, lr}
 800069c:	b097      	sub	sp, #92	@ 0x5c
 800069e:	af00      	add	r7, sp, #0
char str[80];

va_list args;            //Extract the argument list using VA API's
va_start(args, format);
 80006a0:	2364      	movs	r3, #100	@ 0x64
 80006a2:	2208      	movs	r2, #8
 80006a4:	189b      	adds	r3, r3, r2
 80006a6:	19db      	adds	r3, r3, r7
 80006a8:	607b      	str	r3, [r7, #4]
vsprintf(str, format, args);
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80006ae:	2408      	movs	r4, #8
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	0018      	movs	r0, r3
 80006b4:	f003 fd58 	bl	8004168 <vsiprintf>
HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff fd24 	bl	8000108 <strlen>
 80006c0:	0003      	movs	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	2301      	movs	r3, #1
 80006c6:	425b      	negs	r3, r3
 80006c8:	1939      	adds	r1, r7, r4
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <printmsg+0x48>)
 80006cc:	f003 f8de 	bl	800388c <HAL_UART_Transmit>
va_end(args);
}
 80006d0:	46c0      	nop			@ (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b017      	add	sp, #92	@ 0x5c
 80006d6:	bc90      	pop	{r4, r7}
 80006d8:	bc08      	pop	{r3}
 80006da:	b004      	add	sp, #16
 80006dc:	4718      	bx	r3
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	200000e0 	.word	0x200000e0

080006e4 <getDayofweek>:
/*
 * Turn integer day values to words
 */
char* getDayofweek(uint8_t number)
{
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b08a      	sub	sp, #40	@ 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	0002      	movs	r2, r0
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	701a      	strb	r2, [r3, #0]
	char *weekday[] = { "Monday", "TuesDay", "Wednesday","Thursday","Friday","Saturday","Sunday"};
 80006f0:	250c      	movs	r5, #12
 80006f2:	197b      	adds	r3, r7, r5
 80006f4:	4a08      	ldr	r2, [pc, #32]	@ (8000718 <getDayofweek+0x34>)
 80006f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006f8:	c313      	stmia	r3!, {r0, r1, r4}
 80006fa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006fc:	c313      	stmia	r3!, {r0, r1, r4}
 80006fe:	6812      	ldr	r2, [r2, #0]
 8000700:	601a      	str	r2, [r3, #0]

		return weekday[number-1];
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	1e5a      	subs	r2, r3, #1
 8000708:	197b      	adds	r3, r7, r5
 800070a:	0092      	lsls	r2, r2, #2
 800070c:	58d3      	ldr	r3, [r2, r3]
}
 800070e:	0018      	movs	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	b00a      	add	sp, #40	@ 0x28
 8000714:	bdb0      	pop	{r4, r5, r7, pc}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	08004ad8 	.word	0x08004ad8

0800071c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
/*
 * When the button is pressed stop compare therefore the buzzer and reset the LD2
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	0002      	movs	r2, r0
 8000724:	1dbb      	adds	r3, r7, #6
 8000726:	801a      	strh	r2, [r3, #0]

	if(HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1)  != HAL_OK)
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <HAL_GPIO_EXTI_Callback+0x34>)
 800072a:	2100      	movs	r1, #0
 800072c:	0018      	movs	r0, r3
 800072e:	f002 f971 	bl	8002a14 <HAL_TIM_OC_Stop_IT>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		Error_Handler();
 8000736:	f000 f88f 	bl	8000858 <Error_Handler>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800073a:	2390      	movs	r3, #144	@ 0x90
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	0018      	movs	r0, r3
 8000744:	f000 fd00 	bl	8001148 <HAL_GPIO_WritePin>

}
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b002      	add	sp, #8
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000098 	.word	0x20000098

08000754 <HAL_TIM_OC_DelayElapsedCallback>:
/*
 * Form a constant 500HZ freq signal to PA0 port
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	7f1b      	ldrb	r3, [r3, #28]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d115      	bne.n	8000790 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
	{
	   CCR_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2100      	movs	r1, #0
 8000768:	0018      	movs	r0, r3
 800076a:	f002 fc31 	bl	8002fd0 <HAL_TIM_ReadCapturedValue>
 800076e:	0002      	movs	r2, r0
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8000772:	601a      	str	r2, [r3, #0]
	   __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, CCR_content + 24000);
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4907      	ldr	r1, [pc, #28]	@ (800079c <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 800077e:	468c      	mov	ip, r1
 8000780:	4462      	add	r2, ip
 8000782:	635a      	str	r2, [r3, #52]	@ 0x34
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000784:	2390      	movs	r3, #144	@ 0x90
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	2101      	movs	r1, #1
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fcf9 	bl	8001182 <HAL_GPIO_TogglePin>
	}

}
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b002      	add	sp, #8
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000180 	.word	0x20000180
 800079c:	00005dc0 	.word	0x00005dc0

080007a0 <HAL_RTC_AlarmAEventCallback>:

/*
 * With the RTC event Print date and time on UART and start Buzzer signal
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80007a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	6078      	str	r0, [r7, #4]
	printmsg("Alarm Triggered \r\n");
 80007a8:	4b24      	ldr	r3, [pc, #144]	@ (800083c <HAL_RTC_AlarmAEventCallback+0x9c>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f7ff ff74 	bl	8000698 <printmsg>

	HAL_RTC_GetTime(hrtc, &RTC_TimeRead, RTC_FORMAT_BIN);
 80007b0:	4923      	ldr	r1, [pc, #140]	@ (8000840 <HAL_RTC_AlarmAEventCallback+0xa0>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 fc48 	bl	800204c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &RTC_DateRead, RTC_FORMAT_BIN); //Tou should write GetDate after time for not to encouter problems
 80007bc:	4921      	ldr	r1, [pc, #132]	@ (8000844 <HAL_RTC_AlarmAEventCallback+0xa4>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2200      	movs	r2, #0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 fd30 	bl	8002228 <HAL_RTC_GetDate>

	printmsg("Getting RTC time\n");
 80007c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000848 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f7ff ff64 	bl	8000698 <printmsg>

	printmsg("Current Time is : %02d:%02d:%02d\r\n", RTC_TimeRead.Hours,
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <HAL_RTC_AlarmAEventCallback+0xa0>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	0019      	movs	r1, r3
			RTC_TimeRead.Minutes, RTC_TimeRead.Seconds);
 80007d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000840 <HAL_RTC_AlarmAEventCallback+0xa0>)
 80007d8:	785b      	ldrb	r3, [r3, #1]
	printmsg("Current Time is : %02d:%02d:%02d\r\n", RTC_TimeRead.Hours,
 80007da:	001a      	movs	r2, r3
			RTC_TimeRead.Minutes, RTC_TimeRead.Seconds);
 80007dc:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <HAL_RTC_AlarmAEventCallback+0xa0>)
 80007de:	789b      	ldrb	r3, [r3, #2]
	printmsg("Current Time is : %02d:%02d:%02d\r\n", RTC_TimeRead.Hours,
 80007e0:	481a      	ldr	r0, [pc, #104]	@ (800084c <HAL_RTC_AlarmAEventCallback+0xac>)
 80007e2:	f7ff ff59 	bl	8000698 <printmsg>
	printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n", RTC_DateRead.Month,
 80007e6:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <HAL_RTC_AlarmAEventCallback+0xa4>)
 80007e8:	785b      	ldrb	r3, [r3, #1]
 80007ea:	001c      	movs	r4, r3
			RTC_DateRead.Date, RTC_DateRead.Year,
 80007ec:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <HAL_RTC_AlarmAEventCallback+0xa4>)
 80007ee:	789b      	ldrb	r3, [r3, #2]
	printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n", RTC_DateRead.Month,
 80007f0:	001d      	movs	r5, r3
			RTC_DateRead.Date, RTC_DateRead.Year,
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <HAL_RTC_AlarmAEventCallback+0xa4>)
 80007f4:	78db      	ldrb	r3, [r3, #3]
	printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n", RTC_DateRead.Month,
 80007f6:	001e      	movs	r6, r3
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <HAL_RTC_AlarmAEventCallback+0xa4>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	0018      	movs	r0, r3
 80007fe:	f7ff ff71 	bl	80006e4 <getDayofweek>
 8000802:	0003      	movs	r3, r0
 8000804:	4812      	ldr	r0, [pc, #72]	@ (8000850 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	0033      	movs	r3, r6
 800080a:	002a      	movs	r2, r5
 800080c:	0021      	movs	r1, r4
 800080e:	f7ff ff43 	bl	8000698 <printmsg>
			getDayofweek(RTC_DateRead.WeekDay));


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000812:	2390      	movs	r3, #144	@ 0x90
 8000814:	05db      	lsls	r3, r3, #23
 8000816:	2201      	movs	r2, #1
 8000818:	2120      	movs	r1, #32
 800081a:	0018      	movs	r0, r3
 800081c:	f000 fc94 	bl	8001148 <HAL_GPIO_WritePin>

	if(HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1)  != HAL_OK)
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8000822:	2100      	movs	r1, #0
 8000824:	0018      	movs	r0, r3
 8000826:	f001 fff5 	bl	8002814 <HAL_TIM_OC_Start_IT>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <HAL_RTC_AlarmAEventCallback+0x92>
	{
		Error_Handler();
 800082e:	f000 f813 	bl	8000858 <Error_Handler>
	}
}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b003      	add	sp, #12
 8000838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	08004af4 	.word	0x08004af4
 8000840:	20000168 	.word	0x20000168
 8000844:	2000017c 	.word	0x2000017c
 8000848:	08004b08 	.word	0x08004b08
 800084c:	08004b1c 	.word	0x08004b1c
 8000850:	08004b40 	.word	0x08004b40
 8000854:	20000098 	.word	0x20000098

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	46c0      	nop			@ (mov r8, r8)
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <HAL_MspInit+0x44>)
 800086c:	699a      	ldr	r2, [r3, #24]
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <HAL_MspInit+0x44>)
 8000870:	2101      	movs	r1, #1
 8000872:	430a      	orrs	r2, r1
 8000874:	619a      	str	r2, [r3, #24]
 8000876:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <HAL_MspInit+0x44>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	2201      	movs	r2, #1
 800087c:	4013      	ands	r3, r2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <HAL_MspInit+0x44>)
 8000884:	69da      	ldr	r2, [r3, #28]
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <HAL_MspInit+0x44>)
 8000888:	2180      	movs	r1, #128	@ 0x80
 800088a:	0549      	lsls	r1, r1, #21
 800088c:	430a      	orrs	r2, r1
 800088e:	61da      	str	r2, [r3, #28]
 8000890:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <HAL_MspInit+0x44>)
 8000892:	69da      	ldr	r2, [r3, #28]
 8000894:	2380      	movs	r3, #128	@ 0x80
 8000896:	055b      	lsls	r3, r3, #21
 8000898:	4013      	ands	r3, r2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b096      	sub	sp, #88	@ 0x58
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a1c      	ldr	r2, [pc, #112]	@ (800092c <HAL_RTC_MspInit+0x80>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d131      	bne.n	8000922 <HAL_RTC_MspInit+0x76>
	  RCC_PeriphCLKInitTypeDef PeriphClkInit ;

	 /*
	  * LSE Clock doesn't go off even the processor is in standby so use LSE on RTC to KEEP working
	  *  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80008be:	2108      	movs	r1, #8
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2204      	movs	r2, #4
 80008c4:	601a      	str	r2, [r3, #0]
	  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2201      	movs	r2, #1
 80008ca:	609a      	str	r2, [r3, #8]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	@ 0x24
	  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	0018      	movs	r0, r3
 80008d6:	f000 fc8b 	bl	80011f0 <HAL_RCC_OscConfig>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_RTC_MspInit+0x36>
	  {
		  Error_Handler();
 80008de:	f7ff ffbb 	bl	8000858 <Error_Handler>
	  }

	  //2. select LSE as RTCCLK
	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008e2:	213c      	movs	r1, #60	@ 0x3c
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2280      	movs	r2, #128	@ 0x80
 80008e8:	0252      	lsls	r2, r2, #9
 80008ea:	601a      	str	r2, [r3, #0]
	  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2280      	movs	r2, #128	@ 0x80
 80008f0:	0052      	lsls	r2, r2, #1
 80008f2:	605a      	str	r2, [r3, #4]
	  if( HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit)!= HAL_OK)
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 f96c 	bl	8001bd4 <HAL_RCCEx_PeriphCLKConfig>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <HAL_RTC_MspInit+0x58>
	  {
		  Error_Handler();
 8000900:	f7ff ffaa 	bl	8000858 <Error_Handler>
	  }
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000904:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <HAL_RTC_MspInit+0x84>)
 8000906:	6a1a      	ldr	r2, [r3, #32]
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <HAL_RTC_MspInit+0x84>)
 800090a:	2180      	movs	r1, #128	@ 0x80
 800090c:	0209      	lsls	r1, r1, #8
 800090e:	430a      	orrs	r2, r1
 8000910:	621a      	str	r2, [r3, #32]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2101      	movs	r1, #1
 8000916:	2002      	movs	r0, #2
 8000918:	f000 fa6c 	bl	8000df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800091c:	2002      	movs	r0, #2
 800091e:	f000 fa7e 	bl	8000e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b016      	add	sp, #88	@ 0x58
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	40002800 	.word	0x40002800
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	2380      	movs	r3, #128	@ 0x80
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	429a      	cmp	r2, r3
 8000946:	d113      	bne.n	8000970 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000948:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <HAL_TIM_Base_MspInit+0x44>)
 800094a:	69da      	ldr	r2, [r3, #28]
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <HAL_TIM_Base_MspInit+0x44>)
 800094e:	2101      	movs	r1, #1
 8000950:	430a      	orrs	r2, r1
 8000952:	61da      	str	r2, [r3, #28]
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <HAL_TIM_Base_MspInit+0x44>)
 8000956:	69db      	ldr	r3, [r3, #28]
 8000958:	2201      	movs	r2, #1
 800095a:	4013      	ands	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2101      	movs	r1, #1
 8000964:	200f      	movs	r0, #15
 8000966:	f000 fa45 	bl	8000df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800096a:	200f      	movs	r0, #15
 800096c:	f000 fa57 	bl	8000e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000970:	46c0      	nop			@ (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b004      	add	sp, #16
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b089      	sub	sp, #36	@ 0x24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	240c      	movs	r4, #12
 8000986:	193b      	adds	r3, r7, r4
 8000988:	0018      	movs	r0, r3
 800098a:	2314      	movs	r3, #20
 800098c:	001a      	movs	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	f003 fbf6 	bl	8004180 <memset>
  if(htim->Instance==TIM2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	2380      	movs	r3, #128	@ 0x80
 800099a:	05db      	lsls	r3, r3, #23
 800099c:	429a      	cmp	r2, r3
 800099e:	d124      	bne.n	80009ea <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <HAL_TIM_MspPostInit+0x78>)
 80009a2:	695a      	ldr	r2, [r3, #20]
 80009a4:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <HAL_TIM_MspPostInit+0x78>)
 80009a6:	2180      	movs	r1, #128	@ 0x80
 80009a8:	0289      	lsls	r1, r1, #10
 80009aa:	430a      	orrs	r2, r1
 80009ac:	615a      	str	r2, [r3, #20]
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <HAL_TIM_MspPostInit+0x78>)
 80009b0:	695a      	ldr	r2, [r3, #20]
 80009b2:	2380      	movs	r3, #128	@ 0x80
 80009b4:	029b      	lsls	r3, r3, #10
 80009b6:	4013      	ands	r3, r2
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1 buzzer pinout A0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009bc:	0021      	movs	r1, r4
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2202      	movs	r2, #2
 80009c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2202      	movs	r2, #2
 80009da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	187a      	adds	r2, r7, r1
 80009de:	2390      	movs	r3, #144	@ 0x90
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fa37 	bl	8000e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b009      	add	sp, #36	@ 0x24
 80009f0:	bd90      	pop	{r4, r7, pc}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b08b      	sub	sp, #44	@ 0x2c
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	2414      	movs	r4, #20
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	0018      	movs	r0, r3
 8000a06:	2314      	movs	r3, #20
 8000a08:	001a      	movs	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f003 fbb8 	bl	8004180 <memset>
  if(huart->Instance==USART2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1c      	ldr	r2, [pc, #112]	@ (8000a88 <HAL_UART_MspInit+0x90>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d132      	bne.n	8000a80 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <HAL_UART_MspInit+0x94>)
 8000a1c:	69da      	ldr	r2, [r3, #28]
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a8c <HAL_UART_MspInit+0x94>)
 8000a20:	2180      	movs	r1, #128	@ 0x80
 8000a22:	0289      	lsls	r1, r1, #10
 8000a24:	430a      	orrs	r2, r1
 8000a26:	61da      	str	r2, [r3, #28]
 8000a28:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <HAL_UART_MspInit+0x94>)
 8000a2a:	69da      	ldr	r2, [r3, #28]
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	029b      	lsls	r3, r3, #10
 8000a30:	4013      	ands	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <HAL_UART_MspInit+0x94>)
 8000a38:	695a      	ldr	r2, [r3, #20]
 8000a3a:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <HAL_UART_MspInit+0x94>)
 8000a3c:	2180      	movs	r1, #128	@ 0x80
 8000a3e:	0289      	lsls	r1, r1, #10
 8000a40:	430a      	orrs	r2, r1
 8000a42:	615a      	str	r2, [r3, #20]
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <HAL_UART_MspInit+0x94>)
 8000a46:	695a      	ldr	r2, [r3, #20]
 8000a48:	2380      	movs	r3, #128	@ 0x80
 8000a4a:	029b      	lsls	r3, r3, #10
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a52:	0021      	movs	r1, r4
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	220c      	movs	r2, #12
 8000a58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2201      	movs	r2, #1
 8000a70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	187a      	adds	r2, r7, r1
 8000a74:	2390      	movs	r3, #144	@ 0x90
 8000a76:	05db      	lsls	r3, r3, #23
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 f9ec 	bl	8000e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b00b      	add	sp, #44	@ 0x2c
 8000a86:	bd90      	pop	{r4, r7, pc}
 8000a88:	40004400 	.word	0x40004400
 8000a8c:	40021000 	.word	0x40021000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	46c0      	nop			@ (mov r8, r8)
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 f8d4 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <RTC_IRQHandler>:
/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20.
  */

void RTC_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000ac8:	4b03      	ldr	r3, [pc, #12]	@ (8000ad8 <RTC_IRQHandler+0x14>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 fcf6 	bl	80024bc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	20000078 	.word	0x20000078

08000adc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ae0:	4b03      	ldr	r3, [pc, #12]	@ (8000af0 <TIM2_IRQHandler+0x14>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f002 f85a 	bl	8002b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	20000098 	.word	0x20000098

08000af4 <EXTI4_15_IRQHandler>:

/*
 * Use EXTI4_15_IRQHandler for PC13 B1PIN and hal handler function for specific pin
 *  */
void EXTI4_15_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	019b      	lsls	r3, r3, #6
 8000afc:	0018      	movs	r0, r3
 8000afe:	f000 fb5b 	bl	80011b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	@ (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	@ (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	18d3      	adds	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b38:	f003 fb2a 	bl	8004190 <__errno>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b42:	2301      	movs	r3, #1
 8000b44:	425b      	negs	r3, r3
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	18d2      	adds	r2, r2, r3
 8000b56:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <_sbrk+0x64>)
 8000b58:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b006      	add	sp, #24
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20004000 	.word	0x20004000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	20000184 	.word	0x20000184
 8000b70:	200002d8 	.word	0x200002d8

08000b74 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
    ldr   r0, =_estack
 8000b80:	480d      	ldr	r0, [pc, #52]	@ (8000bb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b82:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b84:	f7ff fff6 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	@ (8000bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <LoopForever+0xe>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bcc <LoopForever+0x16>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bae:	f003 faf5 	bl	800419c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb2:	f7ff fb47 	bl	8000244 <main>

08000bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
    ldr   r0, =_estack
 8000bb8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bc4:	08004bdc 	.word	0x08004bdc
  ldr r2, =_sbss
 8000bc8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bcc:	200002d4 	.word	0x200002d4

08000bd0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_COMP_IRQHandler>
	...

08000bd4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <HAL_Init+0x24>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_Init+0x24>)
 8000bde:	2110      	movs	r1, #16
 8000be0:	430a      	orrs	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 f809 	bl	8000bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bea:	f7ff fe3b 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	40022000 	.word	0x40022000

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <HAL_InitTick+0x5c>)
 8000c06:	681c      	ldr	r4, [r3, #0]
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <HAL_InitTick+0x60>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	23fa      	movs	r3, #250	@ 0xfa
 8000c10:	0098      	lsls	r0, r3, #2
 8000c12:	f7ff fa8b 	bl	800012c <__udivsi3>
 8000c16:	0003      	movs	r3, r0
 8000c18:	0019      	movs	r1, r3
 8000c1a:	0020      	movs	r0, r4
 8000c1c:	f7ff fa86 	bl	800012c <__udivsi3>
 8000c20:	0003      	movs	r3, r0
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 f90b 	bl	8000e3e <HAL_SYSTICK_Config>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e00f      	b.n	8000c50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d80b      	bhi.n	8000c4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	425b      	negs	r3, r3
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 f8d8 	bl	8000df4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_InitTick+0x64>)
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b003      	add	sp, #12
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <HAL_IncTick+0x1c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <HAL_IncTick+0x20>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	18d2      	adds	r2, r2, r3
 8000c74:	4b03      	ldr	r3, [pc, #12]	@ (8000c84 <HAL_IncTick+0x20>)
 8000c76:	601a      	str	r2, [r3, #0]
}
 8000c78:	46c0      	nop			@ (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000188 	.word	0x20000188

08000c88 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b02      	ldr	r3, [pc, #8]	@ (8000c98 <HAL_GetTick+0x10>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	20000188 	.word	0x20000188

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	0002      	movs	r2, r0
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cae:	d809      	bhi.n	8000cc4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	231f      	movs	r3, #31
 8000cb8:	401a      	ands	r2, r3
 8000cba:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <__NVIC_EnableIRQ+0x30>)
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	4091      	lsls	r1, r2
 8000cc0:	000a      	movs	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]
  }
}
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ce4:	d828      	bhi.n	8000d38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8000da4 <__NVIC_SetPriority+0xd4>)
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b25b      	sxtb	r3, r3
 8000cee:	089b      	lsrs	r3, r3, #2
 8000cf0:	33c0      	adds	r3, #192	@ 0xc0
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	589b      	ldr	r3, [r3, r2]
 8000cf6:	1dfa      	adds	r2, r7, #7
 8000cf8:	7812      	ldrb	r2, [r2, #0]
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	400a      	ands	r2, r1
 8000d00:	00d2      	lsls	r2, r2, #3
 8000d02:	21ff      	movs	r1, #255	@ 0xff
 8000d04:	4091      	lsls	r1, r2
 8000d06:	000a      	movs	r2, r1
 8000d08:	43d2      	mvns	r2, r2
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	019b      	lsls	r3, r3, #6
 8000d12:	22ff      	movs	r2, #255	@ 0xff
 8000d14:	401a      	ands	r2, r3
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	4003      	ands	r3, r0
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d24:	481f      	ldr	r0, [pc, #124]	@ (8000da4 <__NVIC_SetPriority+0xd4>)
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	b25b      	sxtb	r3, r3
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	33c0      	adds	r3, #192	@ 0xc0
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d36:	e031      	b.n	8000d9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d38:	4a1b      	ldr	r2, [pc, #108]	@ (8000da8 <__NVIC_SetPriority+0xd8>)
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	0019      	movs	r1, r3
 8000d40:	230f      	movs	r3, #15
 8000d42:	400b      	ands	r3, r1
 8000d44:	3b08      	subs	r3, #8
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	3306      	adds	r3, #6
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	18d3      	adds	r3, r2, r3
 8000d4e:	3304      	adds	r3, #4
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	1dfa      	adds	r2, r7, #7
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	0011      	movs	r1, r2
 8000d58:	2203      	movs	r2, #3
 8000d5a:	400a      	ands	r2, r1
 8000d5c:	00d2      	lsls	r2, r2, #3
 8000d5e:	21ff      	movs	r1, #255	@ 0xff
 8000d60:	4091      	lsls	r1, r2
 8000d62:	000a      	movs	r2, r1
 8000d64:	43d2      	mvns	r2, r2
 8000d66:	401a      	ands	r2, r3
 8000d68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	019b      	lsls	r3, r3, #6
 8000d6e:	22ff      	movs	r2, #255	@ 0xff
 8000d70:	401a      	ands	r2, r3
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	0018      	movs	r0, r3
 8000d78:	2303      	movs	r3, #3
 8000d7a:	4003      	ands	r3, r0
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d80:	4809      	ldr	r0, [pc, #36]	@ (8000da8 <__NVIC_SetPriority+0xd8>)
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	001c      	movs	r4, r3
 8000d88:	230f      	movs	r3, #15
 8000d8a:	4023      	ands	r3, r4
 8000d8c:	3b08      	subs	r3, #8
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	430a      	orrs	r2, r1
 8000d92:	3306      	adds	r3, #6
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	18c3      	adds	r3, r0, r3
 8000d98:	3304      	adds	r3, #4
 8000d9a:	601a      	str	r2, [r3, #0]
}
 8000d9c:	46c0      	nop			@ (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b003      	add	sp, #12
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	2380      	movs	r3, #128	@ 0x80
 8000dba:	045b      	lsls	r3, r3, #17
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d301      	bcc.n	8000dc4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e010      	b.n	8000de6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <SysTick_Config+0x44>)
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	3a01      	subs	r2, #1
 8000dca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dcc:	2301      	movs	r3, #1
 8000dce:	425b      	negs	r3, r3
 8000dd0:	2103      	movs	r1, #3
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f7ff ff7c 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <SysTick_Config+0x44>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	@ (8000df0 <SysTick_Config+0x44>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	0018      	movs	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	210f      	movs	r1, #15
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	1c02      	adds	r2, r0, #0
 8000e04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	0011      	movs	r1, r2
 8000e10:	0018      	movs	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b004      	add	sp, #16
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	0002      	movs	r2, r0
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff ff33 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff ffaf 	bl	8000dac <SysTick_Config>
 8000e4e:	0003      	movs	r3, r0
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b002      	add	sp, #8
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e66:	e155      	b.n	8001114 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	4091      	lsls	r1, r2
 8000e72:	000a      	movs	r2, r1
 8000e74:	4013      	ands	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d100      	bne.n	8000e80 <HAL_GPIO_Init+0x28>
 8000e7e:	e146      	b.n	800110e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2203      	movs	r2, #3
 8000e86:	4013      	ands	r3, r2
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d005      	beq.n	8000e98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2203      	movs	r2, #3
 8000e92:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d130      	bne.n	8000efa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	409a      	lsls	r2, r3
 8000ea6:	0013      	movs	r3, r2
 8000ea8:	43da      	mvns	r2, r3
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	409a      	lsls	r2, r3
 8000eba:	0013      	movs	r3, r2
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	091b      	lsrs	r3, r3, #4
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2203      	movs	r2, #3
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d017      	beq.n	8000f36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	43da      	mvns	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	409a      	lsls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d123      	bne.n	8000f8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	08da      	lsrs	r2, r3, #3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3208      	adds	r2, #8
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	58d3      	ldr	r3, [r2, r3]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	2207      	movs	r2, #7
 8000f54:	4013      	ands	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	691a      	ldr	r2, [r3, #16]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2107      	movs	r1, #7
 8000f6e:	400b      	ands	r3, r1
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	409a      	lsls	r2, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	08da      	lsrs	r2, r3, #3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3208      	adds	r2, #8
 8000f84:	0092      	lsls	r2, r2, #2
 8000f86:	6939      	ldr	r1, [r7, #16]
 8000f88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	409a      	lsls	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	401a      	ands	r2, r3
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	0013      	movs	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	23c0      	movs	r3, #192	@ 0xc0
 8000fc4:	029b      	lsls	r3, r3, #10
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d100      	bne.n	8000fcc <HAL_GPIO_Init+0x174>
 8000fca:	e0a0      	b.n	800110e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fcc:	4b57      	ldr	r3, [pc, #348]	@ (800112c <HAL_GPIO_Init+0x2d4>)
 8000fce:	699a      	ldr	r2, [r3, #24]
 8000fd0:	4b56      	ldr	r3, [pc, #344]	@ (800112c <HAL_GPIO_Init+0x2d4>)
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	619a      	str	r2, [r3, #24]
 8000fd8:	4b54      	ldr	r3, [pc, #336]	@ (800112c <HAL_GPIO_Init+0x2d4>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4013      	ands	r3, r2
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe4:	4a52      	ldr	r2, [pc, #328]	@ (8001130 <HAL_GPIO_Init+0x2d8>)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	589b      	ldr	r3, [r3, r2]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	0013      	movs	r3, r2
 8001000:	43da      	mvns	r2, r3
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	2390      	movs	r3, #144	@ 0x90
 800100c:	05db      	lsls	r3, r3, #23
 800100e:	429a      	cmp	r2, r3
 8001010:	d019      	beq.n	8001046 <HAL_GPIO_Init+0x1ee>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a47      	ldr	r2, [pc, #284]	@ (8001134 <HAL_GPIO_Init+0x2dc>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0x1ea>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a46      	ldr	r2, [pc, #280]	@ (8001138 <HAL_GPIO_Init+0x2e0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d00d      	beq.n	800103e <HAL_GPIO_Init+0x1e6>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a45      	ldr	r2, [pc, #276]	@ (800113c <HAL_GPIO_Init+0x2e4>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d007      	beq.n	800103a <HAL_GPIO_Init+0x1e2>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a44      	ldr	r2, [pc, #272]	@ (8001140 <HAL_GPIO_Init+0x2e8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d101      	bne.n	8001036 <HAL_GPIO_Init+0x1de>
 8001032:	2304      	movs	r3, #4
 8001034:	e008      	b.n	8001048 <HAL_GPIO_Init+0x1f0>
 8001036:	2305      	movs	r3, #5
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x1f0>
 800103a:	2303      	movs	r3, #3
 800103c:	e004      	b.n	8001048 <HAL_GPIO_Init+0x1f0>
 800103e:	2302      	movs	r3, #2
 8001040:	e002      	b.n	8001048 <HAL_GPIO_Init+0x1f0>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x1f0>
 8001046:	2300      	movs	r3, #0
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	2103      	movs	r1, #3
 800104c:	400a      	ands	r2, r1
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	4093      	lsls	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001058:	4935      	ldr	r1, [pc, #212]	@ (8001130 <HAL_GPIO_Init+0x2d8>)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001066:	4b37      	ldr	r3, [pc, #220]	@ (8001144 <HAL_GPIO_Init+0x2ec>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43da      	mvns	r2, r3
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	2380      	movs	r3, #128	@ 0x80
 800107c:	035b      	lsls	r3, r3, #13
 800107e:	4013      	ands	r3, r2
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800108a:	4b2e      	ldr	r3, [pc, #184]	@ (8001144 <HAL_GPIO_Init+0x2ec>)
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001090:	4b2c      	ldr	r3, [pc, #176]	@ (8001144 <HAL_GPIO_Init+0x2ec>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43da      	mvns	r2, r3
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	039b      	lsls	r3, r3, #14
 80010a8:	4013      	ands	r3, r2
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010b4:	4b23      	ldr	r3, [pc, #140]	@ (8001144 <HAL_GPIO_Init+0x2ec>)
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80010ba:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <HAL_GPIO_Init+0x2ec>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43da      	mvns	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	2380      	movs	r3, #128	@ 0x80
 80010d0:	029b      	lsls	r3, r3, #10
 80010d2:	4013      	ands	r3, r2
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010de:	4b19      	ldr	r3, [pc, #100]	@ (8001144 <HAL_GPIO_Init+0x2ec>)
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80010e4:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <HAL_GPIO_Init+0x2ec>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43da      	mvns	r2, r3
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	2380      	movs	r3, #128	@ 0x80
 80010fa:	025b      	lsls	r3, r3, #9
 80010fc:	4013      	ands	r3, r2
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001108:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <HAL_GPIO_Init+0x2ec>)
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3301      	adds	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	40da      	lsrs	r2, r3
 800111c:	1e13      	subs	r3, r2, #0
 800111e:	d000      	beq.n	8001122 <HAL_GPIO_Init+0x2ca>
 8001120:	e6a2      	b.n	8000e68 <HAL_GPIO_Init+0x10>
  } 
}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	46c0      	nop			@ (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b006      	add	sp, #24
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	40010000 	.word	0x40010000
 8001134:	48000400 	.word	0x48000400
 8001138:	48000800 	.word	0x48000800
 800113c:	48000c00 	.word	0x48000c00
 8001140:	48001000 	.word	0x48001000
 8001144:	40010400 	.word	0x40010400

08001148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	0008      	movs	r0, r1
 8001152:	0011      	movs	r1, r2
 8001154:	1cbb      	adds	r3, r7, #2
 8001156:	1c02      	adds	r2, r0, #0
 8001158:	801a      	strh	r2, [r3, #0]
 800115a:	1c7b      	adds	r3, r7, #1
 800115c:	1c0a      	adds	r2, r1, #0
 800115e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001160:	1c7b      	adds	r3, r7, #1
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001168:	1cbb      	adds	r3, r7, #2
 800116a:	881a      	ldrh	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001170:	e003      	b.n	800117a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001172:	1cbb      	adds	r3, r7, #2
 8001174:	881a      	ldrh	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b002      	add	sp, #8
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	000a      	movs	r2, r1
 800118c:	1cbb      	adds	r3, r7, #2
 800118e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001196:	1cbb      	adds	r3, r7, #2
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4013      	ands	r3, r2
 800119e:	041a      	lsls	r2, r3, #16
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	1cb9      	adds	r1, r7, #2
 80011a6:	8809      	ldrh	r1, [r1, #0]
 80011a8:	400b      	ands	r3, r1
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	619a      	str	r2, [r3, #24]
}
 80011b0:	46c0      	nop			@ (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b004      	add	sp, #16
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	0002      	movs	r2, r0
 80011c0:	1dbb      	adds	r3, r7, #6
 80011c2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011c4:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	1dba      	adds	r2, r7, #6
 80011ca:	8812      	ldrh	r2, [r2, #0]
 80011cc:	4013      	ands	r3, r2
 80011ce:	d008      	beq.n	80011e2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80011d2:	1dba      	adds	r2, r7, #6
 80011d4:	8812      	ldrh	r2, [r2, #0]
 80011d6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d8:	1dbb      	adds	r3, r7, #6
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff fa9d 	bl	800071c <HAL_GPIO_EXTI_Callback>
  }
}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	40010400 	.word	0x40010400

080011f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	f000 fb76 	bl	80018f0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2201      	movs	r2, #1
 800120a:	4013      	ands	r3, r2
 800120c:	d100      	bne.n	8001210 <HAL_RCC_OscConfig+0x20>
 800120e:	e08e      	b.n	800132e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001210:	4bc5      	ldr	r3, [pc, #788]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	220c      	movs	r2, #12
 8001216:	4013      	ands	r3, r2
 8001218:	2b04      	cmp	r3, #4
 800121a:	d00e      	beq.n	800123a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800121c:	4bc2      	ldr	r3, [pc, #776]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	220c      	movs	r2, #12
 8001222:	4013      	ands	r3, r2
 8001224:	2b08      	cmp	r3, #8
 8001226:	d117      	bne.n	8001258 <HAL_RCC_OscConfig+0x68>
 8001228:	4bbf      	ldr	r3, [pc, #764]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	23c0      	movs	r3, #192	@ 0xc0
 800122e:	025b      	lsls	r3, r3, #9
 8001230:	401a      	ands	r2, r3
 8001232:	2380      	movs	r3, #128	@ 0x80
 8001234:	025b      	lsls	r3, r3, #9
 8001236:	429a      	cmp	r2, r3
 8001238:	d10e      	bne.n	8001258 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123a:	4bbb      	ldr	r3, [pc, #748]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	2380      	movs	r3, #128	@ 0x80
 8001240:	029b      	lsls	r3, r3, #10
 8001242:	4013      	ands	r3, r2
 8001244:	d100      	bne.n	8001248 <HAL_RCC_OscConfig+0x58>
 8001246:	e071      	b.n	800132c <HAL_RCC_OscConfig+0x13c>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d000      	beq.n	8001252 <HAL_RCC_OscConfig+0x62>
 8001250:	e06c      	b.n	800132c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	f000 fb4c 	bl	80018f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d107      	bne.n	8001270 <HAL_RCC_OscConfig+0x80>
 8001260:	4bb1      	ldr	r3, [pc, #708]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4bb0      	ldr	r3, [pc, #704]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 8001266:	2180      	movs	r1, #128	@ 0x80
 8001268:	0249      	lsls	r1, r1, #9
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e02f      	b.n	80012d0 <HAL_RCC_OscConfig+0xe0>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10c      	bne.n	8001292 <HAL_RCC_OscConfig+0xa2>
 8001278:	4bab      	ldr	r3, [pc, #684]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4baa      	ldr	r3, [pc, #680]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800127e:	49ab      	ldr	r1, [pc, #684]	@ (800152c <HAL_RCC_OscConfig+0x33c>)
 8001280:	400a      	ands	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	4ba8      	ldr	r3, [pc, #672]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4ba7      	ldr	r3, [pc, #668]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800128a:	49a9      	ldr	r1, [pc, #676]	@ (8001530 <HAL_RCC_OscConfig+0x340>)
 800128c:	400a      	ands	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e01e      	b.n	80012d0 <HAL_RCC_OscConfig+0xe0>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b05      	cmp	r3, #5
 8001298:	d10e      	bne.n	80012b8 <HAL_RCC_OscConfig+0xc8>
 800129a:	4ba3      	ldr	r3, [pc, #652]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4ba2      	ldr	r3, [pc, #648]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80012a0:	2180      	movs	r1, #128	@ 0x80
 80012a2:	02c9      	lsls	r1, r1, #11
 80012a4:	430a      	orrs	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	4b9f      	ldr	r3, [pc, #636]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b9e      	ldr	r3, [pc, #632]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80012ae:	2180      	movs	r1, #128	@ 0x80
 80012b0:	0249      	lsls	r1, r1, #9
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	e00b      	b.n	80012d0 <HAL_RCC_OscConfig+0xe0>
 80012b8:	4b9b      	ldr	r3, [pc, #620]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b9a      	ldr	r3, [pc, #616]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80012be:	499b      	ldr	r1, [pc, #620]	@ (800152c <HAL_RCC_OscConfig+0x33c>)
 80012c0:	400a      	ands	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	4b98      	ldr	r3, [pc, #608]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b97      	ldr	r3, [pc, #604]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80012ca:	4999      	ldr	r1, [pc, #612]	@ (8001530 <HAL_RCC_OscConfig+0x340>)
 80012cc:	400a      	ands	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d014      	beq.n	8001302 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fcd6 	bl	8000c88 <HAL_GetTick>
 80012dc:	0003      	movs	r3, r0
 80012de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e2:	f7ff fcd1 	bl	8000c88 <HAL_GetTick>
 80012e6:	0002      	movs	r2, r0
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b64      	cmp	r3, #100	@ 0x64
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e2fd      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	@ 0x80
 80012fa:	029b      	lsls	r3, r3, #10
 80012fc:	4013      	ands	r3, r2
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0xf2>
 8001300:	e015      	b.n	800132e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001302:	f7ff fcc1 	bl	8000c88 <HAL_GetTick>
 8001306:	0003      	movs	r3, r0
 8001308:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fcbc 	bl	8000c88 <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	@ 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e2e8      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	4b82      	ldr	r3, [pc, #520]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	@ 0x80
 8001324:	029b      	lsls	r3, r3, #10
 8001326:	4013      	ands	r3, r2
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0x11c>
 800132a:	e000      	b.n	800132e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2202      	movs	r2, #2
 8001334:	4013      	ands	r3, r2
 8001336:	d100      	bne.n	800133a <HAL_RCC_OscConfig+0x14a>
 8001338:	e06c      	b.n	8001414 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800133a:	4b7b      	ldr	r3, [pc, #492]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	220c      	movs	r2, #12
 8001340:	4013      	ands	r3, r2
 8001342:	d00e      	beq.n	8001362 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001344:	4b78      	ldr	r3, [pc, #480]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	220c      	movs	r2, #12
 800134a:	4013      	ands	r3, r2
 800134c:	2b08      	cmp	r3, #8
 800134e:	d11f      	bne.n	8001390 <HAL_RCC_OscConfig+0x1a0>
 8001350:	4b75      	ldr	r3, [pc, #468]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	23c0      	movs	r3, #192	@ 0xc0
 8001356:	025b      	lsls	r3, r3, #9
 8001358:	401a      	ands	r2, r3
 800135a:	2380      	movs	r3, #128	@ 0x80
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	429a      	cmp	r2, r3
 8001360:	d116      	bne.n	8001390 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001362:	4b71      	ldr	r3, [pc, #452]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2202      	movs	r2, #2
 8001368:	4013      	ands	r3, r2
 800136a:	d005      	beq.n	8001378 <HAL_RCC_OscConfig+0x188>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d001      	beq.n	8001378 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e2bb      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001378:	4b6b      	ldr	r3, [pc, #428]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	22f8      	movs	r2, #248	@ 0xf8
 800137e:	4393      	bics	r3, r2
 8001380:	0019      	movs	r1, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	00da      	lsls	r2, r3, #3
 8001388:	4b67      	ldr	r3, [pc, #412]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	e041      	b.n	8001414 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d024      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001398:	4b63      	ldr	r3, [pc, #396]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b62      	ldr	r3, [pc, #392]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800139e:	2101      	movs	r1, #1
 80013a0:	430a      	orrs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fc70 	bl	8000c88 <HAL_GetTick>
 80013a8:	0003      	movs	r3, r0
 80013aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff fc6b 	bl	8000c88 <HAL_GetTick>
 80013b2:	0002      	movs	r2, r0
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e297      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	4b59      	ldr	r3, [pc, #356]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2202      	movs	r2, #2
 80013c6:	4013      	ands	r3, r2
 80013c8:	d0f1      	beq.n	80013ae <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ca:	4b57      	ldr	r3, [pc, #348]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	22f8      	movs	r2, #248	@ 0xf8
 80013d0:	4393      	bics	r3, r2
 80013d2:	0019      	movs	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	00da      	lsls	r2, r3, #3
 80013da:	4b53      	ldr	r3, [pc, #332]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	e018      	b.n	8001414 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e2:	4b51      	ldr	r3, [pc, #324]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b50      	ldr	r3, [pc, #320]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80013e8:	2101      	movs	r1, #1
 80013ea:	438a      	bics	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ee:	f7ff fc4b 	bl	8000c88 <HAL_GetTick>
 80013f2:	0003      	movs	r3, r0
 80013f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fc46 	bl	8000c88 <HAL_GetTick>
 80013fc:	0002      	movs	r2, r0
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e272      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b47      	ldr	r3, [pc, #284]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2202      	movs	r2, #2
 8001410:	4013      	ands	r3, r2
 8001412:	d1f1      	bne.n	80013f8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2208      	movs	r2, #8
 800141a:	4013      	ands	r3, r2
 800141c:	d036      	beq.n	800148c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d019      	beq.n	800145a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b40      	ldr	r3, [pc, #256]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 8001428:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800142a:	4b3f      	ldr	r3, [pc, #252]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800142c:	2101      	movs	r1, #1
 800142e:	430a      	orrs	r2, r1
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff fc29 	bl	8000c88 <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff fc24 	bl	8000c88 <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e250      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	4b36      	ldr	r3, [pc, #216]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 8001450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001452:	2202      	movs	r2, #2
 8001454:	4013      	ands	r3, r2
 8001456:	d0f1      	beq.n	800143c <HAL_RCC_OscConfig+0x24c>
 8001458:	e018      	b.n	800148c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145a:	4b33      	ldr	r3, [pc, #204]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800145c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800145e:	4b32      	ldr	r3, [pc, #200]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 8001460:	2101      	movs	r1, #1
 8001462:	438a      	bics	r2, r1
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001466:	f7ff fc0f 	bl	8000c88 <HAL_GetTick>
 800146a:	0003      	movs	r3, r0
 800146c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001470:	f7ff fc0a 	bl	8000c88 <HAL_GetTick>
 8001474:	0002      	movs	r2, r0
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e236      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001482:	4b29      	ldr	r3, [pc, #164]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 8001484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001486:	2202      	movs	r2, #2
 8001488:	4013      	ands	r3, r2
 800148a:	d1f1      	bne.n	8001470 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2204      	movs	r2, #4
 8001492:	4013      	ands	r3, r2
 8001494:	d100      	bne.n	8001498 <HAL_RCC_OscConfig+0x2a8>
 8001496:	e0b5      	b.n	8001604 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001498:	201f      	movs	r0, #31
 800149a:	183b      	adds	r3, r7, r0
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a0:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80014a2:	69da      	ldr	r2, [r3, #28]
 80014a4:	2380      	movs	r3, #128	@ 0x80
 80014a6:	055b      	lsls	r3, r3, #21
 80014a8:	4013      	ands	r3, r2
 80014aa:	d110      	bne.n	80014ce <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80014ae:	69da      	ldr	r2, [r3, #28]
 80014b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80014b2:	2180      	movs	r1, #128	@ 0x80
 80014b4:	0549      	lsls	r1, r1, #21
 80014b6:	430a      	orrs	r2, r1
 80014b8:	61da      	str	r2, [r3, #28]
 80014ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 80014bc:	69da      	ldr	r2, [r3, #28]
 80014be:	2380      	movs	r3, #128	@ 0x80
 80014c0:	055b      	lsls	r3, r3, #21
 80014c2:	4013      	ands	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014c8:	183b      	adds	r3, r7, r0
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <HAL_RCC_OscConfig+0x344>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	2380      	movs	r3, #128	@ 0x80
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4013      	ands	r3, r2
 80014d8:	d11a      	bne.n	8001510 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014da:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <HAL_RCC_OscConfig+0x344>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <HAL_RCC_OscConfig+0x344>)
 80014e0:	2180      	movs	r1, #128	@ 0x80
 80014e2:	0049      	lsls	r1, r1, #1
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e8:	f7ff fbce 	bl	8000c88 <HAL_GetTick>
 80014ec:	0003      	movs	r3, r0
 80014ee:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f2:	f7ff fbc9 	bl	8000c88 <HAL_GetTick>
 80014f6:	0002      	movs	r2, r0
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b64      	cmp	r3, #100	@ 0x64
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e1f5      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <HAL_RCC_OscConfig+0x344>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2380      	movs	r3, #128	@ 0x80
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4013      	ands	r3, r2
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d10f      	bne.n	8001538 <HAL_RCC_OscConfig+0x348>
 8001518:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800151a:	6a1a      	ldr	r2, [r3, #32]
 800151c:	4b02      	ldr	r3, [pc, #8]	@ (8001528 <HAL_RCC_OscConfig+0x338>)
 800151e:	2101      	movs	r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	621a      	str	r2, [r3, #32]
 8001524:	e036      	b.n	8001594 <HAL_RCC_OscConfig+0x3a4>
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	40021000 	.word	0x40021000
 800152c:	fffeffff 	.word	0xfffeffff
 8001530:	fffbffff 	.word	0xfffbffff
 8001534:	40007000 	.word	0x40007000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d10c      	bne.n	800155a <HAL_RCC_OscConfig+0x36a>
 8001540:	4bca      	ldr	r3, [pc, #808]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001542:	6a1a      	ldr	r2, [r3, #32]
 8001544:	4bc9      	ldr	r3, [pc, #804]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001546:	2101      	movs	r1, #1
 8001548:	438a      	bics	r2, r1
 800154a:	621a      	str	r2, [r3, #32]
 800154c:	4bc7      	ldr	r3, [pc, #796]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 800154e:	6a1a      	ldr	r2, [r3, #32]
 8001550:	4bc6      	ldr	r3, [pc, #792]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001552:	2104      	movs	r1, #4
 8001554:	438a      	bics	r2, r1
 8001556:	621a      	str	r2, [r3, #32]
 8001558:	e01c      	b.n	8001594 <HAL_RCC_OscConfig+0x3a4>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b05      	cmp	r3, #5
 8001560:	d10c      	bne.n	800157c <HAL_RCC_OscConfig+0x38c>
 8001562:	4bc2      	ldr	r3, [pc, #776]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001564:	6a1a      	ldr	r2, [r3, #32]
 8001566:	4bc1      	ldr	r3, [pc, #772]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001568:	2104      	movs	r1, #4
 800156a:	430a      	orrs	r2, r1
 800156c:	621a      	str	r2, [r3, #32]
 800156e:	4bbf      	ldr	r3, [pc, #764]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001570:	6a1a      	ldr	r2, [r3, #32]
 8001572:	4bbe      	ldr	r3, [pc, #760]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001574:	2101      	movs	r1, #1
 8001576:	430a      	orrs	r2, r1
 8001578:	621a      	str	r2, [r3, #32]
 800157a:	e00b      	b.n	8001594 <HAL_RCC_OscConfig+0x3a4>
 800157c:	4bbb      	ldr	r3, [pc, #748]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 800157e:	6a1a      	ldr	r2, [r3, #32]
 8001580:	4bba      	ldr	r3, [pc, #744]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001582:	2101      	movs	r1, #1
 8001584:	438a      	bics	r2, r1
 8001586:	621a      	str	r2, [r3, #32]
 8001588:	4bb8      	ldr	r3, [pc, #736]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 800158a:	6a1a      	ldr	r2, [r3, #32]
 800158c:	4bb7      	ldr	r3, [pc, #732]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 800158e:	2104      	movs	r1, #4
 8001590:	438a      	bics	r2, r1
 8001592:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d014      	beq.n	80015c6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fb74 	bl	8000c88 <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	e009      	b.n	80015ba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff fb6f 	bl	8000c88 <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	4aaf      	ldr	r2, [pc, #700]	@ (8001870 <HAL_RCC_OscConfig+0x680>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e19a      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	4bac      	ldr	r3, [pc, #688]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	2202      	movs	r2, #2
 80015c0:	4013      	ands	r3, r2
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x3b6>
 80015c4:	e013      	b.n	80015ee <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fb5f 	bl	8000c88 <HAL_GetTick>
 80015ca:	0003      	movs	r3, r0
 80015cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ce:	e009      	b.n	80015e4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f7ff fb5a 	bl	8000c88 <HAL_GetTick>
 80015d4:	0002      	movs	r2, r0
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	4aa5      	ldr	r2, [pc, #660]	@ (8001870 <HAL_RCC_OscConfig+0x680>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e185      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e4:	4ba1      	ldr	r3, [pc, #644]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	2202      	movs	r2, #2
 80015ea:	4013      	ands	r3, r2
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015ee:	231f      	movs	r3, #31
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d105      	bne.n	8001604 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f8:	4b9c      	ldr	r3, [pc, #624]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80015fa:	69da      	ldr	r2, [r3, #28]
 80015fc:	4b9b      	ldr	r3, [pc, #620]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80015fe:	499d      	ldr	r1, [pc, #628]	@ (8001874 <HAL_RCC_OscConfig+0x684>)
 8001600:	400a      	ands	r2, r1
 8001602:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2210      	movs	r2, #16
 800160a:	4013      	ands	r3, r2
 800160c:	d063      	beq.n	80016d6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d12a      	bne.n	800166c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001616:	4b95      	ldr	r3, [pc, #596]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800161a:	4b94      	ldr	r3, [pc, #592]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 800161c:	2104      	movs	r1, #4
 800161e:	430a      	orrs	r2, r1
 8001620:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001622:	4b92      	ldr	r3, [pc, #584]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001624:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001626:	4b91      	ldr	r3, [pc, #580]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001628:	2101      	movs	r1, #1
 800162a:	430a      	orrs	r2, r1
 800162c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162e:	f7ff fb2b 	bl	8000c88 <HAL_GetTick>
 8001632:	0003      	movs	r3, r0
 8001634:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001638:	f7ff fb26 	bl	8000c88 <HAL_GetTick>
 800163c:	0002      	movs	r2, r0
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e152      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800164a:	4b88      	ldr	r3, [pc, #544]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 800164c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800164e:	2202      	movs	r2, #2
 8001650:	4013      	ands	r3, r2
 8001652:	d0f1      	beq.n	8001638 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001654:	4b85      	ldr	r3, [pc, #532]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001658:	22f8      	movs	r2, #248	@ 0xf8
 800165a:	4393      	bics	r3, r2
 800165c:	0019      	movs	r1, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	00da      	lsls	r2, r3, #3
 8001664:	4b81      	ldr	r3, [pc, #516]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001666:	430a      	orrs	r2, r1
 8001668:	635a      	str	r2, [r3, #52]	@ 0x34
 800166a:	e034      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	3305      	adds	r3, #5
 8001672:	d111      	bne.n	8001698 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001674:	4b7d      	ldr	r3, [pc, #500]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001676:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001678:	4b7c      	ldr	r3, [pc, #496]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 800167a:	2104      	movs	r1, #4
 800167c:	438a      	bics	r2, r1
 800167e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001680:	4b7a      	ldr	r3, [pc, #488]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001684:	22f8      	movs	r2, #248	@ 0xf8
 8001686:	4393      	bics	r3, r2
 8001688:	0019      	movs	r1, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	00da      	lsls	r2, r3, #3
 8001690:	4b76      	ldr	r3, [pc, #472]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001692:	430a      	orrs	r2, r1
 8001694:	635a      	str	r2, [r3, #52]	@ 0x34
 8001696:	e01e      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001698:	4b74      	ldr	r3, [pc, #464]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 800169a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800169c:	4b73      	ldr	r3, [pc, #460]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 800169e:	2104      	movs	r1, #4
 80016a0:	430a      	orrs	r2, r1
 80016a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016a4:	4b71      	ldr	r3, [pc, #452]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80016a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016a8:	4b70      	ldr	r3, [pc, #448]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80016aa:	2101      	movs	r1, #1
 80016ac:	438a      	bics	r2, r1
 80016ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff faea 	bl	8000c88 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016ba:	f7ff fae5 	bl	8000c88 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e111      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016cc:	4b67      	ldr	r3, [pc, #412]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80016ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d0:	2202      	movs	r2, #2
 80016d2:	4013      	ands	r3, r2
 80016d4:	d1f1      	bne.n	80016ba <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2220      	movs	r2, #32
 80016dc:	4013      	ands	r3, r2
 80016de:	d05c      	beq.n	800179a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016e0:	4b62      	ldr	r3, [pc, #392]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	220c      	movs	r2, #12
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b0c      	cmp	r3, #12
 80016ea:	d00e      	beq.n	800170a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80016ec:	4b5f      	ldr	r3, [pc, #380]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	220c      	movs	r2, #12
 80016f2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d114      	bne.n	8001722 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80016f8:	4b5c      	ldr	r3, [pc, #368]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	23c0      	movs	r3, #192	@ 0xc0
 80016fe:	025b      	lsls	r3, r3, #9
 8001700:	401a      	ands	r2, r3
 8001702:	23c0      	movs	r3, #192	@ 0xc0
 8001704:	025b      	lsls	r3, r3, #9
 8001706:	429a      	cmp	r2, r3
 8001708:	d10b      	bne.n	8001722 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800170a:	4b58      	ldr	r3, [pc, #352]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 800170c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800170e:	2380      	movs	r3, #128	@ 0x80
 8001710:	029b      	lsls	r3, r3, #10
 8001712:	4013      	ands	r3, r2
 8001714:	d040      	beq.n	8001798 <HAL_RCC_OscConfig+0x5a8>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d03c      	beq.n	8001798 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0e6      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d01b      	beq.n	8001762 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800172a:	4b50      	ldr	r3, [pc, #320]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 800172c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800172e:	4b4f      	ldr	r3, [pc, #316]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001730:	2180      	movs	r1, #128	@ 0x80
 8001732:	0249      	lsls	r1, r1, #9
 8001734:	430a      	orrs	r2, r1
 8001736:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff faa6 	bl	8000c88 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001742:	f7ff faa1 	bl	8000c88 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e0cd      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001754:	4b45      	ldr	r3, [pc, #276]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001758:	2380      	movs	r3, #128	@ 0x80
 800175a:	029b      	lsls	r3, r3, #10
 800175c:	4013      	ands	r3, r2
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x552>
 8001760:	e01b      	b.n	800179a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001762:	4b42      	ldr	r3, [pc, #264]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001766:	4b41      	ldr	r3, [pc, #260]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001768:	4943      	ldr	r1, [pc, #268]	@ (8001878 <HAL_RCC_OscConfig+0x688>)
 800176a:	400a      	ands	r2, r1
 800176c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff fa8b 	bl	8000c88 <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001778:	f7ff fa86 	bl	8000c88 <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e0b2      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800178a:	4b38      	ldr	r3, [pc, #224]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 800178c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800178e:	2380      	movs	r3, #128	@ 0x80
 8001790:	029b      	lsls	r3, r3, #10
 8001792:	4013      	ands	r3, r2
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x588>
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001798:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d100      	bne.n	80017a4 <HAL_RCC_OscConfig+0x5b4>
 80017a2:	e0a4      	b.n	80018ee <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a4:	4b31      	ldr	r3, [pc, #196]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	220c      	movs	r2, #12
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d100      	bne.n	80017b2 <HAL_RCC_OscConfig+0x5c2>
 80017b0:	e078      	b.n	80018a4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d14c      	bne.n	8001854 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ba:	4b2c      	ldr	r3, [pc, #176]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b2b      	ldr	r3, [pc, #172]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80017c0:	492e      	ldr	r1, [pc, #184]	@ (800187c <HAL_RCC_OscConfig+0x68c>)
 80017c2:	400a      	ands	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fa5f 	bl	8000c88 <HAL_GetTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff fa5a 	bl	8000c88 <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e086      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e2:	4b22      	ldr	r3, [pc, #136]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	2380      	movs	r3, #128	@ 0x80
 80017e8:	049b      	lsls	r3, r3, #18
 80017ea:	4013      	ands	r3, r2
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ee:	4b1f      	ldr	r3, [pc, #124]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80017f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f2:	220f      	movs	r2, #15
 80017f4:	4393      	bics	r3, r2
 80017f6:	0019      	movs	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017fc:	4b1b      	ldr	r3, [pc, #108]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 80017fe:	430a      	orrs	r2, r1
 8001800:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001802:	4b1a      	ldr	r3, [pc, #104]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4a1e      	ldr	r2, [pc, #120]	@ (8001880 <HAL_RCC_OscConfig+0x690>)
 8001808:	4013      	ands	r3, r2
 800180a:	0019      	movs	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001814:	431a      	orrs	r2, r3
 8001816:	4b15      	ldr	r3, [pc, #84]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001818:	430a      	orrs	r2, r1
 800181a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800181c:	4b13      	ldr	r3, [pc, #76]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001822:	2180      	movs	r1, #128	@ 0x80
 8001824:	0449      	lsls	r1, r1, #17
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fa2d 	bl	8000c88 <HAL_GetTick>
 800182e:	0003      	movs	r3, r0
 8001830:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff fa28 	bl	8000c88 <HAL_GetTick>
 8001838:	0002      	movs	r2, r0
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e054      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001846:	4b09      	ldr	r3, [pc, #36]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	@ 0x80
 800184c:	049b      	lsls	r3, r3, #18
 800184e:	4013      	ands	r3, r2
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x644>
 8001852:	e04c      	b.n	80018ee <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b04      	ldr	r3, [pc, #16]	@ (800186c <HAL_RCC_OscConfig+0x67c>)
 800185a:	4908      	ldr	r1, [pc, #32]	@ (800187c <HAL_RCC_OscConfig+0x68c>)
 800185c:	400a      	ands	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fa12 	bl	8000c88 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001868:	e015      	b.n	8001896 <HAL_RCC_OscConfig+0x6a6>
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	40021000 	.word	0x40021000
 8001870:	00001388 	.word	0x00001388
 8001874:	efffffff 	.word	0xefffffff
 8001878:	fffeffff 	.word	0xfffeffff
 800187c:	feffffff 	.word	0xfeffffff
 8001880:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff fa00 	bl	8000c88 <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e02c      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001896:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <HAL_RCC_OscConfig+0x708>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	2380      	movs	r3, #128	@ 0x80
 800189c:	049b      	lsls	r3, r3, #18
 800189e:	4013      	ands	r3, r2
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x694>
 80018a2:	e024      	b.n	80018ee <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e01f      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018b0:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_RCC_OscConfig+0x708>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <HAL_RCC_OscConfig+0x708>)
 80018b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ba:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	23c0      	movs	r3, #192	@ 0xc0
 80018c0:	025b      	lsls	r3, r3, #9
 80018c2:	401a      	ands	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d10e      	bne.n	80018ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	220f      	movs	r2, #15
 80018d0:	401a      	ands	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	23f0      	movs	r3, #240	@ 0xf0
 80018de:	039b      	lsls	r3, r3, #14
 80018e0:	401a      	ands	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d001      	beq.n	80018ee <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	0018      	movs	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b008      	add	sp, #32
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0bf      	b.n	8001a90 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001910:	4b61      	ldr	r3, [pc, #388]	@ (8001a98 <HAL_RCC_ClockConfig+0x19c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2201      	movs	r2, #1
 8001916:	4013      	ands	r3, r2
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d911      	bls.n	8001942 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b5e      	ldr	r3, [pc, #376]	@ (8001a98 <HAL_RCC_ClockConfig+0x19c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2201      	movs	r2, #1
 8001924:	4393      	bics	r3, r2
 8001926:	0019      	movs	r1, r3
 8001928:	4b5b      	ldr	r3, [pc, #364]	@ (8001a98 <HAL_RCC_ClockConfig+0x19c>)
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001930:	4b59      	ldr	r3, [pc, #356]	@ (8001a98 <HAL_RCC_ClockConfig+0x19c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2201      	movs	r2, #1
 8001936:	4013      	ands	r3, r2
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d001      	beq.n	8001942 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e0a6      	b.n	8001a90 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2202      	movs	r2, #2
 8001948:	4013      	ands	r3, r2
 800194a:	d015      	beq.n	8001978 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2204      	movs	r2, #4
 8001952:	4013      	ands	r3, r2
 8001954:	d006      	beq.n	8001964 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001956:	4b51      	ldr	r3, [pc, #324]	@ (8001a9c <HAL_RCC_ClockConfig+0x1a0>)
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	4b50      	ldr	r3, [pc, #320]	@ (8001a9c <HAL_RCC_ClockConfig+0x1a0>)
 800195c:	21e0      	movs	r1, #224	@ 0xe0
 800195e:	00c9      	lsls	r1, r1, #3
 8001960:	430a      	orrs	r2, r1
 8001962:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001964:	4b4d      	ldr	r3, [pc, #308]	@ (8001a9c <HAL_RCC_ClockConfig+0x1a0>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	22f0      	movs	r2, #240	@ 0xf0
 800196a:	4393      	bics	r3, r2
 800196c:	0019      	movs	r1, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	4b4a      	ldr	r3, [pc, #296]	@ (8001a9c <HAL_RCC_ClockConfig+0x1a0>)
 8001974:	430a      	orrs	r2, r1
 8001976:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2201      	movs	r2, #1
 800197e:	4013      	ands	r3, r2
 8001980:	d04c      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b44      	ldr	r3, [pc, #272]	@ (8001a9c <HAL_RCC_ClockConfig+0x1a0>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	2380      	movs	r3, #128	@ 0x80
 8001990:	029b      	lsls	r3, r3, #10
 8001992:	4013      	ands	r3, r2
 8001994:	d120      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e07a      	b.n	8001a90 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	4b3e      	ldr	r3, [pc, #248]	@ (8001a9c <HAL_RCC_ClockConfig+0x1a0>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	2380      	movs	r3, #128	@ 0x80
 80019a8:	049b      	lsls	r3, r3, #18
 80019aa:	4013      	ands	r3, r2
 80019ac:	d114      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e06e      	b.n	8001a90 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019ba:	4b38      	ldr	r3, [pc, #224]	@ (8001a9c <HAL_RCC_ClockConfig+0x1a0>)
 80019bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019be:	2380      	movs	r3, #128	@ 0x80
 80019c0:	029b      	lsls	r3, r3, #10
 80019c2:	4013      	ands	r3, r2
 80019c4:	d108      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e062      	b.n	8001a90 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ca:	4b34      	ldr	r3, [pc, #208]	@ (8001a9c <HAL_RCC_ClockConfig+0x1a0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2202      	movs	r2, #2
 80019d0:	4013      	ands	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e05b      	b.n	8001a90 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d8:	4b30      	ldr	r3, [pc, #192]	@ (8001a9c <HAL_RCC_ClockConfig+0x1a0>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2203      	movs	r2, #3
 80019de:	4393      	bics	r3, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a9c <HAL_RCC_ClockConfig+0x1a0>)
 80019e8:	430a      	orrs	r2, r1
 80019ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ec:	f7ff f94c 	bl	8000c88 <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f4:	e009      	b.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f6:	f7ff f947 	bl	8000c88 <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	4a27      	ldr	r2, [pc, #156]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1a4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e042      	b.n	8001a90 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	4b24      	ldr	r3, [pc, #144]	@ (8001a9c <HAL_RCC_ClockConfig+0x1a0>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	220c      	movs	r2, #12
 8001a10:	401a      	ands	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d1ec      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a98 <HAL_RCC_ClockConfig+0x19c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2201      	movs	r2, #1
 8001a22:	4013      	ands	r3, r2
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d211      	bcs.n	8001a4e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <HAL_RCC_ClockConfig+0x19c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4393      	bics	r3, r2
 8001a32:	0019      	movs	r1, r3
 8001a34:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <HAL_RCC_ClockConfig+0x19c>)
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3c:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <HAL_RCC_ClockConfig+0x19c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2201      	movs	r2, #1
 8001a42:	4013      	ands	r3, r2
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e020      	b.n	8001a90 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2204      	movs	r2, #4
 8001a54:	4013      	ands	r3, r2
 8001a56:	d009      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a58:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <HAL_RCC_ClockConfig+0x1a0>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4a11      	ldr	r2, [pc, #68]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1a8>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	0019      	movs	r1, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	4b0d      	ldr	r3, [pc, #52]	@ (8001a9c <HAL_RCC_ClockConfig+0x1a0>)
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a6c:	f000 f820 	bl	8001ab0 <HAL_RCC_GetSysClockFreq>
 8001a70:	0001      	movs	r1, r0
 8001a72:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <HAL_RCC_ClockConfig+0x1a0>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	220f      	movs	r2, #15
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ac>)
 8001a7e:	5cd3      	ldrb	r3, [r2, r3]
 8001a80:	000a      	movs	r2, r1
 8001a82:	40da      	lsrs	r2, r3
 8001a84:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <HAL_RCC_ClockConfig+0x1b0>)
 8001a86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff f8b7 	bl	8000bfc <HAL_InitTick>
  
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b004      	add	sp, #16
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40022000 	.word	0x40022000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	00001388 	.word	0x00001388
 8001aa4:	fffff8ff 	.word	0xfffff8ff
 8001aa8:	08004b68 	.word	0x08004b68
 8001aac:	20000000 	.word	0x20000000

08001ab0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001aca:	4b2d      	ldr	r3, [pc, #180]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	d046      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0xb8>
 8001ada:	d848      	bhi.n	8001b6e <HAL_RCC_GetSysClockFreq+0xbe>
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d002      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x36>
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d003      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x3c>
 8001ae4:	e043      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ae6:	4b27      	ldr	r3, [pc, #156]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001ae8:	613b      	str	r3, [r7, #16]
      break;
 8001aea:	e043      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	0c9b      	lsrs	r3, r3, #18
 8001af0:	220f      	movs	r2, #15
 8001af2:	4013      	ands	r3, r2
 8001af4:	4a24      	ldr	r2, [pc, #144]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001afa:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afe:	220f      	movs	r2, #15
 8001b00:	4013      	ands	r3, r2
 8001b02:	4a22      	ldr	r2, [pc, #136]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0xdc>)
 8001b04:	5cd3      	ldrb	r3, [r2, r3]
 8001b06:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	23c0      	movs	r3, #192	@ 0xc0
 8001b0c:	025b      	lsls	r3, r3, #9
 8001b0e:	401a      	ands	r2, r3
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	025b      	lsls	r3, r3, #9
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d109      	bne.n	8001b2c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	481a      	ldr	r0, [pc, #104]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b1c:	f7fe fb06 	bl	800012c <__udivsi3>
 8001b20:	0003      	movs	r3, r0
 8001b22:	001a      	movs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4353      	muls	r3, r2
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e01a      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	23c0      	movs	r3, #192	@ 0xc0
 8001b30:	025b      	lsls	r3, r3, #9
 8001b32:	401a      	ands	r2, r3
 8001b34:	23c0      	movs	r3, #192	@ 0xc0
 8001b36:	025b      	lsls	r3, r3, #9
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d109      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	4814      	ldr	r0, [pc, #80]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001b40:	f7fe faf4 	bl	800012c <__udivsi3>
 8001b44:	0003      	movs	r3, r0
 8001b46:	001a      	movs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4353      	muls	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	480c      	ldr	r0, [pc, #48]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b54:	f7fe faea 	bl	800012c <__udivsi3>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	001a      	movs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4353      	muls	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	613b      	str	r3, [r7, #16]
      break;
 8001b66:	e005      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001b68:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001b6a:	613b      	str	r3, [r7, #16]
      break;
 8001b6c:	e002      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b6e:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b70:	613b      	str	r3, [r7, #16]
      break;
 8001b72:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b74:	693b      	ldr	r3, [r7, #16]
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b006      	add	sp, #24
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	46c0      	nop			@ (mov r8, r8)
 8001b80:	40021000 	.word	0x40021000
 8001b84:	007a1200 	.word	0x007a1200
 8001b88:	08004b80 	.word	0x08004b80
 8001b8c:	08004b90 	.word	0x08004b90
 8001b90:	02dc6c00 	.word	0x02dc6c00

08001b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b98:	4b02      	ldr	r3, [pc, #8]	@ (8001ba4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001bac:	f7ff fff2 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bb0:	0001      	movs	r1, r0
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	2207      	movs	r2, #7
 8001bba:	4013      	ands	r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	40d9      	lsrs	r1, r3
 8001bc2:	000b      	movs	r3, r1
}    
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08004b78 	.word	0x08004b78

08001bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	025b      	lsls	r3, r3, #9
 8001bec:	4013      	ands	r3, r2
 8001bee:	d100      	bne.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001bf0:	e08e      	b.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001bf2:	2017      	movs	r0, #23
 8001bf4:	183b      	adds	r3, r7, r0
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfa:	4b6e      	ldr	r3, [pc, #440]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bfc:	69da      	ldr	r2, [r3, #28]
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	055b      	lsls	r3, r3, #21
 8001c02:	4013      	ands	r3, r2
 8001c04:	d110      	bne.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4b6b      	ldr	r3, [pc, #428]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c08:	69da      	ldr	r2, [r3, #28]
 8001c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c0c:	2180      	movs	r1, #128	@ 0x80
 8001c0e:	0549      	lsls	r1, r1, #21
 8001c10:	430a      	orrs	r2, r1
 8001c12:	61da      	str	r2, [r3, #28]
 8001c14:	4b67      	ldr	r3, [pc, #412]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c16:	69da      	ldr	r2, [r3, #28]
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	055b      	lsls	r3, r3, #21
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c22:	183b      	adds	r3, r7, r0
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c28:	4b63      	ldr	r3, [pc, #396]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4013      	ands	r3, r2
 8001c32:	d11a      	bne.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c34:	4b60      	ldr	r3, [pc, #384]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b5f      	ldr	r3, [pc, #380]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c3a:	2180      	movs	r1, #128	@ 0x80
 8001c3c:	0049      	lsls	r1, r1, #1
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c42:	f7ff f821 	bl	8000c88 <HAL_GetTick>
 8001c46:	0003      	movs	r3, r0
 8001c48:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4a:	e008      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4c:	f7ff f81c 	bl	8000c88 <HAL_GetTick>
 8001c50:	0002      	movs	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	@ 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e0a6      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5e:	4b56      	ldr	r3, [pc, #344]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	2380      	movs	r3, #128	@ 0x80
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4013      	ands	r3, r2
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c6a:	4b52      	ldr	r3, [pc, #328]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c6c:	6a1a      	ldr	r2, [r3, #32]
 8001c6e:	23c0      	movs	r3, #192	@ 0xc0
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4013      	ands	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d034      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	23c0      	movs	r3, #192	@ 0xc0
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4013      	ands	r3, r2
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d02c      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c8c:	4b49      	ldr	r3, [pc, #292]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a4a      	ldr	r2, [pc, #296]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c96:	4b47      	ldr	r3, [pc, #284]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c98:	6a1a      	ldr	r2, [r3, #32]
 8001c9a:	4b46      	ldr	r3, [pc, #280]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c9c:	2180      	movs	r1, #128	@ 0x80
 8001c9e:	0249      	lsls	r1, r1, #9
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ca4:	4b43      	ldr	r3, [pc, #268]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ca6:	6a1a      	ldr	r2, [r3, #32]
 8001ca8:	4b42      	ldr	r3, [pc, #264]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001caa:	4945      	ldr	r1, [pc, #276]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001cac:	400a      	ands	r2, r1
 8001cae:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cb0:	4b40      	ldr	r3, [pc, #256]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7fe ffe3 	bl	8000c88 <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc6:	e009      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc8:	f7fe ffde 	bl	8000c88 <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	4a3c      	ldr	r2, [pc, #240]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e067      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cdc:	4b35      	ldr	r3, [pc, #212]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ce6:	4b33      	ldr	r3, [pc, #204]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4a34      	ldr	r2, [pc, #208]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	0019      	movs	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cfa:	2317      	movs	r3, #23
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d04:	4b2b      	ldr	r3, [pc, #172]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d06:	69da      	ldr	r2, [r3, #28]
 8001d08:	4b2a      	ldr	r3, [pc, #168]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d0a:	492f      	ldr	r1, [pc, #188]	@ (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2201      	movs	r2, #1
 8001d16:	4013      	ands	r3, r2
 8001d18:	d009      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d1a:	4b26      	ldr	r3, [pc, #152]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	2203      	movs	r2, #3
 8001d20:	4393      	bics	r3, r2
 8001d22:	0019      	movs	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2202      	movs	r2, #2
 8001d34:	4013      	ands	r3, r2
 8001d36:	d009      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d38:	4b1e      	ldr	r3, [pc, #120]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3c:	4a23      	ldr	r2, [pc, #140]	@ (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	0019      	movs	r1, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	4b1b      	ldr	r3, [pc, #108]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2220      	movs	r2, #32
 8001d52:	4013      	ands	r3, r2
 8001d54:	d009      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d56:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	4393      	bics	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	4b13      	ldr	r3, [pc, #76]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	2380      	movs	r3, #128	@ 0x80
 8001d70:	029b      	lsls	r3, r3, #10
 8001d72:	4013      	ands	r3, r2
 8001d74:	d009      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d76:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	2280      	movs	r2, #128	@ 0x80
 8001d7c:	4393      	bics	r3, r2
 8001d7e:	0019      	movs	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d86:	430a      	orrs	r2, r1
 8001d88:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	@ 0x80
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4013      	ands	r3, r2
 8001d94:	d009      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d96:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	2240      	movs	r2, #64	@ 0x40
 8001d9c:	4393      	bics	r3, r2
 8001d9e:	0019      	movs	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	4b03      	ldr	r3, [pc, #12]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001da6:	430a      	orrs	r2, r1
 8001da8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b006      	add	sp, #24
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40007000 	.word	0x40007000
 8001dbc:	fffffcff 	.word	0xfffffcff
 8001dc0:	fffeffff 	.word	0xfffeffff
 8001dc4:	00001388 	.word	0x00001388
 8001dc8:	efffffff 	.word	0xefffffff
 8001dcc:	fffcffff 	.word	0xfffcffff

08001dd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001dd0:	b5b0      	push	{r4, r5, r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001dd8:	230f      	movs	r3, #15
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e081      	b.n	8001eee <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7f5b      	ldrb	r3, [r3, #29]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d106      	bne.n	8001e02 <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f7fe fd55 	bl	80008ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2202      	movs	r2, #2
 8001e06:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2210      	movs	r2, #16
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d05c      	beq.n	8001ed0 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	22ca      	movs	r2, #202	@ 0xca
 8001e1c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2253      	movs	r2, #83	@ 0x53
 8001e24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001e26:	250f      	movs	r5, #15
 8001e28:	197c      	adds	r4, r7, r5
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f000 fb9d 	bl	800256c <RTC_EnterInitMode>
 8001e32:	0003      	movs	r3, r0
 8001e34:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8001e36:	0028      	movs	r0, r5
 8001e38:	183b      	adds	r3, r7, r0
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d12c      	bne.n	8001e9a <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	492b      	ldr	r1, [pc, #172]	@ (8001ef8 <HAL_RTC_Init+0x128>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6899      	ldr	r1, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68d2      	ldr	r2, [r2, #12]
 8001e76:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6919      	ldr	r1, [r3, #16]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	041a      	lsls	r2, r3, #16
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001e8c:	183c      	adds	r4, r7, r0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f000 fbae 	bl	80025f2 <RTC_ExitInitMode>
 8001e96:	0003      	movs	r3, r0
 8001e98:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8001e9a:	230f      	movs	r3, #15
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d110      	bne.n	8001ec6 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4913      	ldr	r1, [pc, #76]	@ (8001efc <HAL_RTC_Init+0x12c>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699a      	ldr	r2, [r3, #24]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	22ff      	movs	r2, #255	@ 0xff
 8001ecc:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ece:	e003      	b.n	8001ed8 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001ed0:	230f      	movs	r3, #15
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8001ed8:	230f      	movs	r3, #15
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001ee8:	230f      	movs	r3, #15
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	781b      	ldrb	r3, [r3, #0]
}
 8001eee:	0018      	movs	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b004      	add	sp, #16
 8001ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	ff8fffbf 	.word	0xff8fffbf
 8001efc:	fffbffff 	.word	0xfffbffff

08001f00 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	7f1b      	ldrb	r3, [r3, #28]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_RTC_SetTime+0x1c>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e08e      	b.n	800203a <HAL_RTC_SetTime+0x13a>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2202      	movs	r2, #2
 8001f26:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d125      	bne.n	8001f7a <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2240      	movs	r2, #64	@ 0x40
 8001f36:	4013      	ands	r3, r2
 8001f38:	d102      	bne.n	8001f40 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 fb7d 	bl	8002644 <RTC_ByteToBcd2>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	785b      	ldrb	r3, [r3, #1]
 8001f52:	0018      	movs	r0, r3
 8001f54:	f000 fb76 	bl	8002644 <RTC_ByteToBcd2>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f5c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	789b      	ldrb	r3, [r3, #2]
 8001f62:	0018      	movs	r0, r3
 8001f64:	f000 fb6e 	bl	8002644 <RTC_ByteToBcd2>
 8001f68:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f6a:	0022      	movs	r2, r4
 8001f6c:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	78db      	ldrb	r3, [r3, #3]
 8001f72:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	e017      	b.n	8001faa <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2240      	movs	r2, #64	@ 0x40
 8001f82:	4013      	ands	r3, r2
 8001f84:	d102      	bne.n	8001f8c <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	785b      	ldrb	r3, [r3, #1]
 8001f96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f98:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f9e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	78db      	ldrb	r3, [r3, #3]
 8001fa4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	22ca      	movs	r2, #202	@ 0xca
 8001fb0:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2253      	movs	r2, #83	@ 0x53
 8001fb8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001fba:	2513      	movs	r5, #19
 8001fbc:	197c      	adds	r4, r7, r5
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f000 fad3 	bl	800256c <RTC_EnterInitMode>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001fca:	0028      	movs	r0, r5
 8001fcc:	183b      	adds	r3, r7, r0
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d120      	bne.n	8002016 <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	491a      	ldr	r1, [pc, #104]	@ (8002044 <HAL_RTC_SetTime+0x144>)
 8001fdc:	400a      	ands	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4917      	ldr	r1, [pc, #92]	@ (8002048 <HAL_RTC_SetTime+0x148>)
 8001fec:	400a      	ands	r2, r1
 8001fee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6899      	ldr	r1, [r3, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002008:	183c      	adds	r4, r7, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	0018      	movs	r0, r3
 800200e:	f000 faf0 	bl	80025f2 <RTC_ExitInitMode>
 8002012:	0003      	movs	r3, r0
 8002014:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002016:	2313      	movs	r3, #19
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	22ff      	movs	r2, #255	@ 0xff
 800202c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]

  return status;
 8002034:	2313      	movs	r3, #19
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	781b      	ldrb	r3, [r3, #0]
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b006      	add	sp, #24
 8002040:	bdb0      	pop	{r4, r5, r7, pc}
 8002042:	46c0      	nop			@ (mov r8, r8)
 8002044:	007f7f7f 	.word	0x007f7f7f
 8002048:	fffbffff 	.word	0xfffbffff

0800204c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	045b      	lsls	r3, r3, #17
 800206e:	0c5a      	lsrs	r2, r3, #17
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a22      	ldr	r2, [pc, #136]	@ (8002104 <HAL_RTC_GetTime+0xb8>)
 800207c:	4013      	ands	r3, r2
 800207e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	0c1b      	lsrs	r3, r3, #16
 8002084:	b2db      	uxtb	r3, r3
 8002086:	223f      	movs	r2, #63	@ 0x3f
 8002088:	4013      	ands	r3, r2
 800208a:	b2da      	uxtb	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	b2db      	uxtb	r3, r3
 8002096:	227f      	movs	r2, #127	@ 0x7f
 8002098:	4013      	ands	r3, r2
 800209a:	b2da      	uxtb	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	227f      	movs	r2, #127	@ 0x7f
 80020a6:	4013      	ands	r3, r2
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	0d9b      	lsrs	r3, r3, #22
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2201      	movs	r2, #1
 80020b6:	4013      	ands	r3, r2
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d11a      	bne.n	80020fa <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 fadc 	bl	8002686 <RTC_Bcd2ToByte>
 80020ce:	0003      	movs	r3, r0
 80020d0:	001a      	movs	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	785b      	ldrb	r3, [r3, #1]
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 fad3 	bl	8002686 <RTC_Bcd2ToByte>
 80020e0:	0003      	movs	r3, r0
 80020e2:	001a      	movs	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	789b      	ldrb	r3, [r3, #2]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 faca 	bl	8002686 <RTC_Bcd2ToByte>
 80020f2:	0003      	movs	r3, r0
 80020f4:	001a      	movs	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	0018      	movs	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	b006      	add	sp, #24
 8002102:	bd80      	pop	{r7, pc}
 8002104:	007f7f7f 	.word	0x007f7f7f

08002108 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002108:	b5b0      	push	{r4, r5, r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	7f1b      	ldrb	r3, [r3, #28]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_RTC_SetDate+0x1c>
 8002120:	2302      	movs	r3, #2
 8002122:	e07a      	b.n	800221a <HAL_RTC_SetDate+0x112>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2202      	movs	r2, #2
 800212e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10e      	bne.n	8002154 <HAL_RTC_SetDate+0x4c>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	785b      	ldrb	r3, [r3, #1]
 800213a:	001a      	movs	r2, r3
 800213c:	2310      	movs	r3, #16
 800213e:	4013      	ands	r3, r2
 8002140:	d008      	beq.n	8002154 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	785b      	ldrb	r3, [r3, #1]
 8002146:	2210      	movs	r2, #16
 8002148:	4393      	bics	r3, r2
 800214a:	b2db      	uxtb	r3, r3
 800214c:	330a      	adds	r3, #10
 800214e:	b2da      	uxtb	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d11c      	bne.n	8002194 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	78db      	ldrb	r3, [r3, #3]
 800215e:	0018      	movs	r0, r3
 8002160:	f000 fa70 	bl	8002644 <RTC_ByteToBcd2>
 8002164:	0003      	movs	r3, r0
 8002166:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	785b      	ldrb	r3, [r3, #1]
 800216c:	0018      	movs	r0, r3
 800216e:	f000 fa69 	bl	8002644 <RTC_ByteToBcd2>
 8002172:	0003      	movs	r3, r0
 8002174:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002176:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	789b      	ldrb	r3, [r3, #2]
 800217c:	0018      	movs	r0, r3
 800217e:	f000 fa61 	bl	8002644 <RTC_ByteToBcd2>
 8002182:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002184:	0022      	movs	r2, r4
 8002186:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	e00e      	b.n	80021b2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	78db      	ldrb	r3, [r3, #3]
 8002198:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80021a0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80021a6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	22ca      	movs	r2, #202	@ 0xca
 80021b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2253      	movs	r2, #83	@ 0x53
 80021c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80021c2:	2513      	movs	r5, #19
 80021c4:	197c      	adds	r4, r7, r5
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 f9cf 	bl	800256c <RTC_EnterInitMode>
 80021ce:	0003      	movs	r3, r0
 80021d0:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80021d2:	0028      	movs	r0, r5
 80021d4:	183b      	adds	r3, r7, r0
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10c      	bne.n	80021f6 <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	4910      	ldr	r1, [pc, #64]	@ (8002224 <HAL_RTC_SetDate+0x11c>)
 80021e4:	400a      	ands	r2, r1
 80021e6:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80021e8:	183c      	adds	r4, r7, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f000 fa00 	bl	80025f2 <RTC_ExitInitMode>
 80021f2:	0003      	movs	r3, r0
 80021f4:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80021f6:	2313      	movs	r3, #19
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	22ff      	movs	r2, #255	@ 0xff
 800220c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	771a      	strb	r2, [r3, #28]

  return status;
 8002214:	2313      	movs	r3, #19
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	781b      	ldrb	r3, [r3, #0]
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b006      	add	sp, #24
 8002220:	bdb0      	pop	{r4, r5, r7, pc}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	00ffff3f 	.word	0x00ffff3f

08002228 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4a21      	ldr	r2, [pc, #132]	@ (80022c4 <HAL_RTC_GetDate+0x9c>)
 8002240:	4013      	ands	r3, r2
 8002242:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	0c1b      	lsrs	r3, r3, #16
 8002248:	b2da      	uxtb	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	b2db      	uxtb	r3, r3
 8002254:	221f      	movs	r2, #31
 8002256:	4013      	ands	r3, r2
 8002258:	b2da      	uxtb	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	223f      	movs	r2, #63	@ 0x3f
 8002264:	4013      	ands	r3, r2
 8002266:	b2da      	uxtb	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	0b5b      	lsrs	r3, r3, #13
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2207      	movs	r2, #7
 8002274:	4013      	ands	r3, r2
 8002276:	b2da      	uxtb	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d11a      	bne.n	80022b8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	78db      	ldrb	r3, [r3, #3]
 8002286:	0018      	movs	r0, r3
 8002288:	f000 f9fd 	bl	8002686 <RTC_Bcd2ToByte>
 800228c:	0003      	movs	r3, r0
 800228e:	001a      	movs	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	785b      	ldrb	r3, [r3, #1]
 8002298:	0018      	movs	r0, r3
 800229a:	f000 f9f4 	bl	8002686 <RTC_Bcd2ToByte>
 800229e:	0003      	movs	r3, r0
 80022a0:	001a      	movs	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	789b      	ldrb	r3, [r3, #2]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f000 f9eb 	bl	8002686 <RTC_Bcd2ToByte>
 80022b0:	0003      	movs	r3, r0
 80022b2:	001a      	movs	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b006      	add	sp, #24
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	00ffff3f 	.word	0x00ffff3f

080022c8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b089      	sub	sp, #36	@ 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80022d4:	4b75      	ldr	r3, [pc, #468]	@ (80024ac <HAL_RTC_SetAlarm_IT+0x1e4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	22fa      	movs	r2, #250	@ 0xfa
 80022da:	01d1      	lsls	r1, r2, #7
 80022dc:	0018      	movs	r0, r3
 80022de:	f7fd ff25 	bl	800012c <__udivsi3>
 80022e2:	0003      	movs	r3, r0
 80022e4:	001a      	movs	r2, r3
 80022e6:	0013      	movs	r3, r2
 80022e8:	015b      	lsls	r3, r3, #5
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	189b      	adds	r3, r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	7f1b      	ldrb	r3, [r3, #28]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_RTC_SetAlarm_IT+0x40>
 8002304:	2302      	movs	r3, #2
 8002306:	e0cd      	b.n	80024a4 <HAL_RTC_SetAlarm_IT+0x1dc>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2202      	movs	r2, #2
 8002312:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d136      	bne.n	8002388 <HAL_RTC_SetAlarm_IT+0xc0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2240      	movs	r2, #64	@ 0x40
 8002322:	4013      	ands	r3, r2
 8002324:	d102      	bne.n	800232c <HAL_RTC_SetAlarm_IT+0x64>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2200      	movs	r2, #0
 800232a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	0018      	movs	r0, r3
 8002332:	f000 f987 	bl	8002644 <RTC_ByteToBcd2>
 8002336:	0003      	movs	r3, r0
 8002338:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	0018      	movs	r0, r3
 8002340:	f000 f980 	bl	8002644 <RTC_ByteToBcd2>
 8002344:	0003      	movs	r3, r0
 8002346:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002348:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	789b      	ldrb	r3, [r3, #2]
 800234e:	0018      	movs	r0, r3
 8002350:	f000 f978 	bl	8002644 <RTC_ByteToBcd2>
 8002354:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002356:	0022      	movs	r2, r4
 8002358:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	78db      	ldrb	r3, [r3, #3]
 800235e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002360:	431a      	orrs	r2, r3
 8002362:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2220      	movs	r2, #32
 8002368:	5c9b      	ldrb	r3, [r3, r2]
 800236a:	0018      	movs	r0, r3
 800236c:	f000 f96a 	bl	8002644 <RTC_ByteToBcd2>
 8002370:	0003      	movs	r3, r0
 8002372:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8002374:	0022      	movs	r2, r4
 8002376:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800237c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002382:	4313      	orrs	r3, r2
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	e022      	b.n	80023ce <HAL_RTC_SetAlarm_IT+0x106>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2240      	movs	r2, #64	@ 0x40
 8002390:	4013      	ands	r3, r2
 8002392:	d102      	bne.n	800239a <HAL_RTC_SetAlarm_IT+0xd2>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2200      	movs	r2, #0
 8002398:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	785b      	ldrb	r3, [r3, #1]
 80023a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80023a6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80023ac:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	78db      	ldrb	r3, [r3, #3]
 80023b2:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80023b4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2120      	movs	r1, #32
 80023ba:	5c5b      	ldrb	r3, [r3, r1]
 80023bc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 80023be:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80023c4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	22ca      	movs	r2, #202	@ 0xca
 80023e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2253      	movs	r2, #83	@ 0x53
 80023e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	492e      	ldr	r1, [pc, #184]	@ (80024b0 <HAL_RTC_SetAlarm_IT+0x1e8>)
 80023f6:	400a      	ands	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	22ff      	movs	r2, #255	@ 0xff
 8002402:	401a      	ands	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	492a      	ldr	r1, [pc, #168]	@ (80024b4 <HAL_RTC_SetAlarm_IT+0x1ec>)
 800240a:	430a      	orrs	r2, r1
 800240c:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	3b01      	subs	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10b      	bne.n	8002432 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	22ff      	movs	r2, #255	@ 0xff
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2203      	movs	r2, #3
 8002426:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e038      	b.n	80024a4 <HAL_RTC_SetAlarm_IT+0x1dc>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	4013      	ands	r3, r2
 800243c:	d0e7      	beq.n	800240e <HAL_RTC_SetAlarm_IT+0x146>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2180      	movs	r1, #128	@ 0x80
 800245a:	0049      	lsls	r1, r1, #1
 800245c:	430a      	orrs	r2, r1
 800245e:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2180      	movs	r1, #128	@ 0x80
 800246c:	0149      	lsls	r1, r1, #5
 800246e:	430a      	orrs	r2, r1
 8002470:	609a      	str	r2, [r3, #8]

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002472:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8002478:	2180      	movs	r1, #128	@ 0x80
 800247a:	0289      	lsls	r1, r1, #10
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002480:	4b0d      	ldr	r3, [pc, #52]	@ (80024b8 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8002486:	2180      	movs	r1, #128	@ 0x80
 8002488:	0289      	lsls	r1, r1, #10
 800248a:	430a      	orrs	r2, r1
 800248c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	22ff      	movs	r2, #255	@ 0xff
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b009      	add	sp, #36	@ 0x24
 80024aa:	bd90      	pop	{r4, r7, pc}
 80024ac:	20000000 	.word	0x20000000
 80024b0:	fffffeff 	.word	0xfffffeff
 80024b4:	fffffe7f 	.word	0xfffffe7f
 80024b8:	40010400 	.word	0x40010400

080024bc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80024c4:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <HAL_RTC_AlarmIRQHandler+0x58>)
 80024c6:	2280      	movs	r2, #128	@ 0x80
 80024c8:	0292      	lsls	r2, r2, #10
 80024ca:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	2380      	movs	r3, #128	@ 0x80
 80024d4:	015b      	lsls	r3, r3, #5
 80024d6:	4013      	ands	r3, r2
 80024d8:	d014      	beq.n	8002504 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	2380      	movs	r3, #128	@ 0x80
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	d00d      	beq.n	8002504 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	22ff      	movs	r2, #255	@ 0xff
 80024f0:	401a      	ands	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4908      	ldr	r1, [pc, #32]	@ (8002518 <HAL_RTC_AlarmIRQHandler+0x5c>)
 80024f8:	430a      	orrs	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	0018      	movs	r0, r3
 8002500:	f7fe f94e 	bl	80007a0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	775a      	strb	r2, [r3, #29]
}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	46bd      	mov	sp, r7
 800250e:	b002      	add	sp, #8
 8002510:	bd80      	pop	{r7, pc}
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	40010400 	.word	0x40010400
 8002518:	fffffe7f 	.word	0xfffffe7f

0800251c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0e      	ldr	r2, [pc, #56]	@ (8002568 <HAL_RTC_WaitForSynchro+0x4c>)
 800252e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002530:	f7fe fbaa 	bl	8000c88 <HAL_GetTick>
 8002534:	0003      	movs	r3, r0
 8002536:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002538:	e00a      	b.n	8002550 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800253a:	f7fe fba5 	bl	8000c88 <HAL_GetTick>
 800253e:	0002      	movs	r2, r0
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1ad2      	subs	r2, r2, r3
 8002544:	23fa      	movs	r3, #250	@ 0xfa
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	429a      	cmp	r2, r3
 800254a:	d901      	bls.n	8002550 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e006      	b.n	800255e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	4013      	ands	r3, r2
 800255a:	d0ee      	beq.n	800253a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	0018      	movs	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	b004      	add	sp, #16
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	0001fd5d 	.word	0x0001fd5d

0800256c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002578:	230f      	movs	r3, #15
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2240      	movs	r2, #64	@ 0x40
 8002588:	4013      	ands	r3, r2
 800258a:	d12b      	bne.n	80025e4 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2180      	movs	r1, #128	@ 0x80
 8002598:	430a      	orrs	r2, r1
 800259a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800259c:	f7fe fb74 	bl	8000c88 <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80025a4:	e013      	b.n	80025ce <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80025a6:	f7fe fb6f 	bl	8000c88 <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	1ad2      	subs	r2, r2, r3
 80025b0:	200f      	movs	r0, #15
 80025b2:	183b      	adds	r3, r7, r0
 80025b4:	1839      	adds	r1, r7, r0
 80025b6:	7809      	ldrb	r1, [r1, #0]
 80025b8:	7019      	strb	r1, [r3, #0]
 80025ba:	23fa      	movs	r3, #250	@ 0xfa
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	429a      	cmp	r2, r3
 80025c0:	d905      	bls.n	80025ce <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2204      	movs	r2, #4
 80025c6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80025c8:	183b      	adds	r3, r7, r0
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2240      	movs	r2, #64	@ 0x40
 80025d6:	4013      	ands	r3, r2
 80025d8:	d104      	bne.n	80025e4 <RTC_EnterInitMode+0x78>
 80025da:	230f      	movs	r3, #15
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d1e0      	bne.n	80025a6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80025e4:	230f      	movs	r3, #15
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	781b      	ldrb	r3, [r3, #0]
}
 80025ea:	0018      	movs	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b004      	add	sp, #16
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80025f2:	b590      	push	{r4, r7, lr}
 80025f4:	b085      	sub	sp, #20
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025fa:	240f      	movs	r4, #15
 80025fc:	193b      	adds	r3, r7, r4
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2180      	movs	r1, #128	@ 0x80
 800260e:	438a      	bics	r2, r1
 8002610:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2220      	movs	r2, #32
 800261a:	4013      	ands	r3, r2
 800261c:	d10b      	bne.n	8002636 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0018      	movs	r0, r3
 8002622:	f7ff ff7b 	bl	800251c <HAL_RTC_WaitForSynchro>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d005      	beq.n	8002636 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2204      	movs	r2, #4
 800262e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002630:	193b      	adds	r3, r7, r4
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002636:	230f      	movs	r3, #15
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	781b      	ldrb	r3, [r3, #0]
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b005      	add	sp, #20
 8002642:	bd90      	pop	{r4, r7, pc}

08002644 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	0002      	movs	r2, r0
 800264c:	1dfb      	adds	r3, r7, #7
 800264e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002654:	e007      	b.n	8002666 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3301      	adds	r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800265c:	1dfb      	adds	r3, r7, #7
 800265e:	1dfa      	adds	r2, r7, #7
 8002660:	7812      	ldrb	r2, [r2, #0]
 8002662:	3a0a      	subs	r2, #10
 8002664:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002666:	1dfb      	adds	r3, r7, #7
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b09      	cmp	r3, #9
 800266c:	d8f3      	bhi.n	8002656 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	b2da      	uxtb	r2, r3
 8002676:	1dfb      	adds	r3, r7, #7
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	b2db      	uxtb	r3, r3
}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b004      	add	sp, #16
 8002684:	bd80      	pop	{r7, pc}

08002686 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	0002      	movs	r2, r0
 800268e:	1dfb      	adds	r3, r7, #7
 8002690:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002696:	1dfb      	adds	r3, r7, #7
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	b2db      	uxtb	r3, r3
 800269e:	001a      	movs	r2, r3
 80026a0:	0013      	movs	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	189b      	adds	r3, r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	1dfb      	adds	r3, r7, #7
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	210f      	movs	r1, #15
 80026b4:	400b      	ands	r3, r1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	18d3      	adds	r3, r2, r3
 80026ba:	b2db      	uxtb	r3, r3
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b004      	add	sp, #16
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e042      	b.n	800275c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	223d      	movs	r2, #61	@ 0x3d
 80026da:	5c9b      	ldrb	r3, [r3, r2]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d107      	bne.n	80026f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	223c      	movs	r2, #60	@ 0x3c
 80026e6:	2100      	movs	r1, #0
 80026e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7fe f921 	bl	8000934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	223d      	movs	r2, #61	@ 0x3d
 80026f6:	2102      	movs	r1, #2
 80026f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	0019      	movs	r1, r3
 8002704:	0010      	movs	r0, r2
 8002706:	f000 fcb7 	bl	8003078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2246      	movs	r2, #70	@ 0x46
 800270e:	2101      	movs	r1, #1
 8002710:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	223e      	movs	r2, #62	@ 0x3e
 8002716:	2101      	movs	r1, #1
 8002718:	5499      	strb	r1, [r3, r2]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	223f      	movs	r2, #63	@ 0x3f
 800271e:	2101      	movs	r1, #1
 8002720:	5499      	strb	r1, [r3, r2]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2240      	movs	r2, #64	@ 0x40
 8002726:	2101      	movs	r1, #1
 8002728:	5499      	strb	r1, [r3, r2]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2241      	movs	r2, #65	@ 0x41
 800272e:	2101      	movs	r1, #1
 8002730:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2242      	movs	r2, #66	@ 0x42
 8002736:	2101      	movs	r1, #1
 8002738:	5499      	strb	r1, [r3, r2]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2243      	movs	r2, #67	@ 0x43
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2244      	movs	r2, #68	@ 0x44
 8002746:	2101      	movs	r1, #1
 8002748:	5499      	strb	r1, [r3, r2]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2245      	movs	r2, #69	@ 0x45
 800274e:	2101      	movs	r1, #1
 8002750:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	223d      	movs	r2, #61	@ 0x3d
 8002756:	2101      	movs	r1, #1
 8002758:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b002      	add	sp, #8
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e042      	b.n	80027fc <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	223d      	movs	r2, #61	@ 0x3d
 800277a:	5c9b      	ldrb	r3, [r3, r2]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d107      	bne.n	8002792 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	223c      	movs	r2, #60	@ 0x3c
 8002786:	2100      	movs	r1, #0
 8002788:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	0018      	movs	r0, r3
 800278e:	f000 f839 	bl	8002804 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	223d      	movs	r2, #61	@ 0x3d
 8002796:	2102      	movs	r1, #2
 8002798:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3304      	adds	r3, #4
 80027a2:	0019      	movs	r1, r3
 80027a4:	0010      	movs	r0, r2
 80027a6:	f000 fc67 	bl	8003078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2246      	movs	r2, #70	@ 0x46
 80027ae:	2101      	movs	r1, #1
 80027b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	223e      	movs	r2, #62	@ 0x3e
 80027b6:	2101      	movs	r1, #1
 80027b8:	5499      	strb	r1, [r3, r2]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	223f      	movs	r2, #63	@ 0x3f
 80027be:	2101      	movs	r1, #1
 80027c0:	5499      	strb	r1, [r3, r2]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2240      	movs	r2, #64	@ 0x40
 80027c6:	2101      	movs	r1, #1
 80027c8:	5499      	strb	r1, [r3, r2]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2241      	movs	r2, #65	@ 0x41
 80027ce:	2101      	movs	r1, #1
 80027d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2242      	movs	r2, #66	@ 0x42
 80027d6:	2101      	movs	r1, #1
 80027d8:	5499      	strb	r1, [r3, r2]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2243      	movs	r2, #67	@ 0x43
 80027de:	2101      	movs	r1, #1
 80027e0:	5499      	strb	r1, [r3, r2]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2244      	movs	r2, #68	@ 0x44
 80027e6:	2101      	movs	r1, #1
 80027e8:	5499      	strb	r1, [r3, r2]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2245      	movs	r2, #69	@ 0x45
 80027ee:	2101      	movs	r1, #1
 80027f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	223d      	movs	r2, #61	@ 0x3d
 80027f6:	2101      	movs	r1, #1
 80027f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	0018      	movs	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	b002      	add	sp, #8
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800280c:	46c0      	nop			@ (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800281e:	230f      	movs	r3, #15
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d108      	bne.n	800283e <HAL_TIM_OC_Start_IT+0x2a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	223e      	movs	r2, #62	@ 0x3e
 8002830:	5c9b      	ldrb	r3, [r3, r2]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	1e5a      	subs	r2, r3, #1
 8002838:	4193      	sbcs	r3, r2
 800283a:	b2db      	uxtb	r3, r3
 800283c:	e01f      	b.n	800287e <HAL_TIM_OC_Start_IT+0x6a>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b04      	cmp	r3, #4
 8002842:	d108      	bne.n	8002856 <HAL_TIM_OC_Start_IT+0x42>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	223f      	movs	r2, #63	@ 0x3f
 8002848:	5c9b      	ldrb	r3, [r3, r2]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	1e5a      	subs	r2, r3, #1
 8002850:	4193      	sbcs	r3, r2
 8002852:	b2db      	uxtb	r3, r3
 8002854:	e013      	b.n	800287e <HAL_TIM_OC_Start_IT+0x6a>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d108      	bne.n	800286e <HAL_TIM_OC_Start_IT+0x5a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2240      	movs	r2, #64	@ 0x40
 8002860:	5c9b      	ldrb	r3, [r3, r2]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	1e5a      	subs	r2, r3, #1
 8002868:	4193      	sbcs	r3, r2
 800286a:	b2db      	uxtb	r3, r3
 800286c:	e007      	b.n	800287e <HAL_TIM_OC_Start_IT+0x6a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2241      	movs	r2, #65	@ 0x41
 8002872:	5c9b      	ldrb	r3, [r3, r2]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	1e5a      	subs	r2, r3, #1
 800287a:	4193      	sbcs	r3, r2
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0b7      	b.n	80029f6 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d104      	bne.n	8002896 <HAL_TIM_OC_Start_IT+0x82>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	223e      	movs	r2, #62	@ 0x3e
 8002890:	2102      	movs	r1, #2
 8002892:	5499      	strb	r1, [r3, r2]
 8002894:	e013      	b.n	80028be <HAL_TIM_OC_Start_IT+0xaa>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b04      	cmp	r3, #4
 800289a:	d104      	bne.n	80028a6 <HAL_TIM_OC_Start_IT+0x92>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	223f      	movs	r2, #63	@ 0x3f
 80028a0:	2102      	movs	r1, #2
 80028a2:	5499      	strb	r1, [r3, r2]
 80028a4:	e00b      	b.n	80028be <HAL_TIM_OC_Start_IT+0xaa>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d104      	bne.n	80028b6 <HAL_TIM_OC_Start_IT+0xa2>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2240      	movs	r2, #64	@ 0x40
 80028b0:	2102      	movs	r1, #2
 80028b2:	5499      	strb	r1, [r3, r2]
 80028b4:	e003      	b.n	80028be <HAL_TIM_OC_Start_IT+0xaa>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2241      	movs	r2, #65	@ 0x41
 80028ba:	2102      	movs	r1, #2
 80028bc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d02a      	beq.n	800291a <HAL_TIM_OC_Start_IT+0x106>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d830      	bhi.n	800292c <HAL_TIM_OC_Start_IT+0x118>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d01b      	beq.n	8002908 <HAL_TIM_OC_Start_IT+0xf4>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d82a      	bhi.n	800292c <HAL_TIM_OC_Start_IT+0x118>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_TIM_OC_Start_IT+0xd0>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d009      	beq.n	80028f6 <HAL_TIM_OC_Start_IT+0xe2>
 80028e2:	e023      	b.n	800292c <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2102      	movs	r1, #2
 80028f0:	430a      	orrs	r2, r1
 80028f2:	60da      	str	r2, [r3, #12]
      break;
 80028f4:	e01f      	b.n	8002936 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2104      	movs	r1, #4
 8002902:	430a      	orrs	r2, r1
 8002904:	60da      	str	r2, [r3, #12]
      break;
 8002906:	e016      	b.n	8002936 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2108      	movs	r1, #8
 8002914:	430a      	orrs	r2, r1
 8002916:	60da      	str	r2, [r3, #12]
      break;
 8002918:	e00d      	b.n	8002936 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2110      	movs	r1, #16
 8002926:	430a      	orrs	r2, r1
 8002928:	60da      	str	r2, [r3, #12]
      break;
 800292a:	e004      	b.n	8002936 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 800292c:	230f      	movs	r3, #15
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
      break;
 8002934:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002936:	230f      	movs	r3, #15
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d157      	bne.n	80029f0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6839      	ldr	r1, [r7, #0]
 8002946:	2201      	movs	r2, #1
 8002948:	0018      	movs	r0, r3
 800294a:	f000 feb9 	bl	80036c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a2b      	ldr	r2, [pc, #172]	@ (8002a00 <HAL_TIM_OC_Start_IT+0x1ec>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00e      	beq.n	8002976 <HAL_TIM_OC_Start_IT+0x162>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a29      	ldr	r2, [pc, #164]	@ (8002a04 <HAL_TIM_OC_Start_IT+0x1f0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d009      	beq.n	8002976 <HAL_TIM_OC_Start_IT+0x162>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a28      	ldr	r2, [pc, #160]	@ (8002a08 <HAL_TIM_OC_Start_IT+0x1f4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d004      	beq.n	8002976 <HAL_TIM_OC_Start_IT+0x162>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a26      	ldr	r2, [pc, #152]	@ (8002a0c <HAL_TIM_OC_Start_IT+0x1f8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d101      	bne.n	800297a <HAL_TIM_OC_Start_IT+0x166>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_TIM_OC_Start_IT+0x168>
 800297a:	2300      	movs	r3, #0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2180      	movs	r1, #128	@ 0x80
 800298c:	0209      	lsls	r1, r1, #8
 800298e:	430a      	orrs	r2, r1
 8002990:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1a      	ldr	r2, [pc, #104]	@ (8002a00 <HAL_TIM_OC_Start_IT+0x1ec>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00f      	beq.n	80029bc <HAL_TIM_OC_Start_IT+0x1a8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	2380      	movs	r3, #128	@ 0x80
 80029a2:	05db      	lsls	r3, r3, #23
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d009      	beq.n	80029bc <HAL_TIM_OC_Start_IT+0x1a8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a18      	ldr	r2, [pc, #96]	@ (8002a10 <HAL_TIM_OC_Start_IT+0x1fc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d004      	beq.n	80029bc <HAL_TIM_OC_Start_IT+0x1a8>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a13      	ldr	r2, [pc, #76]	@ (8002a04 <HAL_TIM_OC_Start_IT+0x1f0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d111      	bne.n	80029e0 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2207      	movs	r2, #7
 80029c4:	4013      	ands	r3, r2
 80029c6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d010      	beq.n	80029f0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	430a      	orrs	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029de:	e007      	b.n	80029f0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2101      	movs	r1, #1
 80029ec:	430a      	orrs	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80029f0:	230f      	movs	r3, #15
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	781b      	ldrb	r3, [r3, #0]
}
 80029f6:	0018      	movs	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b004      	add	sp, #16
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	46c0      	nop			@ (mov r8, r8)
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	40014000 	.word	0x40014000
 8002a08:	40014400 	.word	0x40014400
 8002a0c:	40014800 	.word	0x40014800
 8002a10:	40000400 	.word	0x40000400

08002a14 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1e:	230f      	movs	r3, #15
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b0c      	cmp	r3, #12
 8002a2a:	d02a      	beq.n	8002a82 <HAL_TIM_OC_Stop_IT+0x6e>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	d830      	bhi.n	8002a94 <HAL_TIM_OC_Stop_IT+0x80>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d01b      	beq.n	8002a70 <HAL_TIM_OC_Stop_IT+0x5c>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d82a      	bhi.n	8002a94 <HAL_TIM_OC_Stop_IT+0x80>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_TIM_OC_Stop_IT+0x38>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d009      	beq.n	8002a5e <HAL_TIM_OC_Stop_IT+0x4a>
 8002a4a:	e023      	b.n	8002a94 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2102      	movs	r1, #2
 8002a58:	438a      	bics	r2, r1
 8002a5a:	60da      	str	r2, [r3, #12]
      break;
 8002a5c:	e01f      	b.n	8002a9e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2104      	movs	r1, #4
 8002a6a:	438a      	bics	r2, r1
 8002a6c:	60da      	str	r2, [r3, #12]
      break;
 8002a6e:	e016      	b.n	8002a9e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2108      	movs	r1, #8
 8002a7c:	438a      	bics	r2, r1
 8002a7e:	60da      	str	r2, [r3, #12]
      break;
 8002a80:	e00d      	b.n	8002a9e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2110      	movs	r1, #16
 8002a8e:	438a      	bics	r2, r1
 8002a90:	60da      	str	r2, [r3, #12]
      break;
 8002a92:	e004      	b.n	8002a9e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8002a94:	230f      	movs	r3, #15
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
      break;
 8002a9c:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002a9e:	230f      	movs	r3, #15
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d000      	beq.n	8002aaa <HAL_TIM_OC_Stop_IT+0x96>
 8002aa8:	e063      	b.n	8002b72 <HAL_TIM_OC_Stop_IT+0x15e>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6839      	ldr	r1, [r7, #0]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f000 fe04 	bl	80036c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a30      	ldr	r2, [pc, #192]	@ (8002b80 <HAL_TIM_OC_Stop_IT+0x16c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00e      	beq.n	8002ae0 <HAL_TIM_OC_Stop_IT+0xcc>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8002b84 <HAL_TIM_OC_Stop_IT+0x170>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_TIM_OC_Stop_IT+0xcc>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b88 <HAL_TIM_OC_Stop_IT+0x174>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_TIM_OC_Stop_IT+0xcc>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a2c      	ldr	r2, [pc, #176]	@ (8002b8c <HAL_TIM_OC_Stop_IT+0x178>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <HAL_TIM_OC_Stop_IT+0xd0>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_TIM_OC_Stop_IT+0xd2>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d013      	beq.n	8002b12 <HAL_TIM_OC_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4a27      	ldr	r2, [pc, #156]	@ (8002b90 <HAL_TIM_OC_Stop_IT+0x17c>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	d10d      	bne.n	8002b12 <HAL_TIM_OC_Stop_IT+0xfe>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4a25      	ldr	r2, [pc, #148]	@ (8002b94 <HAL_TIM_OC_Stop_IT+0x180>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	d107      	bne.n	8002b12 <HAL_TIM_OC_Stop_IT+0xfe>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4922      	ldr	r1, [pc, #136]	@ (8002b98 <HAL_TIM_OC_Stop_IT+0x184>)
 8002b0e:	400a      	ands	r2, r1
 8002b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4a1d      	ldr	r2, [pc, #116]	@ (8002b90 <HAL_TIM_OC_Stop_IT+0x17c>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d10d      	bne.n	8002b3a <HAL_TIM_OC_Stop_IT+0x126>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4a1b      	ldr	r2, [pc, #108]	@ (8002b94 <HAL_TIM_OC_Stop_IT+0x180>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	d107      	bne.n	8002b3a <HAL_TIM_OC_Stop_IT+0x126>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2101      	movs	r1, #1
 8002b36:	438a      	bics	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_OC_Stop_IT+0x136>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	223e      	movs	r2, #62	@ 0x3e
 8002b44:	2101      	movs	r1, #1
 8002b46:	5499      	strb	r1, [r3, r2]
 8002b48:	e013      	b.n	8002b72 <HAL_TIM_OC_Stop_IT+0x15e>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d104      	bne.n	8002b5a <HAL_TIM_OC_Stop_IT+0x146>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	223f      	movs	r2, #63	@ 0x3f
 8002b54:	2101      	movs	r1, #1
 8002b56:	5499      	strb	r1, [r3, r2]
 8002b58:	e00b      	b.n	8002b72 <HAL_TIM_OC_Stop_IT+0x15e>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d104      	bne.n	8002b6a <HAL_TIM_OC_Stop_IT+0x156>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2240      	movs	r2, #64	@ 0x40
 8002b64:	2101      	movs	r1, #1
 8002b66:	5499      	strb	r1, [r3, r2]
 8002b68:	e003      	b.n	8002b72 <HAL_TIM_OC_Stop_IT+0x15e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2241      	movs	r2, #65	@ 0x41
 8002b6e:	2101      	movs	r1, #1
 8002b70:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002b72:	230f      	movs	r3, #15
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	781b      	ldrb	r3, [r3, #0]
}
 8002b78:	0018      	movs	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b004      	add	sp, #16
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40012c00 	.word	0x40012c00
 8002b84:	40014000 	.word	0x40014000
 8002b88:	40014400 	.word	0x40014400
 8002b8c:	40014800 	.word	0x40014800
 8002b90:	00001111 	.word	0x00001111
 8002b94:	00000444 	.word	0x00000444
 8002b98:	ffff7fff 	.word	0xffff7fff

08002b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d021      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d01d      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2203      	movs	r2, #3
 8002bca:	4252      	negs	r2, r2
 8002bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2203      	movs	r2, #3
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 fa30 	bl	8003048 <HAL_TIM_IC_CaptureCallback>
 8002be8:	e007      	b.n	8002bfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7fd fdb1 	bl	8000754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f000 fa2f 	bl	8003058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2204      	movs	r2, #4
 8002c04:	4013      	ands	r3, r2
 8002c06:	d022      	beq.n	8002c4e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d01e      	beq.n	8002c4e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2205      	movs	r2, #5
 8002c16:	4252      	negs	r2, r2
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	23c0      	movs	r3, #192	@ 0xc0
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	0018      	movs	r0, r3
 8002c32:	f000 fa09 	bl	8003048 <HAL_TIM_IC_CaptureCallback>
 8002c36:	e007      	b.n	8002c48 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f7fd fd8a 	bl	8000754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	0018      	movs	r0, r3
 8002c44:	f000 fa08 	bl	8003058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2208      	movs	r2, #8
 8002c52:	4013      	ands	r3, r2
 8002c54:	d021      	beq.n	8002c9a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2208      	movs	r2, #8
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d01d      	beq.n	8002c9a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2209      	movs	r2, #9
 8002c64:	4252      	negs	r2, r2
 8002c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	2203      	movs	r2, #3
 8002c76:	4013      	ands	r3, r2
 8002c78:	d004      	beq.n	8002c84 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f000 f9e3 	bl	8003048 <HAL_TIM_IC_CaptureCallback>
 8002c82:	e007      	b.n	8002c94 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7fd fd64 	bl	8000754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 f9e2 	bl	8003058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d022      	beq.n	8002ce8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2210      	movs	r2, #16
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d01e      	beq.n	8002ce8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2211      	movs	r2, #17
 8002cb0:	4252      	negs	r2, r2
 8002cb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	23c0      	movs	r3, #192	@ 0xc0
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d004      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f000 f9bc 	bl	8003048 <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e007      	b.n	8002ce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f7fd fd3d 	bl	8000754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f000 f9bb 	bl	8003058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2201      	movs	r2, #1
 8002cec:	4013      	ands	r3, r2
 8002cee:	d00c      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d008      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	4252      	negs	r2, r2
 8002d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 f997 	bl	8003038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2280      	movs	r2, #128	@ 0x80
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d00c      	beq.n	8002d2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2280      	movs	r2, #128	@ 0x80
 8002d16:	4013      	ands	r3, r2
 8002d18:	d008      	beq.n	8002d2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2281      	movs	r2, #129	@ 0x81
 8002d20:	4252      	negs	r2, r2
 8002d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 fd54 	bl	80037d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2240      	movs	r2, #64	@ 0x40
 8002d30:	4013      	ands	r3, r2
 8002d32:	d00c      	beq.n	8002d4e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2240      	movs	r2, #64	@ 0x40
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d008      	beq.n	8002d4e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2241      	movs	r2, #65	@ 0x41
 8002d42:	4252      	negs	r2, r2
 8002d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 f98d 	bl	8003068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2220      	movs	r2, #32
 8002d52:	4013      	ands	r3, r2
 8002d54:	d00c      	beq.n	8002d70 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d008      	beq.n	8002d70 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2221      	movs	r2, #33	@ 0x21
 8002d64:	4252      	negs	r2, r2
 8002d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 fd2a 	bl	80037c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d70:	46c0      	nop			@ (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b004      	add	sp, #16
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d84:	2317      	movs	r3, #23
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	223c      	movs	r2, #60	@ 0x3c
 8002d90:	5c9b      	ldrb	r3, [r3, r2]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_TIM_OC_ConfigChannel+0x22>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e042      	b.n	8002e20 <HAL_TIM_OC_ConfigChannel+0xa8>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	223c      	movs	r2, #60	@ 0x3c
 8002d9e:	2101      	movs	r1, #1
 8002da0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	d027      	beq.n	8002df8 <HAL_TIM_OC_ConfigChannel+0x80>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d82c      	bhi.n	8002e08 <HAL_TIM_OC_ConfigChannel+0x90>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d019      	beq.n	8002de8 <HAL_TIM_OC_ConfigChannel+0x70>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d826      	bhi.n	8002e08 <HAL_TIM_OC_ConfigChannel+0x90>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_TIM_OC_ConfigChannel+0x50>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d008      	beq.n	8002dd8 <HAL_TIM_OC_ConfigChannel+0x60>
 8002dc6:	e01f      	b.n	8002e08 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	0011      	movs	r1, r2
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f000 f9df 	bl	8003194 <TIM_OC1_SetConfig>
      break;
 8002dd6:	e01c      	b.n	8002e12 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	0011      	movs	r1, r2
 8002de0:	0018      	movs	r0, r3
 8002de2:	f000 fa5f 	bl	80032a4 <TIM_OC2_SetConfig>
      break;
 8002de6:	e014      	b.n	8002e12 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	0011      	movs	r1, r2
 8002df0:	0018      	movs	r0, r3
 8002df2:	f000 fadb 	bl	80033ac <TIM_OC3_SetConfig>
      break;
 8002df6:	e00c      	b.n	8002e12 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	0011      	movs	r1, r2
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 fb59 	bl	80034b8 <TIM_OC4_SetConfig>
      break;
 8002e06:	e004      	b.n	8002e12 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8002e08:	2317      	movs	r3, #23
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
      break;
 8002e10:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	223c      	movs	r2, #60	@ 0x3c
 8002e16:	2100      	movs	r1, #0
 8002e18:	5499      	strb	r1, [r3, r2]

  return status;
 8002e1a:	2317      	movs	r3, #23
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	781b      	ldrb	r3, [r3, #0]
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b006      	add	sp, #24
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e32:	230f      	movs	r3, #15
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	223c      	movs	r2, #60	@ 0x3c
 8002e3e:	5c9b      	ldrb	r3, [r3, r2]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_TIM_ConfigClockSource+0x20>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e0bc      	b.n	8002fc2 <HAL_TIM_ConfigClockSource+0x19a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	223c      	movs	r2, #60	@ 0x3c
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	223d      	movs	r2, #61	@ 0x3d
 8002e54:	2102      	movs	r1, #2
 8002e56:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2277      	movs	r2, #119	@ 0x77
 8002e64:	4393      	bics	r3, r2
 8002e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4a58      	ldr	r2, [pc, #352]	@ (8002fcc <HAL_TIM_ConfigClockSource+0x1a4>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2280      	movs	r2, #128	@ 0x80
 8002e7e:	0192      	lsls	r2, r2, #6
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d040      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0xde>
 8002e84:	2280      	movs	r2, #128	@ 0x80
 8002e86:	0192      	lsls	r2, r2, #6
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d900      	bls.n	8002e8e <HAL_TIM_ConfigClockSource+0x66>
 8002e8c:	e088      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x178>
 8002e8e:	2280      	movs	r2, #128	@ 0x80
 8002e90:	0152      	lsls	r2, r2, #5
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d100      	bne.n	8002e98 <HAL_TIM_ConfigClockSource+0x70>
 8002e96:	e088      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x182>
 8002e98:	2280      	movs	r2, #128	@ 0x80
 8002e9a:	0152      	lsls	r2, r2, #5
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d900      	bls.n	8002ea2 <HAL_TIM_ConfigClockSource+0x7a>
 8002ea0:	e07e      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x178>
 8002ea2:	2b70      	cmp	r3, #112	@ 0x70
 8002ea4:	d018      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0xb0>
 8002ea6:	d900      	bls.n	8002eaa <HAL_TIM_ConfigClockSource+0x82>
 8002ea8:	e07a      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x178>
 8002eaa:	2b60      	cmp	r3, #96	@ 0x60
 8002eac:	d04f      	beq.n	8002f4e <HAL_TIM_ConfigClockSource+0x126>
 8002eae:	d900      	bls.n	8002eb2 <HAL_TIM_ConfigClockSource+0x8a>
 8002eb0:	e076      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x178>
 8002eb2:	2b50      	cmp	r3, #80	@ 0x50
 8002eb4:	d03b      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x106>
 8002eb6:	d900      	bls.n	8002eba <HAL_TIM_ConfigClockSource+0x92>
 8002eb8:	e072      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x178>
 8002eba:	2b40      	cmp	r3, #64	@ 0x40
 8002ebc:	d057      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x146>
 8002ebe:	d900      	bls.n	8002ec2 <HAL_TIM_ConfigClockSource+0x9a>
 8002ec0:	e06e      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x178>
 8002ec2:	2b30      	cmp	r3, #48	@ 0x30
 8002ec4:	d063      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x166>
 8002ec6:	d86b      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x178>
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	d060      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x166>
 8002ecc:	d868      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x178>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d05d      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x166>
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	d05b      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x166>
 8002ed6:	e063      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ee8:	f000 fbca 	bl	8003680 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2277      	movs	r2, #119	@ 0x77
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	609a      	str	r2, [r3, #8]
      break;
 8002f04:	e052      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f16:	f000 fbb3 	bl	8003680 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2180      	movs	r1, #128	@ 0x80
 8002f26:	01c9      	lsls	r1, r1, #7
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	609a      	str	r2, [r3, #8]
      break;
 8002f2c:	e03e      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f3a:	001a      	movs	r2, r3
 8002f3c:	f000 fb26 	bl	800358c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2150      	movs	r1, #80	@ 0x50
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 fb80 	bl	800364c <TIM_ITRx_SetConfig>
      break;
 8002f4c:	e02e      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f5a:	001a      	movs	r2, r3
 8002f5c:	f000 fb44 	bl	80035e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2160      	movs	r1, #96	@ 0x60
 8002f66:	0018      	movs	r0, r3
 8002f68:	f000 fb70 	bl	800364c <TIM_ITRx_SetConfig>
      break;
 8002f6c:	e01e      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	f000 fb06 	bl	800358c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2140      	movs	r1, #64	@ 0x40
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 fb60 	bl	800364c <TIM_ITRx_SetConfig>
      break;
 8002f8c:	e00e      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	0019      	movs	r1, r3
 8002f98:	0010      	movs	r0, r2
 8002f9a:	f000 fb57 	bl	800364c <TIM_ITRx_SetConfig>
      break;
 8002f9e:	e005      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002fa0:	230f      	movs	r3, #15
 8002fa2:	18fb      	adds	r3, r7, r3
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	701a      	strb	r2, [r3, #0]
      break;
 8002fa8:	e000      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002faa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	223d      	movs	r2, #61	@ 0x3d
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	223c      	movs	r2, #60	@ 0x3c
 8002fb8:	2100      	movs	r1, #0
 8002fba:	5499      	strb	r1, [r3, r2]

  return status;
 8002fbc:	230f      	movs	r3, #15
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	781b      	ldrb	r3, [r3, #0]
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	46c0      	nop			@ (mov r8, r8)
 8002fcc:	ffff00ff 	.word	0xffff00ff

08002fd0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b0c      	cmp	r3, #12
 8002fe2:	d01e      	beq.n	8003022 <HAL_TIM_ReadCapturedValue+0x52>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d820      	bhi.n	800302c <HAL_TIM_ReadCapturedValue+0x5c>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d013      	beq.n	8003018 <HAL_TIM_ReadCapturedValue+0x48>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d81a      	bhi.n	800302c <HAL_TIM_ReadCapturedValue+0x5c>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_TIM_ReadCapturedValue+0x34>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d005      	beq.n	800300e <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8003002:	e013      	b.n	800302c <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300a:	60fb      	str	r3, [r7, #12]
      break;
 800300c:	e00f      	b.n	800302e <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003014:	60fb      	str	r3, [r7, #12]
      break;
 8003016:	e00a      	b.n	800302e <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301e:	60fb      	str	r3, [r7, #12]
      break;
 8003020:	e005      	b.n	800302e <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	60fb      	str	r3, [r7, #12]
      break;
 800302a:	e000      	b.n	800302e <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800302c:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800302e:	68fb      	ldr	r3, [r7, #12]
}
 8003030:	0018      	movs	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	b004      	add	sp, #16
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003040:	46c0      	nop			@ (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b002      	add	sp, #8
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003050:	46c0      	nop			@ (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	b002      	add	sp, #8
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003060:	46c0      	nop			@ (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003070:	46c0      	nop			@ (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b002      	add	sp, #8
 8003076:	bd80      	pop	{r7, pc}

08003078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3b      	ldr	r2, [pc, #236]	@ (8003178 <TIM_Base_SetConfig+0x100>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d008      	beq.n	80030a2 <TIM_Base_SetConfig+0x2a>
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	2380      	movs	r3, #128	@ 0x80
 8003094:	05db      	lsls	r3, r3, #23
 8003096:	429a      	cmp	r2, r3
 8003098:	d003      	beq.n	80030a2 <TIM_Base_SetConfig+0x2a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a37      	ldr	r2, [pc, #220]	@ (800317c <TIM_Base_SetConfig+0x104>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d108      	bne.n	80030b4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2270      	movs	r2, #112	@ 0x70
 80030a6:	4393      	bics	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a30      	ldr	r2, [pc, #192]	@ (8003178 <TIM_Base_SetConfig+0x100>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d018      	beq.n	80030ee <TIM_Base_SetConfig+0x76>
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	2380      	movs	r3, #128	@ 0x80
 80030c0:	05db      	lsls	r3, r3, #23
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d013      	beq.n	80030ee <TIM_Base_SetConfig+0x76>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a2c      	ldr	r2, [pc, #176]	@ (800317c <TIM_Base_SetConfig+0x104>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00f      	beq.n	80030ee <TIM_Base_SetConfig+0x76>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003180 <TIM_Base_SetConfig+0x108>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00b      	beq.n	80030ee <TIM_Base_SetConfig+0x76>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003184 <TIM_Base_SetConfig+0x10c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d007      	beq.n	80030ee <TIM_Base_SetConfig+0x76>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a29      	ldr	r2, [pc, #164]	@ (8003188 <TIM_Base_SetConfig+0x110>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d003      	beq.n	80030ee <TIM_Base_SetConfig+0x76>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a28      	ldr	r2, [pc, #160]	@ (800318c <TIM_Base_SetConfig+0x114>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d108      	bne.n	8003100 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a27      	ldr	r2, [pc, #156]	@ (8003190 <TIM_Base_SetConfig+0x118>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2280      	movs	r2, #128	@ 0x80
 8003104:	4393      	bics	r3, r2
 8003106:	001a      	movs	r2, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a13      	ldr	r2, [pc, #76]	@ (8003178 <TIM_Base_SetConfig+0x100>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00b      	beq.n	8003146 <TIM_Base_SetConfig+0xce>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a14      	ldr	r2, [pc, #80]	@ (8003184 <TIM_Base_SetConfig+0x10c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <TIM_Base_SetConfig+0xce>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a13      	ldr	r2, [pc, #76]	@ (8003188 <TIM_Base_SetConfig+0x110>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d003      	beq.n	8003146 <TIM_Base_SetConfig+0xce>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a12      	ldr	r2, [pc, #72]	@ (800318c <TIM_Base_SetConfig+0x114>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d103      	bne.n	800314e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2201      	movs	r2, #1
 800315a:	4013      	ands	r3, r2
 800315c:	2b01      	cmp	r3, #1
 800315e:	d106      	bne.n	800316e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2201      	movs	r2, #1
 8003166:	4393      	bics	r3, r2
 8003168:	001a      	movs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	611a      	str	r2, [r3, #16]
  }
}
 800316e:	46c0      	nop			@ (mov r8, r8)
 8003170:	46bd      	mov	sp, r7
 8003172:	b004      	add	sp, #16
 8003174:	bd80      	pop	{r7, pc}
 8003176:	46c0      	nop			@ (mov r8, r8)
 8003178:	40012c00 	.word	0x40012c00
 800317c:	40000400 	.word	0x40000400
 8003180:	40002000 	.word	0x40002000
 8003184:	40014000 	.word	0x40014000
 8003188:	40014400 	.word	0x40014400
 800318c:	40014800 	.word	0x40014800
 8003190:	fffffcff 	.word	0xfffffcff

08003194 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	2201      	movs	r2, #1
 80031aa:	4393      	bics	r3, r2
 80031ac:	001a      	movs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2270      	movs	r2, #112	@ 0x70
 80031c2:	4393      	bics	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2203      	movs	r2, #3
 80031ca:	4393      	bics	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2202      	movs	r2, #2
 80031dc:	4393      	bics	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a27      	ldr	r2, [pc, #156]	@ (800328c <TIM_OC1_SetConfig+0xf8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00b      	beq.n	800320a <TIM_OC1_SetConfig+0x76>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a26      	ldr	r2, [pc, #152]	@ (8003290 <TIM_OC1_SetConfig+0xfc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <TIM_OC1_SetConfig+0x76>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a25      	ldr	r2, [pc, #148]	@ (8003294 <TIM_OC1_SetConfig+0x100>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d003      	beq.n	800320a <TIM_OC1_SetConfig+0x76>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a24      	ldr	r2, [pc, #144]	@ (8003298 <TIM_OC1_SetConfig+0x104>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d10c      	bne.n	8003224 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2208      	movs	r2, #8
 800320e:	4393      	bics	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2204      	movs	r2, #4
 8003220:	4393      	bics	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a19      	ldr	r2, [pc, #100]	@ (800328c <TIM_OC1_SetConfig+0xf8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00b      	beq.n	8003244 <TIM_OC1_SetConfig+0xb0>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a18      	ldr	r2, [pc, #96]	@ (8003290 <TIM_OC1_SetConfig+0xfc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d007      	beq.n	8003244 <TIM_OC1_SetConfig+0xb0>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a17      	ldr	r2, [pc, #92]	@ (8003294 <TIM_OC1_SetConfig+0x100>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d003      	beq.n	8003244 <TIM_OC1_SetConfig+0xb0>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a16      	ldr	r2, [pc, #88]	@ (8003298 <TIM_OC1_SetConfig+0x104>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d111      	bne.n	8003268 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4a15      	ldr	r2, [pc, #84]	@ (800329c <TIM_OC1_SetConfig+0x108>)
 8003248:	4013      	ands	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4a14      	ldr	r2, [pc, #80]	@ (80032a0 <TIM_OC1_SetConfig+0x10c>)
 8003250:	4013      	ands	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	621a      	str	r2, [r3, #32]
}
 8003282:	46c0      	nop			@ (mov r8, r8)
 8003284:	46bd      	mov	sp, r7
 8003286:	b006      	add	sp, #24
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	40012c00 	.word	0x40012c00
 8003290:	40014000 	.word	0x40014000
 8003294:	40014400 	.word	0x40014400
 8003298:	40014800 	.word	0x40014800
 800329c:	fffffeff 	.word	0xfffffeff
 80032a0:	fffffdff 	.word	0xfffffdff

080032a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	2210      	movs	r2, #16
 80032ba:	4393      	bics	r3, r2
 80032bc:	001a      	movs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4a2e      	ldr	r2, [pc, #184]	@ (800338c <TIM_OC2_SetConfig+0xe8>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003390 <TIM_OC2_SetConfig+0xec>)
 80032da:	4013      	ands	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2220      	movs	r2, #32
 80032ee:	4393      	bics	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a24      	ldr	r2, [pc, #144]	@ (8003394 <TIM_OC2_SetConfig+0xf0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d10d      	bne.n	8003322 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2280      	movs	r2, #128	@ 0x80
 800330a:	4393      	bics	r3, r2
 800330c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2240      	movs	r2, #64	@ 0x40
 800331e:	4393      	bics	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a1b      	ldr	r2, [pc, #108]	@ (8003394 <TIM_OC2_SetConfig+0xf0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00b      	beq.n	8003342 <TIM_OC2_SetConfig+0x9e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a1a      	ldr	r2, [pc, #104]	@ (8003398 <TIM_OC2_SetConfig+0xf4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <TIM_OC2_SetConfig+0x9e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a19      	ldr	r2, [pc, #100]	@ (800339c <TIM_OC2_SetConfig+0xf8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <TIM_OC2_SetConfig+0x9e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a18      	ldr	r2, [pc, #96]	@ (80033a0 <TIM_OC2_SetConfig+0xfc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d113      	bne.n	800336a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4a17      	ldr	r2, [pc, #92]	@ (80033a4 <TIM_OC2_SetConfig+0x100>)
 8003346:	4013      	ands	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4a16      	ldr	r2, [pc, #88]	@ (80033a8 <TIM_OC2_SetConfig+0x104>)
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	621a      	str	r2, [r3, #32]
}
 8003384:	46c0      	nop			@ (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b006      	add	sp, #24
 800338a:	bd80      	pop	{r7, pc}
 800338c:	ffff8fff 	.word	0xffff8fff
 8003390:	fffffcff 	.word	0xfffffcff
 8003394:	40012c00 	.word	0x40012c00
 8003398:	40014000 	.word	0x40014000
 800339c:	40014400 	.word	0x40014400
 80033a0:	40014800 	.word	0x40014800
 80033a4:	fffffbff 	.word	0xfffffbff
 80033a8:	fffff7ff 	.word	0xfffff7ff

080033ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4a33      	ldr	r2, [pc, #204]	@ (8003490 <TIM_OC3_SetConfig+0xe4>)
 80033c2:	401a      	ands	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2270      	movs	r2, #112	@ 0x70
 80033d8:	4393      	bics	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2203      	movs	r2, #3
 80033e0:	4393      	bics	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	4a28      	ldr	r2, [pc, #160]	@ (8003494 <TIM_OC3_SetConfig+0xe8>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a24      	ldr	r2, [pc, #144]	@ (8003498 <TIM_OC3_SetConfig+0xec>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d10d      	bne.n	8003426 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	4a23      	ldr	r2, [pc, #140]	@ (800349c <TIM_OC3_SetConfig+0xf0>)
 800340e:	4013      	ands	r3, r2
 8003410:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	4a1f      	ldr	r2, [pc, #124]	@ (80034a0 <TIM_OC3_SetConfig+0xf4>)
 8003422:	4013      	ands	r3, r2
 8003424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1b      	ldr	r2, [pc, #108]	@ (8003498 <TIM_OC3_SetConfig+0xec>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00b      	beq.n	8003446 <TIM_OC3_SetConfig+0x9a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a1c      	ldr	r2, [pc, #112]	@ (80034a4 <TIM_OC3_SetConfig+0xf8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <TIM_OC3_SetConfig+0x9a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a1b      	ldr	r2, [pc, #108]	@ (80034a8 <TIM_OC3_SetConfig+0xfc>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d003      	beq.n	8003446 <TIM_OC3_SetConfig+0x9a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a1a      	ldr	r2, [pc, #104]	@ (80034ac <TIM_OC3_SetConfig+0x100>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d113      	bne.n	800346e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4a19      	ldr	r2, [pc, #100]	@ (80034b0 <TIM_OC3_SetConfig+0x104>)
 800344a:	4013      	ands	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4a18      	ldr	r2, [pc, #96]	@ (80034b4 <TIM_OC3_SetConfig+0x108>)
 8003452:	4013      	ands	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	621a      	str	r2, [r3, #32]
}
 8003488:	46c0      	nop			@ (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	b006      	add	sp, #24
 800348e:	bd80      	pop	{r7, pc}
 8003490:	fffffeff 	.word	0xfffffeff
 8003494:	fffffdff 	.word	0xfffffdff
 8003498:	40012c00 	.word	0x40012c00
 800349c:	fffff7ff 	.word	0xfffff7ff
 80034a0:	fffffbff 	.word	0xfffffbff
 80034a4:	40014000 	.word	0x40014000
 80034a8:	40014400 	.word	0x40014400
 80034ac:	40014800 	.word	0x40014800
 80034b0:	ffffefff 	.word	0xffffefff
 80034b4:	ffffdfff 	.word	0xffffdfff

080034b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4a26      	ldr	r2, [pc, #152]	@ (8003568 <TIM_OC4_SetConfig+0xb0>)
 80034ce:	401a      	ands	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a22      	ldr	r2, [pc, #136]	@ (800356c <TIM_OC4_SetConfig+0xb4>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a21      	ldr	r2, [pc, #132]	@ (8003570 <TIM_OC4_SetConfig+0xb8>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003574 <TIM_OC4_SetConfig+0xbc>)
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	031b      	lsls	r3, r3, #12
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a19      	ldr	r2, [pc, #100]	@ (8003578 <TIM_OC4_SetConfig+0xc0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00b      	beq.n	8003530 <TIM_OC4_SetConfig+0x78>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a18      	ldr	r2, [pc, #96]	@ (800357c <TIM_OC4_SetConfig+0xc4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d007      	beq.n	8003530 <TIM_OC4_SetConfig+0x78>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a17      	ldr	r2, [pc, #92]	@ (8003580 <TIM_OC4_SetConfig+0xc8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d003      	beq.n	8003530 <TIM_OC4_SetConfig+0x78>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a16      	ldr	r2, [pc, #88]	@ (8003584 <TIM_OC4_SetConfig+0xcc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d109      	bne.n	8003544 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	4a15      	ldr	r2, [pc, #84]	@ (8003588 <TIM_OC4_SetConfig+0xd0>)
 8003534:	4013      	ands	r3, r2
 8003536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	019b      	lsls	r3, r3, #6
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	46bd      	mov	sp, r7
 8003562:	b006      	add	sp, #24
 8003564:	bd80      	pop	{r7, pc}
 8003566:	46c0      	nop			@ (mov r8, r8)
 8003568:	ffffefff 	.word	0xffffefff
 800356c:	ffff8fff 	.word	0xffff8fff
 8003570:	fffffcff 	.word	0xfffffcff
 8003574:	ffffdfff 	.word	0xffffdfff
 8003578:	40012c00 	.word	0x40012c00
 800357c:	40014000 	.word	0x40014000
 8003580:	40014400 	.word	0x40014400
 8003584:	40014800 	.word	0x40014800
 8003588:	ffffbfff 	.word	0xffffbfff

0800358c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	2201      	movs	r2, #1
 80035a4:	4393      	bics	r3, r2
 80035a6:	001a      	movs	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	22f0      	movs	r2, #240	@ 0xf0
 80035b6:	4393      	bics	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	220a      	movs	r2, #10
 80035c8:	4393      	bics	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	621a      	str	r2, [r3, #32]
}
 80035e0:	46c0      	nop			@ (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b006      	add	sp, #24
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	2210      	movs	r2, #16
 8003600:	4393      	bics	r3, r2
 8003602:	001a      	movs	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4a0d      	ldr	r2, [pc, #52]	@ (8003648 <TIM_TI2_ConfigInputStage+0x60>)
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	031b      	lsls	r3, r3, #12
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	22a0      	movs	r2, #160	@ 0xa0
 8003624:	4393      	bics	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	621a      	str	r2, [r3, #32]
}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	46bd      	mov	sp, r7
 8003642:	b006      	add	sp, #24
 8003644:	bd80      	pop	{r7, pc}
 8003646:	46c0      	nop			@ (mov r8, r8)
 8003648:	ffff0fff 	.word	0xffff0fff

0800364c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2270      	movs	r2, #112	@ 0x70
 8003660:	4393      	bics	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	2207      	movs	r2, #7
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	609a      	str	r2, [r3, #8]
}
 8003676:	46c0      	nop			@ (mov r8, r8)
 8003678:	46bd      	mov	sp, r7
 800367a:	b004      	add	sp, #16
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	4a09      	ldr	r2, [pc, #36]	@ (80036bc <TIM_ETR_SetConfig+0x3c>)
 8003698:	4013      	ands	r3, r2
 800369a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	021a      	lsls	r2, r3, #8
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	609a      	str	r2, [r3, #8]
}
 80036b4:	46c0      	nop			@ (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b006      	add	sp, #24
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	ffff00ff 	.word	0xffff00ff

080036c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	221f      	movs	r2, #31
 80036d0:	4013      	ands	r3, r2
 80036d2:	2201      	movs	r2, #1
 80036d4:	409a      	lsls	r2, r3
 80036d6:	0013      	movs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	43d2      	mvns	r2, r2
 80036e2:	401a      	ands	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a1a      	ldr	r2, [r3, #32]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	211f      	movs	r1, #31
 80036f0:	400b      	ands	r3, r1
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4099      	lsls	r1, r3
 80036f6:	000b      	movs	r3, r1
 80036f8:	431a      	orrs	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	621a      	str	r2, [r3, #32]
}
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	46bd      	mov	sp, r7
 8003702:	b006      	add	sp, #24
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	223c      	movs	r2, #60	@ 0x3c
 8003716:	5c9b      	ldrb	r3, [r3, r2]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800371c:	2302      	movs	r3, #2
 800371e:	e047      	b.n	80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	223c      	movs	r2, #60	@ 0x3c
 8003724:	2101      	movs	r1, #1
 8003726:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	223d      	movs	r2, #61	@ 0x3d
 800372c:	2102      	movs	r1, #2
 800372e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2270      	movs	r2, #112	@ 0x70
 8003744:	4393      	bics	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a16      	ldr	r2, [pc, #88]	@ (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00f      	beq.n	8003784 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	2380      	movs	r3, #128	@ 0x80
 800376a:	05db      	lsls	r3, r3, #23
 800376c:	429a      	cmp	r2, r3
 800376e:	d009      	beq.n	8003784 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a11      	ldr	r2, [pc, #68]	@ (80037bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a10      	ldr	r2, [pc, #64]	@ (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d10c      	bne.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2280      	movs	r2, #128	@ 0x80
 8003788:	4393      	bics	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	4313      	orrs	r3, r2
 8003794:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	223d      	movs	r2, #61	@ 0x3d
 80037a2:	2101      	movs	r1, #1
 80037a4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	223c      	movs	r2, #60	@ 0x3c
 80037aa:	2100      	movs	r1, #0
 80037ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	0018      	movs	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b004      	add	sp, #16
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40014000 	.word	0x40014000

080037c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037cc:	46c0      	nop			@ (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b002      	add	sp, #8
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037dc:	46c0      	nop			@ (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e044      	b.n	8003880 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2278      	movs	r2, #120	@ 0x78
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	0018      	movs	r0, r3
 800380a:	f7fd f8f5 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2224      	movs	r2, #36	@ 0x24
 8003812:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2101      	movs	r1, #1
 8003820:	438a      	bics	r2, r1
 8003822:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	0018      	movs	r0, r3
 8003830:	f000 fa54 	bl	8003cdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	0018      	movs	r0, r3
 8003838:	f000 f8c8 	bl	80039cc <UART_SetConfig>
 800383c:	0003      	movs	r3, r0
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e01c      	b.n	8003880 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	490d      	ldr	r1, [pc, #52]	@ (8003888 <HAL_UART_Init+0xa4>)
 8003852:	400a      	ands	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	212a      	movs	r1, #42	@ 0x2a
 8003862:	438a      	bics	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2101      	movs	r1, #1
 8003872:	430a      	orrs	r2, r1
 8003874:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	0018      	movs	r0, r3
 800387a:	f000 fae3 	bl	8003e44 <UART_CheckIdleState>
 800387e:	0003      	movs	r3, r0
}
 8003880:	0018      	movs	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	b002      	add	sp, #8
 8003886:	bd80      	pop	{r7, pc}
 8003888:	ffffb7ff 	.word	0xffffb7ff

0800388c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	@ 0x28
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	1dbb      	adds	r3, r7, #6
 800389a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d000      	beq.n	80038a6 <HAL_UART_Transmit+0x1a>
 80038a4:	e08c      	b.n	80039c0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_UART_Transmit+0x28>
 80038ac:	1dbb      	adds	r3, r7, #6
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e084      	b.n	80039c2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	2380      	movs	r3, #128	@ 0x80
 80038be:	015b      	lsls	r3, r3, #5
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d109      	bne.n	80038d8 <HAL_UART_Transmit+0x4c>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2201      	movs	r2, #1
 80038d0:	4013      	ands	r3, r2
 80038d2:	d001      	beq.n	80038d8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e074      	b.n	80039c2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2284      	movs	r2, #132	@ 0x84
 80038dc:	2100      	movs	r1, #0
 80038de:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2221      	movs	r2, #33	@ 0x21
 80038e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038e6:	f7fd f9cf 	bl	8000c88 <HAL_GetTick>
 80038ea:	0003      	movs	r3, r0
 80038ec:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1dba      	adds	r2, r7, #6
 80038f2:	2150      	movs	r1, #80	@ 0x50
 80038f4:	8812      	ldrh	r2, [r2, #0]
 80038f6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	1dba      	adds	r2, r7, #6
 80038fc:	2152      	movs	r1, #82	@ 0x52
 80038fe:	8812      	ldrh	r2, [r2, #0]
 8003900:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	2380      	movs	r3, #128	@ 0x80
 8003908:	015b      	lsls	r3, r3, #5
 800390a:	429a      	cmp	r2, r3
 800390c:	d108      	bne.n	8003920 <HAL_UART_Transmit+0x94>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	e003      	b.n	8003928 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003924:	2300      	movs	r3, #0
 8003926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003928:	e02f      	b.n	800398a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	0013      	movs	r3, r2
 8003934:	2200      	movs	r2, #0
 8003936:	2180      	movs	r1, #128	@ 0x80
 8003938:	f000 fb2c 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 800393c:	1e03      	subs	r3, r0, #0
 800393e:	d004      	beq.n	800394a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e03b      	b.n	80039c2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10b      	bne.n	8003968 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	881a      	ldrh	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	05d2      	lsls	r2, r2, #23
 800395a:	0dd2      	lsrs	r2, r2, #23
 800395c:	b292      	uxth	r2, r2
 800395e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	3302      	adds	r3, #2
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	e007      	b.n	8003978 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	781a      	ldrb	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3301      	adds	r3, #1
 8003976:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2252      	movs	r2, #82	@ 0x52
 800397c:	5a9b      	ldrh	r3, [r3, r2]
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b299      	uxth	r1, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2252      	movs	r2, #82	@ 0x52
 8003988:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2252      	movs	r2, #82	@ 0x52
 800398e:	5a9b      	ldrh	r3, [r3, r2]
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1c9      	bne.n	800392a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	0013      	movs	r3, r2
 80039a0:	2200      	movs	r2, #0
 80039a2:	2140      	movs	r1, #64	@ 0x40
 80039a4:	f000 faf6 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 80039a8:	1e03      	subs	r3, r0, #0
 80039aa:	d004      	beq.n	80039b6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e005      	b.n	80039c2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	0018      	movs	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b008      	add	sp, #32
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039d4:	231e      	movs	r3, #30
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4aaf      	ldr	r2, [pc, #700]	@ (8003cb8 <UART_SetConfig+0x2ec>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	0019      	movs	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4aaa      	ldr	r2, [pc, #680]	@ (8003cbc <UART_SetConfig+0x2f0>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	0019      	movs	r1, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4aa1      	ldr	r2, [pc, #644]	@ (8003cc0 <UART_SetConfig+0x2f4>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	0019      	movs	r1, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a9d      	ldr	r2, [pc, #628]	@ (8003cc4 <UART_SetConfig+0x2f8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d127      	bne.n	8003aa2 <UART_SetConfig+0xd6>
 8003a52:	4b9d      	ldr	r3, [pc, #628]	@ (8003cc8 <UART_SetConfig+0x2fc>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a56:	2203      	movs	r2, #3
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d00d      	beq.n	8003a7a <UART_SetConfig+0xae>
 8003a5e:	d81b      	bhi.n	8003a98 <UART_SetConfig+0xcc>
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d014      	beq.n	8003a8e <UART_SetConfig+0xc2>
 8003a64:	d818      	bhi.n	8003a98 <UART_SetConfig+0xcc>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <UART_SetConfig+0xa4>
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d00a      	beq.n	8003a84 <UART_SetConfig+0xb8>
 8003a6e:	e013      	b.n	8003a98 <UART_SetConfig+0xcc>
 8003a70:	231f      	movs	r3, #31
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	e065      	b.n	8003b46 <UART_SetConfig+0x17a>
 8003a7a:	231f      	movs	r3, #31
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	2202      	movs	r2, #2
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	e060      	b.n	8003b46 <UART_SetConfig+0x17a>
 8003a84:	231f      	movs	r3, #31
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	2204      	movs	r2, #4
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e05b      	b.n	8003b46 <UART_SetConfig+0x17a>
 8003a8e:	231f      	movs	r3, #31
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	2208      	movs	r2, #8
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	e056      	b.n	8003b46 <UART_SetConfig+0x17a>
 8003a98:	231f      	movs	r3, #31
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	2210      	movs	r2, #16
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	e051      	b.n	8003b46 <UART_SetConfig+0x17a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a89      	ldr	r2, [pc, #548]	@ (8003ccc <UART_SetConfig+0x300>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d134      	bne.n	8003b16 <UART_SetConfig+0x14a>
 8003aac:	4b86      	ldr	r3, [pc, #536]	@ (8003cc8 <UART_SetConfig+0x2fc>)
 8003aae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ab0:	23c0      	movs	r3, #192	@ 0xc0
 8003ab2:	029b      	lsls	r3, r3, #10
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	22c0      	movs	r2, #192	@ 0xc0
 8003ab8:	0292      	lsls	r2, r2, #10
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d017      	beq.n	8003aee <UART_SetConfig+0x122>
 8003abe:	22c0      	movs	r2, #192	@ 0xc0
 8003ac0:	0292      	lsls	r2, r2, #10
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d822      	bhi.n	8003b0c <UART_SetConfig+0x140>
 8003ac6:	2280      	movs	r2, #128	@ 0x80
 8003ac8:	0292      	lsls	r2, r2, #10
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d019      	beq.n	8003b02 <UART_SetConfig+0x136>
 8003ace:	2280      	movs	r2, #128	@ 0x80
 8003ad0:	0292      	lsls	r2, r2, #10
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d81a      	bhi.n	8003b0c <UART_SetConfig+0x140>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d004      	beq.n	8003ae4 <UART_SetConfig+0x118>
 8003ada:	2280      	movs	r2, #128	@ 0x80
 8003adc:	0252      	lsls	r2, r2, #9
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00a      	beq.n	8003af8 <UART_SetConfig+0x12c>
 8003ae2:	e013      	b.n	8003b0c <UART_SetConfig+0x140>
 8003ae4:	231f      	movs	r3, #31
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	e02b      	b.n	8003b46 <UART_SetConfig+0x17a>
 8003aee:	231f      	movs	r3, #31
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	2202      	movs	r2, #2
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	e026      	b.n	8003b46 <UART_SetConfig+0x17a>
 8003af8:	231f      	movs	r3, #31
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	2204      	movs	r2, #4
 8003afe:	701a      	strb	r2, [r3, #0]
 8003b00:	e021      	b.n	8003b46 <UART_SetConfig+0x17a>
 8003b02:	231f      	movs	r3, #31
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	2208      	movs	r2, #8
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	e01c      	b.n	8003b46 <UART_SetConfig+0x17a>
 8003b0c:	231f      	movs	r3, #31
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	2210      	movs	r2, #16
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	e017      	b.n	8003b46 <UART_SetConfig+0x17a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a6d      	ldr	r2, [pc, #436]	@ (8003cd0 <UART_SetConfig+0x304>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d104      	bne.n	8003b2a <UART_SetConfig+0x15e>
 8003b20:	231f      	movs	r3, #31
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	e00d      	b.n	8003b46 <UART_SetConfig+0x17a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a69      	ldr	r2, [pc, #420]	@ (8003cd4 <UART_SetConfig+0x308>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d104      	bne.n	8003b3e <UART_SetConfig+0x172>
 8003b34:	231f      	movs	r3, #31
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	e003      	b.n	8003b46 <UART_SetConfig+0x17a>
 8003b3e:	231f      	movs	r3, #31
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	2210      	movs	r2, #16
 8003b44:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69da      	ldr	r2, [r3, #28]
 8003b4a:	2380      	movs	r3, #128	@ 0x80
 8003b4c:	021b      	lsls	r3, r3, #8
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d15c      	bne.n	8003c0c <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8003b52:	231f      	movs	r3, #31
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d015      	beq.n	8003b88 <UART_SetConfig+0x1bc>
 8003b5c:	dc18      	bgt.n	8003b90 <UART_SetConfig+0x1c4>
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d00d      	beq.n	8003b7e <UART_SetConfig+0x1b2>
 8003b62:	dc15      	bgt.n	8003b90 <UART_SetConfig+0x1c4>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <UART_SetConfig+0x1a2>
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d005      	beq.n	8003b78 <UART_SetConfig+0x1ac>
 8003b6c:	e010      	b.n	8003b90 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b6e:	f7fe f81b 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8003b72:	0003      	movs	r3, r0
 8003b74:	61bb      	str	r3, [r7, #24]
        break;
 8003b76:	e012      	b.n	8003b9e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b78:	4b57      	ldr	r3, [pc, #348]	@ (8003cd8 <UART_SetConfig+0x30c>)
 8003b7a:	61bb      	str	r3, [r7, #24]
        break;
 8003b7c:	e00f      	b.n	8003b9e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7e:	f7fd ff97 	bl	8001ab0 <HAL_RCC_GetSysClockFreq>
 8003b82:	0003      	movs	r3, r0
 8003b84:	61bb      	str	r3, [r7, #24]
        break;
 8003b86:	e00a      	b.n	8003b9e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	61bb      	str	r3, [r7, #24]
        break;
 8003b8e:	e006      	b.n	8003b9e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b94:	231e      	movs	r3, #30
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	2201      	movs	r2, #1
 8003b9a:	701a      	strb	r2, [r3, #0]
        break;
 8003b9c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d100      	bne.n	8003ba6 <UART_SetConfig+0x1da>
 8003ba4:	e07a      	b.n	8003c9c <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	005a      	lsls	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	085b      	lsrs	r3, r3, #1
 8003bb0:	18d2      	adds	r2, r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	0019      	movs	r1, r3
 8003bb8:	0010      	movs	r0, r2
 8003bba:	f7fc fab7 	bl	800012c <__udivsi3>
 8003bbe:	0003      	movs	r3, r0
 8003bc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	2b0f      	cmp	r3, #15
 8003bc6:	d91c      	bls.n	8003c02 <UART_SetConfig+0x236>
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	2380      	movs	r3, #128	@ 0x80
 8003bcc:	025b      	lsls	r3, r3, #9
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d217      	bcs.n	8003c02 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	200e      	movs	r0, #14
 8003bd8:	183b      	adds	r3, r7, r0
 8003bda:	210f      	movs	r1, #15
 8003bdc:	438a      	bics	r2, r1
 8003bde:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2207      	movs	r2, #7
 8003be8:	4013      	ands	r3, r2
 8003bea:	b299      	uxth	r1, r3
 8003bec:	183b      	adds	r3, r7, r0
 8003bee:	183a      	adds	r2, r7, r0
 8003bf0:	8812      	ldrh	r2, [r2, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	183a      	adds	r2, r7, r0
 8003bfc:	8812      	ldrh	r2, [r2, #0]
 8003bfe:	60da      	str	r2, [r3, #12]
 8003c00:	e04c      	b.n	8003c9c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003c02:	231e      	movs	r3, #30
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	e047      	b.n	8003c9c <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c0c:	231f      	movs	r3, #31
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d015      	beq.n	8003c42 <UART_SetConfig+0x276>
 8003c16:	dc18      	bgt.n	8003c4a <UART_SetConfig+0x27e>
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d00d      	beq.n	8003c38 <UART_SetConfig+0x26c>
 8003c1c:	dc15      	bgt.n	8003c4a <UART_SetConfig+0x27e>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <UART_SetConfig+0x25c>
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d005      	beq.n	8003c32 <UART_SetConfig+0x266>
 8003c26:	e010      	b.n	8003c4a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c28:	f7fd ffbe 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	61bb      	str	r3, [r7, #24]
        break;
 8003c30:	e012      	b.n	8003c58 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c32:	4b29      	ldr	r3, [pc, #164]	@ (8003cd8 <UART_SetConfig+0x30c>)
 8003c34:	61bb      	str	r3, [r7, #24]
        break;
 8003c36:	e00f      	b.n	8003c58 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c38:	f7fd ff3a 	bl	8001ab0 <HAL_RCC_GetSysClockFreq>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	61bb      	str	r3, [r7, #24]
        break;
 8003c40:	e00a      	b.n	8003c58 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c42:	2380      	movs	r3, #128	@ 0x80
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	61bb      	str	r3, [r7, #24]
        break;
 8003c48:	e006      	b.n	8003c58 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c4e:	231e      	movs	r3, #30
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
        break;
 8003c56:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01e      	beq.n	8003c9c <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	085a      	lsrs	r2, r3, #1
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	18d2      	adds	r2, r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	0010      	movs	r0, r2
 8003c70:	f7fc fa5c 	bl	800012c <__udivsi3>
 8003c74:	0003      	movs	r3, r0
 8003c76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b0f      	cmp	r3, #15
 8003c7c:	d90a      	bls.n	8003c94 <UART_SetConfig+0x2c8>
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	2380      	movs	r3, #128	@ 0x80
 8003c82:	025b      	lsls	r3, r3, #9
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d205      	bcs.n	8003c94 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	e003      	b.n	8003c9c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003c94:	231e      	movs	r3, #30
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ca8:	231e      	movs	r3, #30
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	781b      	ldrb	r3, [r3, #0]
}
 8003cae:	0018      	movs	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b008      	add	sp, #32
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	efff69f3 	.word	0xefff69f3
 8003cbc:	ffffcfff 	.word	0xffffcfff
 8003cc0:	fffff4ff 	.word	0xfffff4ff
 8003cc4:	40013800 	.word	0x40013800
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40004400 	.word	0x40004400
 8003cd0:	40004800 	.word	0x40004800
 8003cd4:	40004c00 	.word	0x40004c00
 8003cd8:	007a1200 	.word	0x007a1200

08003cdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	2208      	movs	r2, #8
 8003cea:	4013      	ands	r3, r2
 8003cec:	d00b      	beq.n	8003d06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4a4a      	ldr	r2, [pc, #296]	@ (8003e20 <UART_AdvFeatureConfig+0x144>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	0019      	movs	r1, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d00b      	beq.n	8003d28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4a43      	ldr	r2, [pc, #268]	@ (8003e24 <UART_AdvFeatureConfig+0x148>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d00b      	beq.n	8003d4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4a3b      	ldr	r2, [pc, #236]	@ (8003e28 <UART_AdvFeatureConfig+0x14c>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4e:	2204      	movs	r2, #4
 8003d50:	4013      	ands	r3, r2
 8003d52:	d00b      	beq.n	8003d6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4a34      	ldr	r2, [pc, #208]	@ (8003e2c <UART_AdvFeatureConfig+0x150>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	0019      	movs	r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	2210      	movs	r2, #16
 8003d72:	4013      	ands	r3, r2
 8003d74:	d00b      	beq.n	8003d8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8003e30 <UART_AdvFeatureConfig+0x154>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	2220      	movs	r2, #32
 8003d94:	4013      	ands	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	4a25      	ldr	r2, [pc, #148]	@ (8003e34 <UART_AdvFeatureConfig+0x158>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	0019      	movs	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	2240      	movs	r2, #64	@ 0x40
 8003db6:	4013      	ands	r3, r2
 8003db8:	d01d      	beq.n	8003df6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e38 <UART_AdvFeatureConfig+0x15c>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	0019      	movs	r1, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dd6:	2380      	movs	r3, #128	@ 0x80
 8003dd8:	035b      	lsls	r3, r3, #13
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d10b      	bne.n	8003df6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4a15      	ldr	r2, [pc, #84]	@ (8003e3c <UART_AdvFeatureConfig+0x160>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	0019      	movs	r1, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfa:	2280      	movs	r2, #128	@ 0x80
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d00b      	beq.n	8003e18 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4a0e      	ldr	r2, [pc, #56]	@ (8003e40 <UART_AdvFeatureConfig+0x164>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	605a      	str	r2, [r3, #4]
  }
}
 8003e18:	46c0      	nop			@ (mov r8, r8)
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b002      	add	sp, #8
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	ffff7fff 	.word	0xffff7fff
 8003e24:	fffdffff 	.word	0xfffdffff
 8003e28:	fffeffff 	.word	0xfffeffff
 8003e2c:	fffbffff 	.word	0xfffbffff
 8003e30:	ffffefff 	.word	0xffffefff
 8003e34:	ffffdfff 	.word	0xffffdfff
 8003e38:	ffefffff 	.word	0xffefffff
 8003e3c:	ff9fffff 	.word	0xff9fffff
 8003e40:	fff7ffff 	.word	0xfff7ffff

08003e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b092      	sub	sp, #72	@ 0x48
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2284      	movs	r2, #132	@ 0x84
 8003e50:	2100      	movs	r1, #0
 8003e52:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e54:	f7fc ff18 	bl	8000c88 <HAL_GetTick>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2208      	movs	r2, #8
 8003e64:	4013      	ands	r3, r2
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d12c      	bne.n	8003ec4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e6c:	2280      	movs	r2, #128	@ 0x80
 8003e6e:	0391      	lsls	r1, r2, #14
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	4a46      	ldr	r2, [pc, #280]	@ (8003f8c <UART_CheckIdleState+0x148>)
 8003e74:	9200      	str	r2, [sp, #0]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f000 f88c 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 8003e7c:	1e03      	subs	r3, r0, #0
 8003e7e:	d021      	beq.n	8003ec4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e80:	f3ef 8310 	mrs	r3, PRIMASK
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e90:	f383 8810 	msr	PRIMASK, r3
}
 8003e94:	46c0      	nop			@ (mov r8, r8)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2180      	movs	r1, #128	@ 0x80
 8003ea2:	438a      	bics	r2, r1
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eac:	f383 8810 	msr	PRIMASK, r3
}
 8003eb0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2278      	movs	r2, #120	@ 0x78
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e05f      	b.n	8003f84 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2204      	movs	r2, #4
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d146      	bne.n	8003f60 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed4:	2280      	movs	r2, #128	@ 0x80
 8003ed6:	03d1      	lsls	r1, r2, #15
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4a2c      	ldr	r2, [pc, #176]	@ (8003f8c <UART_CheckIdleState+0x148>)
 8003edc:	9200      	str	r2, [sp, #0]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f000 f858 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 8003ee4:	1e03      	subs	r3, r0, #0
 8003ee6:	d03b      	beq.n	8003f60 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8003eec:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f383 8810 	msr	PRIMASK, r3
}
 8003efc:	46c0      	nop			@ (mov r8, r8)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4921      	ldr	r1, [pc, #132]	@ (8003f90 <UART_CheckIdleState+0x14c>)
 8003f0a:	400a      	ands	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f383 8810 	msr	PRIMASK, r3
}
 8003f18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f20:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f22:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f24:	2301      	movs	r3, #1
 8003f26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f383 8810 	msr	PRIMASK, r3
}
 8003f2e:	46c0      	nop			@ (mov r8, r8)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	438a      	bics	r2, r1
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	f383 8810 	msr	PRIMASK, r3
}
 8003f4a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2280      	movs	r2, #128	@ 0x80
 8003f50:	2120      	movs	r1, #32
 8003f52:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2278      	movs	r2, #120	@ 0x78
 8003f58:	2100      	movs	r1, #0
 8003f5a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e011      	b.n	8003f84 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2280      	movs	r2, #128	@ 0x80
 8003f6a:	2120      	movs	r1, #32
 8003f6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2278      	movs	r2, #120	@ 0x78
 8003f7e:	2100      	movs	r1, #0
 8003f80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	0018      	movs	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b010      	add	sp, #64	@ 0x40
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	01ffffff 	.word	0x01ffffff
 8003f90:	fffffedf 	.word	0xfffffedf

08003f94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	1dfb      	adds	r3, r7, #7
 8003fa2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa4:	e051      	b.n	800404a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	d04e      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fac:	f7fc fe6c 	bl	8000c88 <HAL_GetTick>
 8003fb0:	0002      	movs	r2, r0
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d302      	bcc.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e051      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2204      	movs	r2, #4
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d03b      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b80      	cmp	r3, #128	@ 0x80
 8003fd6:	d038      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b40      	cmp	r3, #64	@ 0x40
 8003fdc:	d035      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d111      	bne.n	8004010 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f000 f83c 	bl	8004074 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2284      	movs	r2, #132	@ 0x84
 8004000:	2108      	movs	r1, #8
 8004002:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2278      	movs	r2, #120	@ 0x78
 8004008:	2100      	movs	r1, #0
 800400a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e02c      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69da      	ldr	r2, [r3, #28]
 8004016:	2380      	movs	r3, #128	@ 0x80
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	401a      	ands	r2, r3
 800401c:	2380      	movs	r3, #128	@ 0x80
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	429a      	cmp	r2, r3
 8004022:	d112      	bne.n	800404a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2280      	movs	r2, #128	@ 0x80
 800402a:	0112      	lsls	r2, r2, #4
 800402c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	0018      	movs	r0, r3
 8004032:	f000 f81f 	bl	8004074 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2284      	movs	r2, #132	@ 0x84
 800403a:	2120      	movs	r1, #32
 800403c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2278      	movs	r2, #120	@ 0x78
 8004042:	2100      	movs	r1, #0
 8004044:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e00f      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	4013      	ands	r3, r2
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	425a      	negs	r2, r3
 800405a:	4153      	adcs	r3, r2
 800405c:	b2db      	uxtb	r3, r3
 800405e:	001a      	movs	r2, r3
 8004060:	1dfb      	adds	r3, r7, #7
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d09e      	beq.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	0018      	movs	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	b004      	add	sp, #16
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08e      	sub	sp, #56	@ 0x38
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407c:	f3ef 8310 	mrs	r3, PRIMASK
 8004080:	617b      	str	r3, [r7, #20]
  return(result);
 8004082:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004084:	637b      	str	r3, [r7, #52]	@ 0x34
 8004086:	2301      	movs	r3, #1
 8004088:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	f383 8810 	msr	PRIMASK, r3
}
 8004090:	46c0      	nop			@ (mov r8, r8)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4926      	ldr	r1, [pc, #152]	@ (8004138 <UART_EndRxTransfer+0xc4>)
 800409e:	400a      	ands	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	f383 8810 	msr	PRIMASK, r3
}
 80040ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ae:	f3ef 8310 	mrs	r3, PRIMASK
 80040b2:	623b      	str	r3, [r7, #32]
  return(result);
 80040b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80040b8:	2301      	movs	r3, #1
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	f383 8810 	msr	PRIMASK, r3
}
 80040c2:	46c0      	nop			@ (mov r8, r8)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2101      	movs	r1, #1
 80040d0:	438a      	bics	r2, r1
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040da:	f383 8810 	msr	PRIMASK, r3
}
 80040de:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d118      	bne.n	800411a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e8:	f3ef 8310 	mrs	r3, PRIMASK
 80040ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80040ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040f2:	2301      	movs	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f383 8810 	msr	PRIMASK, r3
}
 80040fc:	46c0      	nop			@ (mov r8, r8)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2110      	movs	r1, #16
 800410a:	438a      	bics	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004110:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f383 8810 	msr	PRIMASK, r3
}
 8004118:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2280      	movs	r2, #128	@ 0x80
 800411e:	2120      	movs	r1, #32
 8004120:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800412e:	46c0      	nop			@ (mov r8, r8)
 8004130:	46bd      	mov	sp, r7
 8004132:	b00e      	add	sp, #56	@ 0x38
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	fffffedf 	.word	0xfffffedf

0800413c <_vsiprintf_r>:
 800413c:	b500      	push	{lr}
 800413e:	b09b      	sub	sp, #108	@ 0x6c
 8004140:	9100      	str	r1, [sp, #0]
 8004142:	9104      	str	r1, [sp, #16]
 8004144:	4906      	ldr	r1, [pc, #24]	@ (8004160 <_vsiprintf_r+0x24>)
 8004146:	9105      	str	r1, [sp, #20]
 8004148:	9102      	str	r1, [sp, #8]
 800414a:	4906      	ldr	r1, [pc, #24]	@ (8004164 <_vsiprintf_r+0x28>)
 800414c:	9103      	str	r1, [sp, #12]
 800414e:	4669      	mov	r1, sp
 8004150:	f000 f9a6 	bl	80044a0 <_svfiprintf_r>
 8004154:	2200      	movs	r2, #0
 8004156:	9b00      	ldr	r3, [sp, #0]
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	b01b      	add	sp, #108	@ 0x6c
 800415c:	bd00      	pop	{pc}
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	7fffffff 	.word	0x7fffffff
 8004164:	ffff0208 	.word	0xffff0208

08004168 <vsiprintf>:
 8004168:	b510      	push	{r4, lr}
 800416a:	4c04      	ldr	r4, [pc, #16]	@ (800417c <vsiprintf+0x14>)
 800416c:	0013      	movs	r3, r2
 800416e:	000a      	movs	r2, r1
 8004170:	0001      	movs	r1, r0
 8004172:	6820      	ldr	r0, [r4, #0]
 8004174:	f7ff ffe2 	bl	800413c <_vsiprintf_r>
 8004178:	bd10      	pop	{r4, pc}
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	2000000c 	.word	0x2000000c

08004180 <memset>:
 8004180:	0003      	movs	r3, r0
 8004182:	1882      	adds	r2, r0, r2
 8004184:	4293      	cmp	r3, r2
 8004186:	d100      	bne.n	800418a <memset+0xa>
 8004188:	4770      	bx	lr
 800418a:	7019      	strb	r1, [r3, #0]
 800418c:	3301      	adds	r3, #1
 800418e:	e7f9      	b.n	8004184 <memset+0x4>

08004190 <__errno>:
 8004190:	4b01      	ldr	r3, [pc, #4]	@ (8004198 <__errno+0x8>)
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	4770      	bx	lr
 8004196:	46c0      	nop			@ (mov r8, r8)
 8004198:	2000000c 	.word	0x2000000c

0800419c <__libc_init_array>:
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	2600      	movs	r6, #0
 80041a0:	4c0c      	ldr	r4, [pc, #48]	@ (80041d4 <__libc_init_array+0x38>)
 80041a2:	4d0d      	ldr	r5, [pc, #52]	@ (80041d8 <__libc_init_array+0x3c>)
 80041a4:	1b64      	subs	r4, r4, r5
 80041a6:	10a4      	asrs	r4, r4, #2
 80041a8:	42a6      	cmp	r6, r4
 80041aa:	d109      	bne.n	80041c0 <__libc_init_array+0x24>
 80041ac:	2600      	movs	r6, #0
 80041ae:	f000 fc65 	bl	8004a7c <_init>
 80041b2:	4c0a      	ldr	r4, [pc, #40]	@ (80041dc <__libc_init_array+0x40>)
 80041b4:	4d0a      	ldr	r5, [pc, #40]	@ (80041e0 <__libc_init_array+0x44>)
 80041b6:	1b64      	subs	r4, r4, r5
 80041b8:	10a4      	asrs	r4, r4, #2
 80041ba:	42a6      	cmp	r6, r4
 80041bc:	d105      	bne.n	80041ca <__libc_init_array+0x2e>
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	00b3      	lsls	r3, r6, #2
 80041c2:	58eb      	ldr	r3, [r5, r3]
 80041c4:	4798      	blx	r3
 80041c6:	3601      	adds	r6, #1
 80041c8:	e7ee      	b.n	80041a8 <__libc_init_array+0xc>
 80041ca:	00b3      	lsls	r3, r6, #2
 80041cc:	58eb      	ldr	r3, [r5, r3]
 80041ce:	4798      	blx	r3
 80041d0:	3601      	adds	r6, #1
 80041d2:	e7f2      	b.n	80041ba <__libc_init_array+0x1e>
 80041d4:	08004bd4 	.word	0x08004bd4
 80041d8:	08004bd4 	.word	0x08004bd4
 80041dc:	08004bd8 	.word	0x08004bd8
 80041e0:	08004bd4 	.word	0x08004bd4

080041e4 <__retarget_lock_acquire_recursive>:
 80041e4:	4770      	bx	lr

080041e6 <__retarget_lock_release_recursive>:
 80041e6:	4770      	bx	lr

080041e8 <_free_r>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	0005      	movs	r5, r0
 80041ec:	1e0c      	subs	r4, r1, #0
 80041ee:	d010      	beq.n	8004212 <_free_r+0x2a>
 80041f0:	3c04      	subs	r4, #4
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	da00      	bge.n	80041fa <_free_r+0x12>
 80041f8:	18e4      	adds	r4, r4, r3
 80041fa:	0028      	movs	r0, r5
 80041fc:	f000 f8e0 	bl	80043c0 <__malloc_lock>
 8004200:	4a1d      	ldr	r2, [pc, #116]	@ (8004278 <_free_r+0x90>)
 8004202:	6813      	ldr	r3, [r2, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d105      	bne.n	8004214 <_free_r+0x2c>
 8004208:	6063      	str	r3, [r4, #4]
 800420a:	6014      	str	r4, [r2, #0]
 800420c:	0028      	movs	r0, r5
 800420e:	f000 f8df 	bl	80043d0 <__malloc_unlock>
 8004212:	bd70      	pop	{r4, r5, r6, pc}
 8004214:	42a3      	cmp	r3, r4
 8004216:	d908      	bls.n	800422a <_free_r+0x42>
 8004218:	6820      	ldr	r0, [r4, #0]
 800421a:	1821      	adds	r1, r4, r0
 800421c:	428b      	cmp	r3, r1
 800421e:	d1f3      	bne.n	8004208 <_free_r+0x20>
 8004220:	6819      	ldr	r1, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	1809      	adds	r1, r1, r0
 8004226:	6021      	str	r1, [r4, #0]
 8004228:	e7ee      	b.n	8004208 <_free_r+0x20>
 800422a:	001a      	movs	r2, r3
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <_free_r+0x4e>
 8004232:	42a3      	cmp	r3, r4
 8004234:	d9f9      	bls.n	800422a <_free_r+0x42>
 8004236:	6811      	ldr	r1, [r2, #0]
 8004238:	1850      	adds	r0, r2, r1
 800423a:	42a0      	cmp	r0, r4
 800423c:	d10b      	bne.n	8004256 <_free_r+0x6e>
 800423e:	6820      	ldr	r0, [r4, #0]
 8004240:	1809      	adds	r1, r1, r0
 8004242:	1850      	adds	r0, r2, r1
 8004244:	6011      	str	r1, [r2, #0]
 8004246:	4283      	cmp	r3, r0
 8004248:	d1e0      	bne.n	800420c <_free_r+0x24>
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	1841      	adds	r1, r0, r1
 8004250:	6011      	str	r1, [r2, #0]
 8004252:	6053      	str	r3, [r2, #4]
 8004254:	e7da      	b.n	800420c <_free_r+0x24>
 8004256:	42a0      	cmp	r0, r4
 8004258:	d902      	bls.n	8004260 <_free_r+0x78>
 800425a:	230c      	movs	r3, #12
 800425c:	602b      	str	r3, [r5, #0]
 800425e:	e7d5      	b.n	800420c <_free_r+0x24>
 8004260:	6820      	ldr	r0, [r4, #0]
 8004262:	1821      	adds	r1, r4, r0
 8004264:	428b      	cmp	r3, r1
 8004266:	d103      	bne.n	8004270 <_free_r+0x88>
 8004268:	6819      	ldr	r1, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	1809      	adds	r1, r1, r0
 800426e:	6021      	str	r1, [r4, #0]
 8004270:	6063      	str	r3, [r4, #4]
 8004272:	6054      	str	r4, [r2, #4]
 8004274:	e7ca      	b.n	800420c <_free_r+0x24>
 8004276:	46c0      	nop			@ (mov r8, r8)
 8004278:	200002d0 	.word	0x200002d0

0800427c <sbrk_aligned>:
 800427c:	b570      	push	{r4, r5, r6, lr}
 800427e:	4e0f      	ldr	r6, [pc, #60]	@ (80042bc <sbrk_aligned+0x40>)
 8004280:	000d      	movs	r5, r1
 8004282:	6831      	ldr	r1, [r6, #0]
 8004284:	0004      	movs	r4, r0
 8004286:	2900      	cmp	r1, #0
 8004288:	d102      	bne.n	8004290 <sbrk_aligned+0x14>
 800428a:	f000 fb99 	bl	80049c0 <_sbrk_r>
 800428e:	6030      	str	r0, [r6, #0]
 8004290:	0029      	movs	r1, r5
 8004292:	0020      	movs	r0, r4
 8004294:	f000 fb94 	bl	80049c0 <_sbrk_r>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d103      	bne.n	80042a4 <sbrk_aligned+0x28>
 800429c:	2501      	movs	r5, #1
 800429e:	426d      	negs	r5, r5
 80042a0:	0028      	movs	r0, r5
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
 80042a4:	2303      	movs	r3, #3
 80042a6:	1cc5      	adds	r5, r0, #3
 80042a8:	439d      	bics	r5, r3
 80042aa:	42a8      	cmp	r0, r5
 80042ac:	d0f8      	beq.n	80042a0 <sbrk_aligned+0x24>
 80042ae:	1a29      	subs	r1, r5, r0
 80042b0:	0020      	movs	r0, r4
 80042b2:	f000 fb85 	bl	80049c0 <_sbrk_r>
 80042b6:	3001      	adds	r0, #1
 80042b8:	d1f2      	bne.n	80042a0 <sbrk_aligned+0x24>
 80042ba:	e7ef      	b.n	800429c <sbrk_aligned+0x20>
 80042bc:	200002cc 	.word	0x200002cc

080042c0 <_malloc_r>:
 80042c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042c2:	2203      	movs	r2, #3
 80042c4:	1ccb      	adds	r3, r1, #3
 80042c6:	4393      	bics	r3, r2
 80042c8:	3308      	adds	r3, #8
 80042ca:	0005      	movs	r5, r0
 80042cc:	001f      	movs	r7, r3
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d234      	bcs.n	800433c <_malloc_r+0x7c>
 80042d2:	270c      	movs	r7, #12
 80042d4:	42b9      	cmp	r1, r7
 80042d6:	d833      	bhi.n	8004340 <_malloc_r+0x80>
 80042d8:	0028      	movs	r0, r5
 80042da:	f000 f871 	bl	80043c0 <__malloc_lock>
 80042de:	4e37      	ldr	r6, [pc, #220]	@ (80043bc <_malloc_r+0xfc>)
 80042e0:	6833      	ldr	r3, [r6, #0]
 80042e2:	001c      	movs	r4, r3
 80042e4:	2c00      	cmp	r4, #0
 80042e6:	d12f      	bne.n	8004348 <_malloc_r+0x88>
 80042e8:	0039      	movs	r1, r7
 80042ea:	0028      	movs	r0, r5
 80042ec:	f7ff ffc6 	bl	800427c <sbrk_aligned>
 80042f0:	0004      	movs	r4, r0
 80042f2:	1c43      	adds	r3, r0, #1
 80042f4:	d15f      	bne.n	80043b6 <_malloc_r+0xf6>
 80042f6:	6834      	ldr	r4, [r6, #0]
 80042f8:	9400      	str	r4, [sp, #0]
 80042fa:	9b00      	ldr	r3, [sp, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d14a      	bne.n	8004396 <_malloc_r+0xd6>
 8004300:	2c00      	cmp	r4, #0
 8004302:	d052      	beq.n	80043aa <_malloc_r+0xea>
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	0028      	movs	r0, r5
 8004308:	18e3      	adds	r3, r4, r3
 800430a:	9900      	ldr	r1, [sp, #0]
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	f000 fb57 	bl	80049c0 <_sbrk_r>
 8004312:	9b01      	ldr	r3, [sp, #4]
 8004314:	4283      	cmp	r3, r0
 8004316:	d148      	bne.n	80043aa <_malloc_r+0xea>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	0028      	movs	r0, r5
 800431c:	1aff      	subs	r7, r7, r3
 800431e:	0039      	movs	r1, r7
 8004320:	f7ff ffac 	bl	800427c <sbrk_aligned>
 8004324:	3001      	adds	r0, #1
 8004326:	d040      	beq.n	80043aa <_malloc_r+0xea>
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	19db      	adds	r3, r3, r7
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	6833      	ldr	r3, [r6, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	2a00      	cmp	r2, #0
 8004334:	d133      	bne.n	800439e <_malloc_r+0xde>
 8004336:	9b00      	ldr	r3, [sp, #0]
 8004338:	6033      	str	r3, [r6, #0]
 800433a:	e019      	b.n	8004370 <_malloc_r+0xb0>
 800433c:	2b00      	cmp	r3, #0
 800433e:	dac9      	bge.n	80042d4 <_malloc_r+0x14>
 8004340:	230c      	movs	r3, #12
 8004342:	602b      	str	r3, [r5, #0]
 8004344:	2000      	movs	r0, #0
 8004346:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004348:	6821      	ldr	r1, [r4, #0]
 800434a:	1bc9      	subs	r1, r1, r7
 800434c:	d420      	bmi.n	8004390 <_malloc_r+0xd0>
 800434e:	290b      	cmp	r1, #11
 8004350:	d90a      	bls.n	8004368 <_malloc_r+0xa8>
 8004352:	19e2      	adds	r2, r4, r7
 8004354:	6027      	str	r7, [r4, #0]
 8004356:	42a3      	cmp	r3, r4
 8004358:	d104      	bne.n	8004364 <_malloc_r+0xa4>
 800435a:	6032      	str	r2, [r6, #0]
 800435c:	6863      	ldr	r3, [r4, #4]
 800435e:	6011      	str	r1, [r2, #0]
 8004360:	6053      	str	r3, [r2, #4]
 8004362:	e005      	b.n	8004370 <_malloc_r+0xb0>
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	e7f9      	b.n	800435c <_malloc_r+0x9c>
 8004368:	6862      	ldr	r2, [r4, #4]
 800436a:	42a3      	cmp	r3, r4
 800436c:	d10e      	bne.n	800438c <_malloc_r+0xcc>
 800436e:	6032      	str	r2, [r6, #0]
 8004370:	0028      	movs	r0, r5
 8004372:	f000 f82d 	bl	80043d0 <__malloc_unlock>
 8004376:	0020      	movs	r0, r4
 8004378:	2207      	movs	r2, #7
 800437a:	300b      	adds	r0, #11
 800437c:	1d23      	adds	r3, r4, #4
 800437e:	4390      	bics	r0, r2
 8004380:	1ac2      	subs	r2, r0, r3
 8004382:	4298      	cmp	r0, r3
 8004384:	d0df      	beq.n	8004346 <_malloc_r+0x86>
 8004386:	1a1b      	subs	r3, r3, r0
 8004388:	50a3      	str	r3, [r4, r2]
 800438a:	e7dc      	b.n	8004346 <_malloc_r+0x86>
 800438c:	605a      	str	r2, [r3, #4]
 800438e:	e7ef      	b.n	8004370 <_malloc_r+0xb0>
 8004390:	0023      	movs	r3, r4
 8004392:	6864      	ldr	r4, [r4, #4]
 8004394:	e7a6      	b.n	80042e4 <_malloc_r+0x24>
 8004396:	9c00      	ldr	r4, [sp, #0]
 8004398:	6863      	ldr	r3, [r4, #4]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	e7ad      	b.n	80042fa <_malloc_r+0x3a>
 800439e:	001a      	movs	r2, r3
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	42a3      	cmp	r3, r4
 80043a4:	d1fb      	bne.n	800439e <_malloc_r+0xde>
 80043a6:	2300      	movs	r3, #0
 80043a8:	e7da      	b.n	8004360 <_malloc_r+0xa0>
 80043aa:	230c      	movs	r3, #12
 80043ac:	0028      	movs	r0, r5
 80043ae:	602b      	str	r3, [r5, #0]
 80043b0:	f000 f80e 	bl	80043d0 <__malloc_unlock>
 80043b4:	e7c6      	b.n	8004344 <_malloc_r+0x84>
 80043b6:	6007      	str	r7, [r0, #0]
 80043b8:	e7da      	b.n	8004370 <_malloc_r+0xb0>
 80043ba:	46c0      	nop			@ (mov r8, r8)
 80043bc:	200002d0 	.word	0x200002d0

080043c0 <__malloc_lock>:
 80043c0:	b510      	push	{r4, lr}
 80043c2:	4802      	ldr	r0, [pc, #8]	@ (80043cc <__malloc_lock+0xc>)
 80043c4:	f7ff ff0e 	bl	80041e4 <__retarget_lock_acquire_recursive>
 80043c8:	bd10      	pop	{r4, pc}
 80043ca:	46c0      	nop			@ (mov r8, r8)
 80043cc:	200002c8 	.word	0x200002c8

080043d0 <__malloc_unlock>:
 80043d0:	b510      	push	{r4, lr}
 80043d2:	4802      	ldr	r0, [pc, #8]	@ (80043dc <__malloc_unlock+0xc>)
 80043d4:	f7ff ff07 	bl	80041e6 <__retarget_lock_release_recursive>
 80043d8:	bd10      	pop	{r4, pc}
 80043da:	46c0      	nop			@ (mov r8, r8)
 80043dc:	200002c8 	.word	0x200002c8

080043e0 <__ssputs_r>:
 80043e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e2:	688e      	ldr	r6, [r1, #8]
 80043e4:	b085      	sub	sp, #20
 80043e6:	001f      	movs	r7, r3
 80043e8:	000c      	movs	r4, r1
 80043ea:	680b      	ldr	r3, [r1, #0]
 80043ec:	9002      	str	r0, [sp, #8]
 80043ee:	9203      	str	r2, [sp, #12]
 80043f0:	42be      	cmp	r6, r7
 80043f2:	d830      	bhi.n	8004456 <__ssputs_r+0x76>
 80043f4:	210c      	movs	r1, #12
 80043f6:	5e62      	ldrsh	r2, [r4, r1]
 80043f8:	2190      	movs	r1, #144	@ 0x90
 80043fa:	00c9      	lsls	r1, r1, #3
 80043fc:	420a      	tst	r2, r1
 80043fe:	d028      	beq.n	8004452 <__ssputs_r+0x72>
 8004400:	2003      	movs	r0, #3
 8004402:	6921      	ldr	r1, [r4, #16]
 8004404:	1a5b      	subs	r3, r3, r1
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	6963      	ldr	r3, [r4, #20]
 800440a:	4343      	muls	r3, r0
 800440c:	9801      	ldr	r0, [sp, #4]
 800440e:	0fdd      	lsrs	r5, r3, #31
 8004410:	18ed      	adds	r5, r5, r3
 8004412:	1c7b      	adds	r3, r7, #1
 8004414:	181b      	adds	r3, r3, r0
 8004416:	106d      	asrs	r5, r5, #1
 8004418:	42ab      	cmp	r3, r5
 800441a:	d900      	bls.n	800441e <__ssputs_r+0x3e>
 800441c:	001d      	movs	r5, r3
 800441e:	0552      	lsls	r2, r2, #21
 8004420:	d528      	bpl.n	8004474 <__ssputs_r+0x94>
 8004422:	0029      	movs	r1, r5
 8004424:	9802      	ldr	r0, [sp, #8]
 8004426:	f7ff ff4b 	bl	80042c0 <_malloc_r>
 800442a:	1e06      	subs	r6, r0, #0
 800442c:	d02c      	beq.n	8004488 <__ssputs_r+0xa8>
 800442e:	9a01      	ldr	r2, [sp, #4]
 8004430:	6921      	ldr	r1, [r4, #16]
 8004432:	f000 fae2 	bl	80049fa <memcpy>
 8004436:	89a2      	ldrh	r2, [r4, #12]
 8004438:	4b18      	ldr	r3, [pc, #96]	@ (800449c <__ssputs_r+0xbc>)
 800443a:	401a      	ands	r2, r3
 800443c:	2380      	movs	r3, #128	@ 0x80
 800443e:	4313      	orrs	r3, r2
 8004440:	81a3      	strh	r3, [r4, #12]
 8004442:	9b01      	ldr	r3, [sp, #4]
 8004444:	6126      	str	r6, [r4, #16]
 8004446:	18f6      	adds	r6, r6, r3
 8004448:	6026      	str	r6, [r4, #0]
 800444a:	003e      	movs	r6, r7
 800444c:	6165      	str	r5, [r4, #20]
 800444e:	1aed      	subs	r5, r5, r3
 8004450:	60a5      	str	r5, [r4, #8]
 8004452:	42be      	cmp	r6, r7
 8004454:	d900      	bls.n	8004458 <__ssputs_r+0x78>
 8004456:	003e      	movs	r6, r7
 8004458:	0032      	movs	r2, r6
 800445a:	9903      	ldr	r1, [sp, #12]
 800445c:	6820      	ldr	r0, [r4, #0]
 800445e:	f000 fa9b 	bl	8004998 <memmove>
 8004462:	2000      	movs	r0, #0
 8004464:	68a3      	ldr	r3, [r4, #8]
 8004466:	1b9b      	subs	r3, r3, r6
 8004468:	60a3      	str	r3, [r4, #8]
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	199b      	adds	r3, r3, r6
 800446e:	6023      	str	r3, [r4, #0]
 8004470:	b005      	add	sp, #20
 8004472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004474:	002a      	movs	r2, r5
 8004476:	9802      	ldr	r0, [sp, #8]
 8004478:	f000 fac8 	bl	8004a0c <_realloc_r>
 800447c:	1e06      	subs	r6, r0, #0
 800447e:	d1e0      	bne.n	8004442 <__ssputs_r+0x62>
 8004480:	6921      	ldr	r1, [r4, #16]
 8004482:	9802      	ldr	r0, [sp, #8]
 8004484:	f7ff feb0 	bl	80041e8 <_free_r>
 8004488:	230c      	movs	r3, #12
 800448a:	2001      	movs	r0, #1
 800448c:	9a02      	ldr	r2, [sp, #8]
 800448e:	4240      	negs	r0, r0
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	89a2      	ldrh	r2, [r4, #12]
 8004494:	3334      	adds	r3, #52	@ 0x34
 8004496:	4313      	orrs	r3, r2
 8004498:	81a3      	strh	r3, [r4, #12]
 800449a:	e7e9      	b.n	8004470 <__ssputs_r+0x90>
 800449c:	fffffb7f 	.word	0xfffffb7f

080044a0 <_svfiprintf_r>:
 80044a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a2:	b0a1      	sub	sp, #132	@ 0x84
 80044a4:	9003      	str	r0, [sp, #12]
 80044a6:	001d      	movs	r5, r3
 80044a8:	898b      	ldrh	r3, [r1, #12]
 80044aa:	000f      	movs	r7, r1
 80044ac:	0016      	movs	r6, r2
 80044ae:	061b      	lsls	r3, r3, #24
 80044b0:	d511      	bpl.n	80044d6 <_svfiprintf_r+0x36>
 80044b2:	690b      	ldr	r3, [r1, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10e      	bne.n	80044d6 <_svfiprintf_r+0x36>
 80044b8:	2140      	movs	r1, #64	@ 0x40
 80044ba:	f7ff ff01 	bl	80042c0 <_malloc_r>
 80044be:	6038      	str	r0, [r7, #0]
 80044c0:	6138      	str	r0, [r7, #16]
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d105      	bne.n	80044d2 <_svfiprintf_r+0x32>
 80044c6:	230c      	movs	r3, #12
 80044c8:	9a03      	ldr	r2, [sp, #12]
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	2001      	movs	r0, #1
 80044ce:	4240      	negs	r0, r0
 80044d0:	e0cf      	b.n	8004672 <_svfiprintf_r+0x1d2>
 80044d2:	2340      	movs	r3, #64	@ 0x40
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	2300      	movs	r3, #0
 80044d8:	ac08      	add	r4, sp, #32
 80044da:	6163      	str	r3, [r4, #20]
 80044dc:	3320      	adds	r3, #32
 80044de:	7663      	strb	r3, [r4, #25]
 80044e0:	3310      	adds	r3, #16
 80044e2:	76a3      	strb	r3, [r4, #26]
 80044e4:	9507      	str	r5, [sp, #28]
 80044e6:	0035      	movs	r5, r6
 80044e8:	782b      	ldrb	r3, [r5, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <_svfiprintf_r+0x52>
 80044ee:	2b25      	cmp	r3, #37	@ 0x25
 80044f0:	d148      	bne.n	8004584 <_svfiprintf_r+0xe4>
 80044f2:	1bab      	subs	r3, r5, r6
 80044f4:	9305      	str	r3, [sp, #20]
 80044f6:	42b5      	cmp	r5, r6
 80044f8:	d00b      	beq.n	8004512 <_svfiprintf_r+0x72>
 80044fa:	0032      	movs	r2, r6
 80044fc:	0039      	movs	r1, r7
 80044fe:	9803      	ldr	r0, [sp, #12]
 8004500:	f7ff ff6e 	bl	80043e0 <__ssputs_r>
 8004504:	3001      	adds	r0, #1
 8004506:	d100      	bne.n	800450a <_svfiprintf_r+0x6a>
 8004508:	e0ae      	b.n	8004668 <_svfiprintf_r+0x1c8>
 800450a:	6963      	ldr	r3, [r4, #20]
 800450c:	9a05      	ldr	r2, [sp, #20]
 800450e:	189b      	adds	r3, r3, r2
 8004510:	6163      	str	r3, [r4, #20]
 8004512:	782b      	ldrb	r3, [r5, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d100      	bne.n	800451a <_svfiprintf_r+0x7a>
 8004518:	e0a6      	b.n	8004668 <_svfiprintf_r+0x1c8>
 800451a:	2201      	movs	r2, #1
 800451c:	2300      	movs	r3, #0
 800451e:	4252      	negs	r2, r2
 8004520:	6062      	str	r2, [r4, #4]
 8004522:	a904      	add	r1, sp, #16
 8004524:	3254      	adds	r2, #84	@ 0x54
 8004526:	1852      	adds	r2, r2, r1
 8004528:	1c6e      	adds	r6, r5, #1
 800452a:	6023      	str	r3, [r4, #0]
 800452c:	60e3      	str	r3, [r4, #12]
 800452e:	60a3      	str	r3, [r4, #8]
 8004530:	7013      	strb	r3, [r2, #0]
 8004532:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004534:	4b54      	ldr	r3, [pc, #336]	@ (8004688 <_svfiprintf_r+0x1e8>)
 8004536:	2205      	movs	r2, #5
 8004538:	0018      	movs	r0, r3
 800453a:	7831      	ldrb	r1, [r6, #0]
 800453c:	9305      	str	r3, [sp, #20]
 800453e:	f000 fa51 	bl	80049e4 <memchr>
 8004542:	1c75      	adds	r5, r6, #1
 8004544:	2800      	cmp	r0, #0
 8004546:	d11f      	bne.n	8004588 <_svfiprintf_r+0xe8>
 8004548:	6822      	ldr	r2, [r4, #0]
 800454a:	06d3      	lsls	r3, r2, #27
 800454c:	d504      	bpl.n	8004558 <_svfiprintf_r+0xb8>
 800454e:	2353      	movs	r3, #83	@ 0x53
 8004550:	a904      	add	r1, sp, #16
 8004552:	185b      	adds	r3, r3, r1
 8004554:	2120      	movs	r1, #32
 8004556:	7019      	strb	r1, [r3, #0]
 8004558:	0713      	lsls	r3, r2, #28
 800455a:	d504      	bpl.n	8004566 <_svfiprintf_r+0xc6>
 800455c:	2353      	movs	r3, #83	@ 0x53
 800455e:	a904      	add	r1, sp, #16
 8004560:	185b      	adds	r3, r3, r1
 8004562:	212b      	movs	r1, #43	@ 0x2b
 8004564:	7019      	strb	r1, [r3, #0]
 8004566:	7833      	ldrb	r3, [r6, #0]
 8004568:	2b2a      	cmp	r3, #42	@ 0x2a
 800456a:	d016      	beq.n	800459a <_svfiprintf_r+0xfa>
 800456c:	0035      	movs	r5, r6
 800456e:	2100      	movs	r1, #0
 8004570:	200a      	movs	r0, #10
 8004572:	68e3      	ldr	r3, [r4, #12]
 8004574:	782a      	ldrb	r2, [r5, #0]
 8004576:	1c6e      	adds	r6, r5, #1
 8004578:	3a30      	subs	r2, #48	@ 0x30
 800457a:	2a09      	cmp	r2, #9
 800457c:	d950      	bls.n	8004620 <_svfiprintf_r+0x180>
 800457e:	2900      	cmp	r1, #0
 8004580:	d111      	bne.n	80045a6 <_svfiprintf_r+0x106>
 8004582:	e017      	b.n	80045b4 <_svfiprintf_r+0x114>
 8004584:	3501      	adds	r5, #1
 8004586:	e7af      	b.n	80044e8 <_svfiprintf_r+0x48>
 8004588:	9b05      	ldr	r3, [sp, #20]
 800458a:	6822      	ldr	r2, [r4, #0]
 800458c:	1ac0      	subs	r0, r0, r3
 800458e:	2301      	movs	r3, #1
 8004590:	4083      	lsls	r3, r0
 8004592:	4313      	orrs	r3, r2
 8004594:	002e      	movs	r6, r5
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	e7cc      	b.n	8004534 <_svfiprintf_r+0x94>
 800459a:	9b07      	ldr	r3, [sp, #28]
 800459c:	1d19      	adds	r1, r3, #4
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	9107      	str	r1, [sp, #28]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	db01      	blt.n	80045aa <_svfiprintf_r+0x10a>
 80045a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045a8:	e004      	b.n	80045b4 <_svfiprintf_r+0x114>
 80045aa:	425b      	negs	r3, r3
 80045ac:	60e3      	str	r3, [r4, #12]
 80045ae:	2302      	movs	r3, #2
 80045b0:	4313      	orrs	r3, r2
 80045b2:	6023      	str	r3, [r4, #0]
 80045b4:	782b      	ldrb	r3, [r5, #0]
 80045b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80045b8:	d10c      	bne.n	80045d4 <_svfiprintf_r+0x134>
 80045ba:	786b      	ldrb	r3, [r5, #1]
 80045bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80045be:	d134      	bne.n	800462a <_svfiprintf_r+0x18a>
 80045c0:	9b07      	ldr	r3, [sp, #28]
 80045c2:	3502      	adds	r5, #2
 80045c4:	1d1a      	adds	r2, r3, #4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	9207      	str	r2, [sp, #28]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	da01      	bge.n	80045d2 <_svfiprintf_r+0x132>
 80045ce:	2301      	movs	r3, #1
 80045d0:	425b      	negs	r3, r3
 80045d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80045d4:	4e2d      	ldr	r6, [pc, #180]	@ (800468c <_svfiprintf_r+0x1ec>)
 80045d6:	2203      	movs	r2, #3
 80045d8:	0030      	movs	r0, r6
 80045da:	7829      	ldrb	r1, [r5, #0]
 80045dc:	f000 fa02 	bl	80049e4 <memchr>
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d006      	beq.n	80045f2 <_svfiprintf_r+0x152>
 80045e4:	2340      	movs	r3, #64	@ 0x40
 80045e6:	1b80      	subs	r0, r0, r6
 80045e8:	4083      	lsls	r3, r0
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	3501      	adds	r5, #1
 80045ee:	4313      	orrs	r3, r2
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	7829      	ldrb	r1, [r5, #0]
 80045f4:	2206      	movs	r2, #6
 80045f6:	4826      	ldr	r0, [pc, #152]	@ (8004690 <_svfiprintf_r+0x1f0>)
 80045f8:	1c6e      	adds	r6, r5, #1
 80045fa:	7621      	strb	r1, [r4, #24]
 80045fc:	f000 f9f2 	bl	80049e4 <memchr>
 8004600:	2800      	cmp	r0, #0
 8004602:	d038      	beq.n	8004676 <_svfiprintf_r+0x1d6>
 8004604:	4b23      	ldr	r3, [pc, #140]	@ (8004694 <_svfiprintf_r+0x1f4>)
 8004606:	2b00      	cmp	r3, #0
 8004608:	d122      	bne.n	8004650 <_svfiprintf_r+0x1b0>
 800460a:	2207      	movs	r2, #7
 800460c:	9b07      	ldr	r3, [sp, #28]
 800460e:	3307      	adds	r3, #7
 8004610:	4393      	bics	r3, r2
 8004612:	3308      	adds	r3, #8
 8004614:	9307      	str	r3, [sp, #28]
 8004616:	6963      	ldr	r3, [r4, #20]
 8004618:	9a04      	ldr	r2, [sp, #16]
 800461a:	189b      	adds	r3, r3, r2
 800461c:	6163      	str	r3, [r4, #20]
 800461e:	e762      	b.n	80044e6 <_svfiprintf_r+0x46>
 8004620:	4343      	muls	r3, r0
 8004622:	0035      	movs	r5, r6
 8004624:	2101      	movs	r1, #1
 8004626:	189b      	adds	r3, r3, r2
 8004628:	e7a4      	b.n	8004574 <_svfiprintf_r+0xd4>
 800462a:	2300      	movs	r3, #0
 800462c:	200a      	movs	r0, #10
 800462e:	0019      	movs	r1, r3
 8004630:	3501      	adds	r5, #1
 8004632:	6063      	str	r3, [r4, #4]
 8004634:	782a      	ldrb	r2, [r5, #0]
 8004636:	1c6e      	adds	r6, r5, #1
 8004638:	3a30      	subs	r2, #48	@ 0x30
 800463a:	2a09      	cmp	r2, #9
 800463c:	d903      	bls.n	8004646 <_svfiprintf_r+0x1a6>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0c8      	beq.n	80045d4 <_svfiprintf_r+0x134>
 8004642:	9109      	str	r1, [sp, #36]	@ 0x24
 8004644:	e7c6      	b.n	80045d4 <_svfiprintf_r+0x134>
 8004646:	4341      	muls	r1, r0
 8004648:	0035      	movs	r5, r6
 800464a:	2301      	movs	r3, #1
 800464c:	1889      	adds	r1, r1, r2
 800464e:	e7f1      	b.n	8004634 <_svfiprintf_r+0x194>
 8004650:	aa07      	add	r2, sp, #28
 8004652:	9200      	str	r2, [sp, #0]
 8004654:	0021      	movs	r1, r4
 8004656:	003a      	movs	r2, r7
 8004658:	4b0f      	ldr	r3, [pc, #60]	@ (8004698 <_svfiprintf_r+0x1f8>)
 800465a:	9803      	ldr	r0, [sp, #12]
 800465c:	e000      	b.n	8004660 <_svfiprintf_r+0x1c0>
 800465e:	bf00      	nop
 8004660:	9004      	str	r0, [sp, #16]
 8004662:	9b04      	ldr	r3, [sp, #16]
 8004664:	3301      	adds	r3, #1
 8004666:	d1d6      	bne.n	8004616 <_svfiprintf_r+0x176>
 8004668:	89bb      	ldrh	r3, [r7, #12]
 800466a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800466c:	065b      	lsls	r3, r3, #25
 800466e:	d500      	bpl.n	8004672 <_svfiprintf_r+0x1d2>
 8004670:	e72c      	b.n	80044cc <_svfiprintf_r+0x2c>
 8004672:	b021      	add	sp, #132	@ 0x84
 8004674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004676:	aa07      	add	r2, sp, #28
 8004678:	9200      	str	r2, [sp, #0]
 800467a:	0021      	movs	r1, r4
 800467c:	003a      	movs	r2, r7
 800467e:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <_svfiprintf_r+0x1f8>)
 8004680:	9803      	ldr	r0, [sp, #12]
 8004682:	f000 f87b 	bl	800477c <_printf_i>
 8004686:	e7eb      	b.n	8004660 <_svfiprintf_r+0x1c0>
 8004688:	08004ba0 	.word	0x08004ba0
 800468c:	08004ba6 	.word	0x08004ba6
 8004690:	08004baa 	.word	0x08004baa
 8004694:	00000000 	.word	0x00000000
 8004698:	080043e1 	.word	0x080043e1

0800469c <_printf_common>:
 800469c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800469e:	0016      	movs	r6, r2
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	688a      	ldr	r2, [r1, #8]
 80046a4:	690b      	ldr	r3, [r1, #16]
 80046a6:	000c      	movs	r4, r1
 80046a8:	9000      	str	r0, [sp, #0]
 80046aa:	4293      	cmp	r3, r2
 80046ac:	da00      	bge.n	80046b0 <_printf_common+0x14>
 80046ae:	0013      	movs	r3, r2
 80046b0:	0022      	movs	r2, r4
 80046b2:	6033      	str	r3, [r6, #0]
 80046b4:	3243      	adds	r2, #67	@ 0x43
 80046b6:	7812      	ldrb	r2, [r2, #0]
 80046b8:	2a00      	cmp	r2, #0
 80046ba:	d001      	beq.n	80046c0 <_printf_common+0x24>
 80046bc:	3301      	adds	r3, #1
 80046be:	6033      	str	r3, [r6, #0]
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	069b      	lsls	r3, r3, #26
 80046c4:	d502      	bpl.n	80046cc <_printf_common+0x30>
 80046c6:	6833      	ldr	r3, [r6, #0]
 80046c8:	3302      	adds	r3, #2
 80046ca:	6033      	str	r3, [r6, #0]
 80046cc:	6822      	ldr	r2, [r4, #0]
 80046ce:	2306      	movs	r3, #6
 80046d0:	0015      	movs	r5, r2
 80046d2:	401d      	ands	r5, r3
 80046d4:	421a      	tst	r2, r3
 80046d6:	d027      	beq.n	8004728 <_printf_common+0x8c>
 80046d8:	0023      	movs	r3, r4
 80046da:	3343      	adds	r3, #67	@ 0x43
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	1e5a      	subs	r2, r3, #1
 80046e0:	4193      	sbcs	r3, r2
 80046e2:	6822      	ldr	r2, [r4, #0]
 80046e4:	0692      	lsls	r2, r2, #26
 80046e6:	d430      	bmi.n	800474a <_printf_common+0xae>
 80046e8:	0022      	movs	r2, r4
 80046ea:	9901      	ldr	r1, [sp, #4]
 80046ec:	9800      	ldr	r0, [sp, #0]
 80046ee:	9d08      	ldr	r5, [sp, #32]
 80046f0:	3243      	adds	r2, #67	@ 0x43
 80046f2:	47a8      	blx	r5
 80046f4:	3001      	adds	r0, #1
 80046f6:	d025      	beq.n	8004744 <_printf_common+0xa8>
 80046f8:	2206      	movs	r2, #6
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	2500      	movs	r5, #0
 80046fe:	4013      	ands	r3, r2
 8004700:	2b04      	cmp	r3, #4
 8004702:	d105      	bne.n	8004710 <_printf_common+0x74>
 8004704:	6833      	ldr	r3, [r6, #0]
 8004706:	68e5      	ldr	r5, [r4, #12]
 8004708:	1aed      	subs	r5, r5, r3
 800470a:	43eb      	mvns	r3, r5
 800470c:	17db      	asrs	r3, r3, #31
 800470e:	401d      	ands	r5, r3
 8004710:	68a3      	ldr	r3, [r4, #8]
 8004712:	6922      	ldr	r2, [r4, #16]
 8004714:	4293      	cmp	r3, r2
 8004716:	dd01      	ble.n	800471c <_printf_common+0x80>
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	18ed      	adds	r5, r5, r3
 800471c:	2600      	movs	r6, #0
 800471e:	42b5      	cmp	r5, r6
 8004720:	d120      	bne.n	8004764 <_printf_common+0xc8>
 8004722:	2000      	movs	r0, #0
 8004724:	e010      	b.n	8004748 <_printf_common+0xac>
 8004726:	3501      	adds	r5, #1
 8004728:	68e3      	ldr	r3, [r4, #12]
 800472a:	6832      	ldr	r2, [r6, #0]
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	42ab      	cmp	r3, r5
 8004730:	ddd2      	ble.n	80046d8 <_printf_common+0x3c>
 8004732:	0022      	movs	r2, r4
 8004734:	2301      	movs	r3, #1
 8004736:	9901      	ldr	r1, [sp, #4]
 8004738:	9800      	ldr	r0, [sp, #0]
 800473a:	9f08      	ldr	r7, [sp, #32]
 800473c:	3219      	adds	r2, #25
 800473e:	47b8      	blx	r7
 8004740:	3001      	adds	r0, #1
 8004742:	d1f0      	bne.n	8004726 <_printf_common+0x8a>
 8004744:	2001      	movs	r0, #1
 8004746:	4240      	negs	r0, r0
 8004748:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800474a:	2030      	movs	r0, #48	@ 0x30
 800474c:	18e1      	adds	r1, r4, r3
 800474e:	3143      	adds	r1, #67	@ 0x43
 8004750:	7008      	strb	r0, [r1, #0]
 8004752:	0021      	movs	r1, r4
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	3145      	adds	r1, #69	@ 0x45
 8004758:	7809      	ldrb	r1, [r1, #0]
 800475a:	18a2      	adds	r2, r4, r2
 800475c:	3243      	adds	r2, #67	@ 0x43
 800475e:	3302      	adds	r3, #2
 8004760:	7011      	strb	r1, [r2, #0]
 8004762:	e7c1      	b.n	80046e8 <_printf_common+0x4c>
 8004764:	0022      	movs	r2, r4
 8004766:	2301      	movs	r3, #1
 8004768:	9901      	ldr	r1, [sp, #4]
 800476a:	9800      	ldr	r0, [sp, #0]
 800476c:	9f08      	ldr	r7, [sp, #32]
 800476e:	321a      	adds	r2, #26
 8004770:	47b8      	blx	r7
 8004772:	3001      	adds	r0, #1
 8004774:	d0e6      	beq.n	8004744 <_printf_common+0xa8>
 8004776:	3601      	adds	r6, #1
 8004778:	e7d1      	b.n	800471e <_printf_common+0x82>
	...

0800477c <_printf_i>:
 800477c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477e:	b08b      	sub	sp, #44	@ 0x2c
 8004780:	9206      	str	r2, [sp, #24]
 8004782:	000a      	movs	r2, r1
 8004784:	3243      	adds	r2, #67	@ 0x43
 8004786:	9307      	str	r3, [sp, #28]
 8004788:	9005      	str	r0, [sp, #20]
 800478a:	9203      	str	r2, [sp, #12]
 800478c:	7e0a      	ldrb	r2, [r1, #24]
 800478e:	000c      	movs	r4, r1
 8004790:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004792:	2a78      	cmp	r2, #120	@ 0x78
 8004794:	d809      	bhi.n	80047aa <_printf_i+0x2e>
 8004796:	2a62      	cmp	r2, #98	@ 0x62
 8004798:	d80b      	bhi.n	80047b2 <_printf_i+0x36>
 800479a:	2a00      	cmp	r2, #0
 800479c:	d100      	bne.n	80047a0 <_printf_i+0x24>
 800479e:	e0bc      	b.n	800491a <_printf_i+0x19e>
 80047a0:	497b      	ldr	r1, [pc, #492]	@ (8004990 <_printf_i+0x214>)
 80047a2:	9104      	str	r1, [sp, #16]
 80047a4:	2a58      	cmp	r2, #88	@ 0x58
 80047a6:	d100      	bne.n	80047aa <_printf_i+0x2e>
 80047a8:	e090      	b.n	80048cc <_printf_i+0x150>
 80047aa:	0025      	movs	r5, r4
 80047ac:	3542      	adds	r5, #66	@ 0x42
 80047ae:	702a      	strb	r2, [r5, #0]
 80047b0:	e022      	b.n	80047f8 <_printf_i+0x7c>
 80047b2:	0010      	movs	r0, r2
 80047b4:	3863      	subs	r0, #99	@ 0x63
 80047b6:	2815      	cmp	r0, #21
 80047b8:	d8f7      	bhi.n	80047aa <_printf_i+0x2e>
 80047ba:	f7fb fcad 	bl	8000118 <__gnu_thumb1_case_shi>
 80047be:	0016      	.short	0x0016
 80047c0:	fff6001f 	.word	0xfff6001f
 80047c4:	fff6fff6 	.word	0xfff6fff6
 80047c8:	001ffff6 	.word	0x001ffff6
 80047cc:	fff6fff6 	.word	0xfff6fff6
 80047d0:	fff6fff6 	.word	0xfff6fff6
 80047d4:	003600a1 	.word	0x003600a1
 80047d8:	fff60080 	.word	0xfff60080
 80047dc:	00b2fff6 	.word	0x00b2fff6
 80047e0:	0036fff6 	.word	0x0036fff6
 80047e4:	fff6fff6 	.word	0xfff6fff6
 80047e8:	0084      	.short	0x0084
 80047ea:	0025      	movs	r5, r4
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	3542      	adds	r5, #66	@ 0x42
 80047f0:	1d11      	adds	r1, r2, #4
 80047f2:	6019      	str	r1, [r3, #0]
 80047f4:	6813      	ldr	r3, [r2, #0]
 80047f6:	702b      	strb	r3, [r5, #0]
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0a0      	b.n	800493e <_printf_i+0x1c2>
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	6809      	ldr	r1, [r1, #0]
 8004800:	1d02      	adds	r2, r0, #4
 8004802:	060d      	lsls	r5, r1, #24
 8004804:	d50b      	bpl.n	800481e <_printf_i+0xa2>
 8004806:	6806      	ldr	r6, [r0, #0]
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	2e00      	cmp	r6, #0
 800480c:	da03      	bge.n	8004816 <_printf_i+0x9a>
 800480e:	232d      	movs	r3, #45	@ 0x2d
 8004810:	9a03      	ldr	r2, [sp, #12]
 8004812:	4276      	negs	r6, r6
 8004814:	7013      	strb	r3, [r2, #0]
 8004816:	4b5e      	ldr	r3, [pc, #376]	@ (8004990 <_printf_i+0x214>)
 8004818:	270a      	movs	r7, #10
 800481a:	9304      	str	r3, [sp, #16]
 800481c:	e018      	b.n	8004850 <_printf_i+0xd4>
 800481e:	6806      	ldr	r6, [r0, #0]
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	0649      	lsls	r1, r1, #25
 8004824:	d5f1      	bpl.n	800480a <_printf_i+0x8e>
 8004826:	b236      	sxth	r6, r6
 8004828:	e7ef      	b.n	800480a <_printf_i+0x8e>
 800482a:	6808      	ldr	r0, [r1, #0]
 800482c:	6819      	ldr	r1, [r3, #0]
 800482e:	c940      	ldmia	r1!, {r6}
 8004830:	0605      	lsls	r5, r0, #24
 8004832:	d402      	bmi.n	800483a <_printf_i+0xbe>
 8004834:	0640      	lsls	r0, r0, #25
 8004836:	d500      	bpl.n	800483a <_printf_i+0xbe>
 8004838:	b2b6      	uxth	r6, r6
 800483a:	6019      	str	r1, [r3, #0]
 800483c:	4b54      	ldr	r3, [pc, #336]	@ (8004990 <_printf_i+0x214>)
 800483e:	270a      	movs	r7, #10
 8004840:	9304      	str	r3, [sp, #16]
 8004842:	2a6f      	cmp	r2, #111	@ 0x6f
 8004844:	d100      	bne.n	8004848 <_printf_i+0xcc>
 8004846:	3f02      	subs	r7, #2
 8004848:	0023      	movs	r3, r4
 800484a:	2200      	movs	r2, #0
 800484c:	3343      	adds	r3, #67	@ 0x43
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	6863      	ldr	r3, [r4, #4]
 8004852:	60a3      	str	r3, [r4, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	db03      	blt.n	8004860 <_printf_i+0xe4>
 8004858:	2104      	movs	r1, #4
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	438a      	bics	r2, r1
 800485e:	6022      	str	r2, [r4, #0]
 8004860:	2e00      	cmp	r6, #0
 8004862:	d102      	bne.n	800486a <_printf_i+0xee>
 8004864:	9d03      	ldr	r5, [sp, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00c      	beq.n	8004884 <_printf_i+0x108>
 800486a:	9d03      	ldr	r5, [sp, #12]
 800486c:	0030      	movs	r0, r6
 800486e:	0039      	movs	r1, r7
 8004870:	f7fb fce2 	bl	8000238 <__aeabi_uidivmod>
 8004874:	9b04      	ldr	r3, [sp, #16]
 8004876:	3d01      	subs	r5, #1
 8004878:	5c5b      	ldrb	r3, [r3, r1]
 800487a:	702b      	strb	r3, [r5, #0]
 800487c:	0033      	movs	r3, r6
 800487e:	0006      	movs	r6, r0
 8004880:	429f      	cmp	r7, r3
 8004882:	d9f3      	bls.n	800486c <_printf_i+0xf0>
 8004884:	2f08      	cmp	r7, #8
 8004886:	d109      	bne.n	800489c <_printf_i+0x120>
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	07db      	lsls	r3, r3, #31
 800488c:	d506      	bpl.n	800489c <_printf_i+0x120>
 800488e:	6862      	ldr	r2, [r4, #4]
 8004890:	6923      	ldr	r3, [r4, #16]
 8004892:	429a      	cmp	r2, r3
 8004894:	dc02      	bgt.n	800489c <_printf_i+0x120>
 8004896:	2330      	movs	r3, #48	@ 0x30
 8004898:	3d01      	subs	r5, #1
 800489a:	702b      	strb	r3, [r5, #0]
 800489c:	9b03      	ldr	r3, [sp, #12]
 800489e:	1b5b      	subs	r3, r3, r5
 80048a0:	6123      	str	r3, [r4, #16]
 80048a2:	9b07      	ldr	r3, [sp, #28]
 80048a4:	0021      	movs	r1, r4
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	9805      	ldr	r0, [sp, #20]
 80048aa:	9b06      	ldr	r3, [sp, #24]
 80048ac:	aa09      	add	r2, sp, #36	@ 0x24
 80048ae:	f7ff fef5 	bl	800469c <_printf_common>
 80048b2:	3001      	adds	r0, #1
 80048b4:	d148      	bne.n	8004948 <_printf_i+0x1cc>
 80048b6:	2001      	movs	r0, #1
 80048b8:	4240      	negs	r0, r0
 80048ba:	b00b      	add	sp, #44	@ 0x2c
 80048bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048be:	2220      	movs	r2, #32
 80048c0:	6809      	ldr	r1, [r1, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	6022      	str	r2, [r4, #0]
 80048c6:	2278      	movs	r2, #120	@ 0x78
 80048c8:	4932      	ldr	r1, [pc, #200]	@ (8004994 <_printf_i+0x218>)
 80048ca:	9104      	str	r1, [sp, #16]
 80048cc:	0021      	movs	r1, r4
 80048ce:	3145      	adds	r1, #69	@ 0x45
 80048d0:	700a      	strb	r2, [r1, #0]
 80048d2:	6819      	ldr	r1, [r3, #0]
 80048d4:	6822      	ldr	r2, [r4, #0]
 80048d6:	c940      	ldmia	r1!, {r6}
 80048d8:	0610      	lsls	r0, r2, #24
 80048da:	d402      	bmi.n	80048e2 <_printf_i+0x166>
 80048dc:	0650      	lsls	r0, r2, #25
 80048de:	d500      	bpl.n	80048e2 <_printf_i+0x166>
 80048e0:	b2b6      	uxth	r6, r6
 80048e2:	6019      	str	r1, [r3, #0]
 80048e4:	07d3      	lsls	r3, r2, #31
 80048e6:	d502      	bpl.n	80048ee <_printf_i+0x172>
 80048e8:	2320      	movs	r3, #32
 80048ea:	4313      	orrs	r3, r2
 80048ec:	6023      	str	r3, [r4, #0]
 80048ee:	2e00      	cmp	r6, #0
 80048f0:	d001      	beq.n	80048f6 <_printf_i+0x17a>
 80048f2:	2710      	movs	r7, #16
 80048f4:	e7a8      	b.n	8004848 <_printf_i+0xcc>
 80048f6:	2220      	movs	r2, #32
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	4393      	bics	r3, r2
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	e7f8      	b.n	80048f2 <_printf_i+0x176>
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	680d      	ldr	r5, [r1, #0]
 8004904:	1d10      	adds	r0, r2, #4
 8004906:	6949      	ldr	r1, [r1, #20]
 8004908:	6018      	str	r0, [r3, #0]
 800490a:	6813      	ldr	r3, [r2, #0]
 800490c:	062e      	lsls	r6, r5, #24
 800490e:	d501      	bpl.n	8004914 <_printf_i+0x198>
 8004910:	6019      	str	r1, [r3, #0]
 8004912:	e002      	b.n	800491a <_printf_i+0x19e>
 8004914:	066d      	lsls	r5, r5, #25
 8004916:	d5fb      	bpl.n	8004910 <_printf_i+0x194>
 8004918:	8019      	strh	r1, [r3, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	9d03      	ldr	r5, [sp, #12]
 800491e:	6123      	str	r3, [r4, #16]
 8004920:	e7bf      	b.n	80048a2 <_printf_i+0x126>
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	1d11      	adds	r1, r2, #4
 8004926:	6019      	str	r1, [r3, #0]
 8004928:	6815      	ldr	r5, [r2, #0]
 800492a:	2100      	movs	r1, #0
 800492c:	0028      	movs	r0, r5
 800492e:	6862      	ldr	r2, [r4, #4]
 8004930:	f000 f858 	bl	80049e4 <memchr>
 8004934:	2800      	cmp	r0, #0
 8004936:	d001      	beq.n	800493c <_printf_i+0x1c0>
 8004938:	1b40      	subs	r0, r0, r5
 800493a:	6060      	str	r0, [r4, #4]
 800493c:	6863      	ldr	r3, [r4, #4]
 800493e:	6123      	str	r3, [r4, #16]
 8004940:	2300      	movs	r3, #0
 8004942:	9a03      	ldr	r2, [sp, #12]
 8004944:	7013      	strb	r3, [r2, #0]
 8004946:	e7ac      	b.n	80048a2 <_printf_i+0x126>
 8004948:	002a      	movs	r2, r5
 800494a:	6923      	ldr	r3, [r4, #16]
 800494c:	9906      	ldr	r1, [sp, #24]
 800494e:	9805      	ldr	r0, [sp, #20]
 8004950:	9d07      	ldr	r5, [sp, #28]
 8004952:	47a8      	blx	r5
 8004954:	3001      	adds	r0, #1
 8004956:	d0ae      	beq.n	80048b6 <_printf_i+0x13a>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	079b      	lsls	r3, r3, #30
 800495c:	d415      	bmi.n	800498a <_printf_i+0x20e>
 800495e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004960:	68e0      	ldr	r0, [r4, #12]
 8004962:	4298      	cmp	r0, r3
 8004964:	daa9      	bge.n	80048ba <_printf_i+0x13e>
 8004966:	0018      	movs	r0, r3
 8004968:	e7a7      	b.n	80048ba <_printf_i+0x13e>
 800496a:	0022      	movs	r2, r4
 800496c:	2301      	movs	r3, #1
 800496e:	9906      	ldr	r1, [sp, #24]
 8004970:	9805      	ldr	r0, [sp, #20]
 8004972:	9e07      	ldr	r6, [sp, #28]
 8004974:	3219      	adds	r2, #25
 8004976:	47b0      	blx	r6
 8004978:	3001      	adds	r0, #1
 800497a:	d09c      	beq.n	80048b6 <_printf_i+0x13a>
 800497c:	3501      	adds	r5, #1
 800497e:	68e3      	ldr	r3, [r4, #12]
 8004980:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	42ab      	cmp	r3, r5
 8004986:	dcf0      	bgt.n	800496a <_printf_i+0x1ee>
 8004988:	e7e9      	b.n	800495e <_printf_i+0x1e2>
 800498a:	2500      	movs	r5, #0
 800498c:	e7f7      	b.n	800497e <_printf_i+0x202>
 800498e:	46c0      	nop			@ (mov r8, r8)
 8004990:	08004bb1 	.word	0x08004bb1
 8004994:	08004bc2 	.word	0x08004bc2

08004998 <memmove>:
 8004998:	b510      	push	{r4, lr}
 800499a:	4288      	cmp	r0, r1
 800499c:	d806      	bhi.n	80049ac <memmove+0x14>
 800499e:	2300      	movs	r3, #0
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d008      	beq.n	80049b6 <memmove+0x1e>
 80049a4:	5ccc      	ldrb	r4, [r1, r3]
 80049a6:	54c4      	strb	r4, [r0, r3]
 80049a8:	3301      	adds	r3, #1
 80049aa:	e7f9      	b.n	80049a0 <memmove+0x8>
 80049ac:	188b      	adds	r3, r1, r2
 80049ae:	4298      	cmp	r0, r3
 80049b0:	d2f5      	bcs.n	800499e <memmove+0x6>
 80049b2:	3a01      	subs	r2, #1
 80049b4:	d200      	bcs.n	80049b8 <memmove+0x20>
 80049b6:	bd10      	pop	{r4, pc}
 80049b8:	5c8b      	ldrb	r3, [r1, r2]
 80049ba:	5483      	strb	r3, [r0, r2]
 80049bc:	e7f9      	b.n	80049b2 <memmove+0x1a>
	...

080049c0 <_sbrk_r>:
 80049c0:	2300      	movs	r3, #0
 80049c2:	b570      	push	{r4, r5, r6, lr}
 80049c4:	4d06      	ldr	r5, [pc, #24]	@ (80049e0 <_sbrk_r+0x20>)
 80049c6:	0004      	movs	r4, r0
 80049c8:	0008      	movs	r0, r1
 80049ca:	602b      	str	r3, [r5, #0]
 80049cc:	f7fc f89c 	bl	8000b08 <_sbrk>
 80049d0:	1c43      	adds	r3, r0, #1
 80049d2:	d103      	bne.n	80049dc <_sbrk_r+0x1c>
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d000      	beq.n	80049dc <_sbrk_r+0x1c>
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	bd70      	pop	{r4, r5, r6, pc}
 80049de:	46c0      	nop			@ (mov r8, r8)
 80049e0:	200002c4 	.word	0x200002c4

080049e4 <memchr>:
 80049e4:	b2c9      	uxtb	r1, r1
 80049e6:	1882      	adds	r2, r0, r2
 80049e8:	4290      	cmp	r0, r2
 80049ea:	d101      	bne.n	80049f0 <memchr+0xc>
 80049ec:	2000      	movs	r0, #0
 80049ee:	4770      	bx	lr
 80049f0:	7803      	ldrb	r3, [r0, #0]
 80049f2:	428b      	cmp	r3, r1
 80049f4:	d0fb      	beq.n	80049ee <memchr+0xa>
 80049f6:	3001      	adds	r0, #1
 80049f8:	e7f6      	b.n	80049e8 <memchr+0x4>

080049fa <memcpy>:
 80049fa:	2300      	movs	r3, #0
 80049fc:	b510      	push	{r4, lr}
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d100      	bne.n	8004a04 <memcpy+0xa>
 8004a02:	bd10      	pop	{r4, pc}
 8004a04:	5ccc      	ldrb	r4, [r1, r3]
 8004a06:	54c4      	strb	r4, [r0, r3]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	e7f8      	b.n	80049fe <memcpy+0x4>

08004a0c <_realloc_r>:
 8004a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a0e:	0006      	movs	r6, r0
 8004a10:	000c      	movs	r4, r1
 8004a12:	0015      	movs	r5, r2
 8004a14:	2900      	cmp	r1, #0
 8004a16:	d105      	bne.n	8004a24 <_realloc_r+0x18>
 8004a18:	0011      	movs	r1, r2
 8004a1a:	f7ff fc51 	bl	80042c0 <_malloc_r>
 8004a1e:	0004      	movs	r4, r0
 8004a20:	0020      	movs	r0, r4
 8004a22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a24:	2a00      	cmp	r2, #0
 8004a26:	d103      	bne.n	8004a30 <_realloc_r+0x24>
 8004a28:	f7ff fbde 	bl	80041e8 <_free_r>
 8004a2c:	2400      	movs	r4, #0
 8004a2e:	e7f7      	b.n	8004a20 <_realloc_r+0x14>
 8004a30:	f000 f81b 	bl	8004a6a <_malloc_usable_size_r>
 8004a34:	0007      	movs	r7, r0
 8004a36:	4285      	cmp	r5, r0
 8004a38:	d802      	bhi.n	8004a40 <_realloc_r+0x34>
 8004a3a:	0843      	lsrs	r3, r0, #1
 8004a3c:	42ab      	cmp	r3, r5
 8004a3e:	d3ef      	bcc.n	8004a20 <_realloc_r+0x14>
 8004a40:	0029      	movs	r1, r5
 8004a42:	0030      	movs	r0, r6
 8004a44:	f7ff fc3c 	bl	80042c0 <_malloc_r>
 8004a48:	9001      	str	r0, [sp, #4]
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d0ee      	beq.n	8004a2c <_realloc_r+0x20>
 8004a4e:	002a      	movs	r2, r5
 8004a50:	42bd      	cmp	r5, r7
 8004a52:	d900      	bls.n	8004a56 <_realloc_r+0x4a>
 8004a54:	003a      	movs	r2, r7
 8004a56:	0021      	movs	r1, r4
 8004a58:	9801      	ldr	r0, [sp, #4]
 8004a5a:	f7ff ffce 	bl	80049fa <memcpy>
 8004a5e:	0021      	movs	r1, r4
 8004a60:	0030      	movs	r0, r6
 8004a62:	f7ff fbc1 	bl	80041e8 <_free_r>
 8004a66:	9c01      	ldr	r4, [sp, #4]
 8004a68:	e7da      	b.n	8004a20 <_realloc_r+0x14>

08004a6a <_malloc_usable_size_r>:
 8004a6a:	1f0b      	subs	r3, r1, #4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	1f18      	subs	r0, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	da01      	bge.n	8004a78 <_malloc_usable_size_r+0xe>
 8004a74:	580b      	ldr	r3, [r1, r0]
 8004a76:	18c0      	adds	r0, r0, r3
 8004a78:	4770      	bx	lr
	...

08004a7c <_init>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a82:	bc08      	pop	{r3}
 8004a84:	469e      	mov	lr, r3
 8004a86:	4770      	bx	lr

08004a88 <_fini>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	46c0      	nop			@ (mov r8, r8)
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr
